

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Wed Feb 28 14:51:22 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    16                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    26   000000                     
    27                           ; Generated 12/10/2023 GMT
    28                           ; 
    29                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F46K22 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61   000000                     _T2CONbits	set	4026
    62   000000                     _ANSELC	set	3898
    63   000000                     _PIR1bits	set	3998
    64   000000                     _RCSTAbits	set	4011
    65   000000                     _TXSTA1bits	set	4012
    66   000000                     _SPBRG	set	4015
    67   000000                     _RCONbits	set	4048
    68   000000                     _OSCCON	set	4051
    69   000000                     _INTCONbits	set	4082
    70   000000                     _CCP5CON	set	3924
    71   000000                     _CCP3CON	set	3933
    72   000000                     _LATCbits	set	3979
    73   000000                     _TRISCbits	set	3988
    74   000000                     _ANSELE	set	3900
    75   000000                     _ANSELD	set	3899
    76   000000                     _PIE1bits	set	3997
    77   000000                     _TRISE	set	3990
    78   000000                     _TRISD	set	3989
    79   000000                     _LATE	set	3981
    80   000000                     _LATD	set	3980
    81   000000                     _BAUDCON1bits	set	4024
    82   000000                     _RCREG1	set	4014
    83   000000                     _T2CON	set	4026
    84   000000                     _PR2	set	4027
    85   000000                     _CCPR3L	set	3934
    86   000000                     _CCPR5L	set	3925
    87                           
    88                           	psect	smallconst
    89   001000                     __psmallconst:
    90                           	callstack 0
    91   001000  00                 	db	0
    92   001001                     STR_2:
    93   001001  52                 	db	82	;'R'
    94   001002  6F                 	db	111	;'o'
    95   001003  62                 	db	98	;'b'
    96   001004  6F                 	db	111	;'o'
    97   001005  74                 	db	116	;'t'
    98   001006  69                 	db	105	;'i'
    99   001007  63                 	db	99	;'c'
   100   001008  20                 	db	32
   101   001009  50                 	db	80	;'P'
   102   00100A  6C                 	db	108	;'l'
   103   00100B  61                 	db	97	;'a'
   104   00100C  74                 	db	116	;'t'
   105   00100D  66                 	db	102	;'f'
   106   00100E  6F                 	db	111	;'o'
   107   00100F  72                 	db	114	;'r'
   108   001010  6D                 	db	109	;'m'
   109   001011  00                 	db	0
   110   001012                     STR_1:
   111   001012  52                 	db	82	;'R'
   112   001013  65                 	db	101	;'e'
   113   001014  73                 	db	115	;'s'
   114   001015  65                 	db	101	;'e'
   115   001016  61                 	db	97	;'a'
   116   001017  72                 	db	114	;'r'
   117   001018  63                 	db	99	;'c'
   118   001019  68                 	db	104	;'h'
   119   00101A  20                 	db	32
   120   00101B  50                 	db	80	;'P'
   121   00101C  72                 	db	114	;'r'
   122   00101D  6F                 	db	111	;'o'
   123   00101E  6A                 	db	106	;'j'
   124   00101F  65                 	db	101	;'e'
   125   001020  63                 	db	99	;'c'
   126   001021  74                 	db	116	;'t'
   127   001022  00                 	db	0
   128   001023  00                 	db	0	; dummy byte at the end
   129   000000                     
   130                           ; #config settings
   131                           
   132                           	psect	cinit
   133   0012BA                     __pcinit:
   134                           	callstack 0
   135   0012BA                     start_initialization:
   136                           	callstack 0
   137   0012BA                     __initialization:
   138                           	callstack 0
   139                           
   140                           ; Clear objects allocated to COMRAM (9 bytes)
   141   0012BA  EE00  F013         	lfsr	0,__pbssCOMRAM
   142   0012BE  0E09               	movlw	9
   143   0012C0                     clear_0:
   144   0012C0  6AEE               	clrf	postinc0,c
   145   0012C2  06E8               	decf	wreg,f,c
   146   0012C4  E1FD               	bnz	clear_0
   147   0012C6                     end_of_initialization:
   148                           	callstack 0
   149   0012C6                     __end_of__initialization:
   150                           	callstack 0
   151   0012C6  901C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   152   0012C8  921C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   153   0012CA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   154   0012CC  6EF8               	movwf	tblptru,c
   155   0012CE  0100               	movlb	0
   156   0012D0  EF6A  F009         	goto	_main	;jump to C main() function
   157                           
   158                           	psect	bssCOMRAM
   159   000013                     __pbssCOMRAM:
   160                           	callstack 0
   161   000013                     _Duty_Cycle2:
   162                           	callstack 0
   163   000013                     	ds	4
   164   000017                     _Duty_Cycle1:
   165                           	callstack 0
   166   000017                     	ds	4
   167   00001B                     _Rx_Buffer:
   168                           	callstack 0
   169   00001B                     	ds	1
   170                           
   171                           	psect	cstackCOMRAM
   172   000001                     __pcstackCOMRAM:
   173                           	callstack 0
   174   000001                     ??i2_LCD_Instruction:
   175                           
   176                           ; 1 bytes @ 0x0
   177   000001                     	ds	1
   178   000002                     i2LCD_Instruction@Instruction:
   179                           	callstack 0
   180                           
   181                           ; 1 bytes @ 0x1
   182   000002                     	ds	1
   183   000003                     i2Send_Instruction_Data@Data:
   184                           	callstack 0
   185                           
   186                           ; 1 bytes @ 0x2
   187   000003                     	ds	1
   188   000004                     i2Send_Instruction_Data@Instruction:
   189                           	callstack 0
   190                           
   191                           ; 1 bytes @ 0x3
   192   000004                     	ds	1
   193   000005                     Send_String@String:
   194                           	callstack 0
   195                           
   196                           ; 1 bytes @ 0x4
   197   000005                     	ds	1
   198   000006                     ??_Send_String:
   199                           
   200                           ; 1 bytes @ 0x5
   201   000006                     	ds	1
   202   000007                     Send_String@i:
   203                           	callstack 0
   204                           
   205                           ; 1 bytes @ 0x6
   206   000007                     	ds	1
   207   000008                     ??_Interrupt_Rx:
   208                           
   209                           ; 1 bytes @ 0x7
   210   000008                     	ds	4
   211   00000C                     ??_Interrupt:
   212                           
   213                           ; 1 bytes @ 0xB
   214   00000C                     	ds	1
   215   00000D                     ??_LCD_Instruction:
   216                           
   217                           ; 1 bytes @ 0xC
   218   00000D                     	ds	1
   219   00000E                     LCD_Instruction@Instruction:
   220                           	callstack 0
   221                           
   222                           ; 1 bytes @ 0xD
   223   00000E                     	ds	1
   224   00000F                     Send_Instruction_Data@Data:
   225                           	callstack 0
   226                           
   227                           ; 1 bytes @ 0xE
   228   00000F                     	ds	1
   229   000010                     Send_Instruction_Data@Instruction:
   230                           	callstack 0
   231                           
   232                           ; 1 bytes @ 0xF
   233   000010                     	ds	1
   234   000011                     ??_Init_LCD:
   235                           
   236                           ; 1 bytes @ 0x10
   237   000011                     	ds	2
   238   000013                     
   239                           ; 1 bytes @ 0x12
   240 ;;
   241 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   242 ;;
   243 ;; *************** function _main *****************
   244 ;; Defined at:
   245 ;;		line 38 in file "main.c"
   246 ;; Parameters:    Size  Location     Type
   247 ;;		None
   248 ;; Auto vars:     Size  Location     Type
   249 ;;		None
   250 ;; Return value:  Size  Location     Type
   251 ;;                  1    wreg      void 
   252 ;; Registers used:
   253 ;;		wreg, status,2, status,0, cstack
   254 ;; Tracked objects:
   255 ;;		On entry : 0/0
   256 ;;		On exit  : 0/0
   257 ;;		Unchanged: 0/0
   258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   263 ;;Total ram usage:        0 bytes
   264 ;; Hardware stack levels required when called: 10
   265 ;; This function calls:
   266 ;;		_Configurations
   267 ;;		_Init_LCD
   268 ;; This function is called by:
   269 ;;		Startup code after reset
   270 ;; This function uses a non-reentrant model
   271 ;;
   272                           
   273                           	psect	text0
   274   0012D4                     __ptext0:
   275                           	callstack 0
   276   0012D4                     _main:
   277                           	callstack 21
   278   0012D4                     
   279                           ;main.c: 41:     Configurations();
   280   0012D4  EC63  F008         	call	_Configurations	;wreg free
   281   0012D8                     
   282                           ;main.c: 42:     Init_LCD();
   283   0012D8  EC12  F008         	call	_Init_LCD	;wreg free
   284   0012DC                     l75:
   285   0012DC  EF6E  F009         	goto	l75
   286   0012E0  EF13  F000         	goto	start
   287   0012E4                     __end_of_main:
   288                           	callstack 0
   289                           
   290 ;; *************** function _Init_LCD *****************
   291 ;; Defined at:
   292 ;;		line 5 in file "LCD_Library.c"
   293 ;; Parameters:    Size  Location     Type
   294 ;;		None
   295 ;; Auto vars:     Size  Location     Type
   296 ;;		None
   297 ;; Return value:  Size  Location     Type
   298 ;;                  1    wreg      void 
   299 ;; Registers used:
   300 ;;		wreg, status,2, status,0, cstack
   301 ;; Tracked objects:
   302 ;;		On entry : 0/0
   303 ;;		On exit  : 0/0
   304 ;;		Unchanged: 0/0
   305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   308 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   309 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   310 ;;Total ram usage:        2 bytes
   311 ;; Hardware stack levels used: 1
   312 ;; Hardware stack levels required when called: 9
   313 ;; This function calls:
   314 ;;		_Send_Instruction_Data
   315 ;; This function is called by:
   316 ;;		_main
   317 ;; This function uses a non-reentrant model
   318 ;;
   319                           
   320                           	psect	text1
   321   001024                     __ptext1:
   322                           	callstack 0
   323   001024                     _Init_LCD:
   324                           	callstack 21
   325   001024                     
   326                           ;LCD_Library.c: 7:     _delay((unsigned long)((100)*(16000000/4000.0)));
   327   001024  0E03               	movlw	3
   328   001026  6E12               	movwf	(??_Init_LCD+1)^0,c
   329   001028  0E08               	movlw	8
   330   00102A  6E11               	movwf	??_Init_LCD^0,c
   331   00102C  0E77               	movlw	119
   332   00102E                     u97:
   333   00102E  2EE8               	decfsz	wreg,f,c
   334   001030  D7FE               	bra	u97
   335   001032  2E11               	decfsz	??_Init_LCD^0,f,c
   336   001034  D7FC               	bra	u97
   337   001036  2E12               	decfsz	(??_Init_LCD+1)^0,f,c
   338   001038  D7FA               	bra	u97
   339   00103A  0000               	nop	
   340   00103C                     
   341                           ;LCD_Library.c: 8:     Send_Instruction_Data(0, 0x30);
   342   00103C  0E30               	movlw	48
   343   00103E  6E0F               	movwf	Send_Instruction_Data@Data^0,c
   344   001040  0E00               	movlw	0
   345   001042  EC41  F009         	call	_Send_Instruction_Data
   346   001046                     
   347                           ;LCD_Library.c: 9:     _delay((unsigned long)((5)*(16000000/4000.0)));
   348   001046  0E1A               	movlw	26
   349   001048  6E11               	movwf	??_Init_LCD^0,c
   350   00104A  0EF8               	movlw	248
   351   00104C                     u107:
   352   00104C  2EE8               	decfsz	wreg,f,c
   353   00104E  D7FE               	bra	u107
   354   001050  2E11               	decfsz	??_Init_LCD^0,f,c
   355   001052  D7FC               	bra	u107
   356   001054  D000               	nop2	
   357                           
   358                           ;LCD_Library.c: 10:     Send_Instruction_Data(0, 0x30);
   359   001056  0E30               	movlw	48
   360   001058  6E0F               	movwf	Send_Instruction_Data@Data^0,c
   361   00105A  0E00               	movlw	0
   362   00105C  EC41  F009         	call	_Send_Instruction_Data
   363   001060                     
   364                           ;LCD_Library.c: 11:     _delay((unsigned long)((5)*(16000000/4000.0)));
   365   001060  0E1A               	movlw	26
   366   001062  6E11               	movwf	??_Init_LCD^0,c
   367   001064  0EF8               	movlw	248
   368   001066                     u117:
   369   001066  2EE8               	decfsz	wreg,f,c
   370   001068  D7FE               	bra	u117
   371   00106A  2E11               	decfsz	??_Init_LCD^0,f,c
   372   00106C  D7FC               	bra	u117
   373   00106E  D000               	nop2	
   374   001070                     
   375                           ;LCD_Library.c: 12:     Send_Instruction_Data(0, 0x30);
   376   001070  0E30               	movlw	48
   377   001072  6E0F               	movwf	Send_Instruction_Data@Data^0,c
   378   001074  0E00               	movlw	0
   379   001076  EC41  F009         	call	_Send_Instruction_Data
   380   00107A                     
   381                           ;LCD_Library.c: 13:     Send_Instruction_Data(0, 0x02);
   382   00107A  0E02               	movlw	2
   383   00107C  6E0F               	movwf	Send_Instruction_Data@Data^0,c
   384   00107E  0E00               	movlw	0
   385   001080  EC41  F009         	call	_Send_Instruction_Data
   386   001084                     
   387                           ;LCD_Library.c: 14:     Send_Instruction_Data(0, 0x06);
   388   001084  0E06               	movlw	6
   389   001086  6E0F               	movwf	Send_Instruction_Data@Data^0,c
   390   001088  0E00               	movlw	0
   391   00108A  EC41  F009         	call	_Send_Instruction_Data
   392   00108E                     
   393                           ;LCD_Library.c: 15:     Send_Instruction_Data(0, 0x0F);
   394   00108E  0E0F               	movlw	15
   395   001090  6E0F               	movwf	Send_Instruction_Data@Data^0,c
   396   001092  0E00               	movlw	0
   397   001094  EC41  F009         	call	_Send_Instruction_Data
   398   001098                     
   399                           ;LCD_Library.c: 16:     Send_Instruction_Data(0, 0x28);
   400   001098  0E28               	movlw	40
   401   00109A  6E0F               	movwf	Send_Instruction_Data@Data^0,c
   402   00109C  0E00               	movlw	0
   403   00109E  EC41  F009         	call	_Send_Instruction_Data
   404   0010A2                     
   405                           ;LCD_Library.c: 17:     Send_Instruction_Data(0, 0x01);
   406   0010A2  0E01               	movlw	1
   407   0010A4  6E0F               	movwf	Send_Instruction_Data@Data^0,c
   408   0010A6  0E00               	movlw	0
   409   0010A8  EC41  F009         	call	_Send_Instruction_Data
   410   0010AC                     
   411                           ;LCD_Library.c: 18:     _delay((unsigned long)((100)*(16000000/4000.0)));
   412   0010AC  0E03               	movlw	3
   413   0010AE  6E12               	movwf	(??_Init_LCD+1)^0,c
   414   0010B0  0E08               	movlw	8
   415   0010B2  6E11               	movwf	??_Init_LCD^0,c
   416   0010B4  0E77               	movlw	119
   417   0010B6                     u127:
   418   0010B6  2EE8               	decfsz	wreg,f,c
   419   0010B8  D7FE               	bra	u127
   420   0010BA  2E11               	decfsz	??_Init_LCD^0,f,c
   421   0010BC  D7FC               	bra	u127
   422   0010BE  2E12               	decfsz	(??_Init_LCD+1)^0,f,c
   423   0010C0  D7FA               	bra	u127
   424   0010C2  0000               	nop	
   425   0010C4  0012               	return		;funcret
   426   0010C6                     __end_of_Init_LCD:
   427                           	callstack 0
   428                           
   429 ;; *************** function _Send_Instruction_Data *****************
   430 ;; Defined at:
   431 ;;		line 24 in file "LCD_Library.c"
   432 ;; Parameters:    Size  Location     Type
   433 ;;  Instruction     1    wreg     unsigned char 
   434 ;;  Data            1   14[COMRAM] unsigned char 
   435 ;; Auto vars:     Size  Location     Type
   436 ;;  Instruction     1   15[COMRAM] unsigned char 
   437 ;; Return value:  Size  Location     Type
   438 ;;                  1    wreg      void 
   439 ;; Registers used:
   440 ;;		wreg, status,2, status,0, cstack
   441 ;; Tracked objects:
   442 ;;		On entry : 0/0
   443 ;;		On exit  : 0/0
   444 ;;		Unchanged: 0/0
   445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   446 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   447 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   449 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   450 ;;Total ram usage:        2 bytes
   451 ;; Hardware stack levels used: 1
   452 ;; Hardware stack levels required when called: 8
   453 ;; This function calls:
   454 ;;		_LCD_Instruction
   455 ;; This function is called by:
   456 ;;		_Init_LCD
   457 ;; This function uses a non-reentrant model
   458 ;;
   459                           
   460                           	psect	text2
   461   001282                     __ptext2:
   462                           	callstack 0
   463   001282                     _Send_Instruction_Data:
   464                           	callstack 21
   465                           
   466                           ;incstack = 0
   467                           ;Send_Instruction_Data@Instruction stored from wreg
   468   001282  6E10               	movwf	Send_Instruction_Data@Instruction^0,c
   469   001284                     
   470                           ;LCD_Library.c: 26:     LATCbits.LATC4 = Instruction;
   471   001284  B010               	btfsc	Send_Instruction_Data@Instruction^0,0,c
   472   001286  D002               	bra	u75
   473   001288  988B               	bcf	139,4,c	;volatile
   474   00128A  D001               	bra	u76
   475   00128C                     u75:
   476   00128C  888B               	bsf	139,4,c	;volatile
   477   00128E                     u76:
   478   00128E                     
   479                           ;LCD_Library.c: 27:     LCD_Instruction(Data >> 4);
   480   00128E  380F               	swapf	Send_Instruction_Data@Data^0,w,c
   481   001290  0B0F               	andlw	15
   482   001292  ECBB  F008         	call	_LCD_Instruction
   483   001296                     
   484                           ;LCD_Library.c: 28:     LCD_Instruction(Data);
   485   001296  500F               	movf	Send_Instruction_Data@Data^0,w,c
   486   001298  ECBB  F008         	call	_LCD_Instruction
   487   00129C  0012               	return		;funcret
   488   00129E                     __end_of_Send_Instruction_Data:
   489                           	callstack 0
   490                           
   491 ;; *************** function _LCD_Instruction *****************
   492 ;; Defined at:
   493 ;;		line 33 in file "LCD_Library.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;  Instruction     1    wreg     unsigned char 
   496 ;; Auto vars:     Size  Location     Type
   497 ;;  Instruction     1   13[COMRAM] unsigned char 
   498 ;; Return value:  Size  Location     Type
   499 ;;                  1    wreg      void 
   500 ;; Registers used:
   501 ;;		wreg, status,2, cstack
   502 ;; Tracked objects:
   503 ;;		On entry : 0/0
   504 ;;		On exit  : 0/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   508 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   509 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   510 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   511 ;;Total ram usage:        2 bytes
   512 ;; Hardware stack levels used: 1
   513 ;; Hardware stack levels required when called: 7
   514 ;; This function calls:
   515 ;;		Nothing
   516 ;; This function is called by:
   517 ;;		_Send_Instruction_Data
   518 ;; This function uses a non-reentrant model
   519 ;;
   520                           
   521                           	psect	text3
   522   001176                     __ptext3:
   523                           	callstack 0
   524   001176                     _LCD_Instruction:
   525                           	callstack 21
   526                           
   527                           ;incstack = 0
   528                           ;LCD_Instruction@Instruction stored from wreg
   529   001176  6E0E               	movwf	LCD_Instruction@Instruction^0,c
   530   001178                     
   531                           ;LCD_Library.c: 35:     LATCbits.LATC5 = 1;
   532   001178  8A8B               	bsf	139,5,c	;volatile
   533   00117A                     
   534                           ;LCD_Library.c: 36:     _delay((unsigned long)((15)*(16000000/4000.0)));
   535   00117A  0E4E               	movlw	78
   536   00117C  6E0D               	movwf	??_LCD_Instruction^0,c
   537   00117E  0EEB               	movlw	235
   538   001180                     u137:
   539   001180  2EE8               	decfsz	wreg,f,c
   540   001182  D7FE               	bra	u137
   541   001184  2E0D               	decfsz	??_LCD_Instruction^0,f,c
   542   001186  D7FC               	bra	u137
   543   001188  0000               	nop	
   544   00118A                     
   545                           ;LCD_Library.c: 37:     LATD = Instruction;
   546   00118A  C00E  FF8C         	movff	LCD_Instruction@Instruction,3980	;volatile
   547   00118E                     
   548                           ;LCD_Library.c: 38:     _delay((unsigned long)((15)*(16000000/4000.0)));
   549   00118E  0E4E               	movlw	78
   550   001190  6E0D               	movwf	??_LCD_Instruction^0,c
   551   001192  0EEB               	movlw	235
   552   001194                     u147:
   553   001194  2EE8               	decfsz	wreg,f,c
   554   001196  D7FE               	bra	u147
   555   001198  2E0D               	decfsz	??_LCD_Instruction^0,f,c
   556   00119A  D7FC               	bra	u147
   557   00119C  0000               	nop	
   558   00119E                     
   559                           ;LCD_Library.c: 39:     LATCbits.LATC5 = 0;
   560   00119E  9A8B               	bcf	139,5,c	;volatile
   561   0011A0                     
   562                           ;LCD_Library.c: 40:     _delay((unsigned long)((15)*(16000000/4000.0)));
   563   0011A0  0E4E               	movlw	78
   564   0011A2  6E0D               	movwf	??_LCD_Instruction^0,c
   565   0011A4  0EEB               	movlw	235
   566   0011A6                     u157:
   567   0011A6  2EE8               	decfsz	wreg,f,c
   568   0011A8  D7FE               	bra	u157
   569   0011AA  2E0D               	decfsz	??_LCD_Instruction^0,f,c
   570   0011AC  D7FC               	bra	u157
   571   0011AE  0000               	nop	
   572   0011B0  0012               	return		;funcret
   573   0011B2                     __end_of_LCD_Instruction:
   574                           	callstack 0
   575                           
   576 ;; *************** function _Configurations *****************
   577 ;; Defined at:
   578 ;;		line 75 in file "main.c"
   579 ;; Parameters:    Size  Location     Type
   580 ;;		None
   581 ;; Auto vars:     Size  Location     Type
   582 ;;		None
   583 ;; Return value:  Size  Location     Type
   584 ;;                  1    wreg      void 
   585 ;; Registers used:
   586 ;;		wreg, status,2
   587 ;; Tracked objects:
   588 ;;		On entry : 0/0
   589 ;;		On exit  : 0/0
   590 ;;		Unchanged: 0/0
   591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   596 ;;Total ram usage:        0 bytes
   597 ;; Hardware stack levels used: 1
   598 ;; Hardware stack levels required when called: 7
   599 ;; This function calls:
   600 ;;		Nothing
   601 ;; This function is called by:
   602 ;;		_main
   603 ;; This function uses a non-reentrant model
   604 ;;
   605                           
   606                           	psect	text4
   607   0010C6                     __ptext4:
   608                           	callstack 0
   609   0010C6                     _Configurations:
   610                           	callstack 23
   611   0010C6                     
   612                           ;main.c: 77:     OSCCON = 0x72;
   613   0010C6  0E72               	movlw	114
   614   0010C8  6ED3               	movwf	211,c	;volatile
   615                           
   616                           ;main.c: 79:     ANSELC = 0;
   617   0010CA  0E00               	movlw	0
   618   0010CC  010F               	movlb	15	; () banked
   619   0010CE  6F3A               	movwf	58,b	;volatile
   620                           
   621                           ;main.c: 80:     ANSELD = 0;
   622   0010D0  0E00               	movlw	0
   623   0010D2  6F3B               	movwf	59,b	;volatile
   624                           
   625                           ;main.c: 81:     ANSELE = 0;
   626   0010D4  0E00               	movlw	0
   627   0010D6  6F3C               	movwf	60,b	;volatile
   628   0010D8                     
   629                           ; BSR set to: 15
   630                           ;main.c: 84:     TRISCbits.RC4 = 0;
   631   0010D8  9894               	bcf	148,4,c	;volatile
   632   0010DA                     
   633                           ; BSR set to: 15
   634                           ;main.c: 85:     TRISCbits.RC5 = 0;
   635   0010DA  9A94               	bcf	148,5,c	;volatile
   636                           
   637                           ;main.c: 86:     TRISD = 0;
   638   0010DC  0E00               	movlw	0
   639   0010DE  6E95               	movwf	149,c	;volatile
   640                           
   641                           ;main.c: 87:     TRISE = 0;
   642   0010E0  0E00               	movlw	0
   643   0010E2  6E96               	movwf	150,c	;volatile
   644   0010E4                     
   645                           ; BSR set to: 15
   646                           ;main.c: 90:     LATCbits.LC4 = 0;
   647   0010E4  988B               	bcf	139,4,c	;volatile
   648   0010E6                     
   649                           ; BSR set to: 15
   650                           ;main.c: 91:     LATCbits.LC5 = 0;
   651   0010E6  9A8B               	bcf	139,5,c	;volatile
   652                           
   653                           ;main.c: 92:     LATD = 0;
   654   0010E8  0E00               	movlw	0
   655   0010EA  6E8C               	movwf	140,c	;volatile
   656                           
   657                           ;main.c: 93:     LATE = 0;
   658   0010EC  0E00               	movlw	0
   659   0010EE  6E8D               	movwf	141,c	;volatile
   660   0010F0                     
   661                           ; BSR set to: 15
   662                           ;main.c: 96:     INTCONbits.GIE = 1;
   663   0010F0  8EF2               	bsf	242,7,c	;volatile
   664   0010F2                     
   665                           ; BSR set to: 15
   666                           ;main.c: 97:     INTCONbits.PEIE = 1;
   667   0010F2  8CF2               	bsf	242,6,c	;volatile
   668   0010F4                     
   669                           ; BSR set to: 15
   670                           ;main.c: 98:     RCONbits.IPEN = 1;
   671   0010F4  8ED0               	bsf	208,7,c	;volatile
   672   0010F6                     
   673                           ; BSR set to: 15
   674                           ;main.c: 100:     PIE1bits.RC1IE = 1;
   675   0010F6  8A9D               	bsf	157,5,c	;volatile
   676   0010F8                     
   677                           ; BSR set to: 15
   678                           ;main.c: 101:     PIR1bits.RC1IF = 0;
   679   0010F8  9A9E               	bcf	158,5,c	;volatile
   680                           
   681                           ;main.c: 104:     SPBRG = 103;
   682   0010FA  0E67               	movlw	103
   683   0010FC  6EAF               	movwf	175,c	;volatile
   684   0010FE                     
   685                           ; BSR set to: 15
   686                           ;main.c: 105:     TRISCbits.RC6 = 1;
   687   0010FE  8C94               	bsf	148,6,c	;volatile
   688   001100                     
   689                           ; BSR set to: 15
   690                           ;main.c: 106:     TRISCbits.RC7 = 1;
   691   001100  8E94               	bsf	148,7,c	;volatile
   692   001102                     
   693                           ; BSR set to: 15
   694                           ;main.c: 109:     TXSTA1bits.TX91 = 0;
   695   001102  9CAC               	bcf	172,6,c	;volatile
   696   001104                     
   697                           ; BSR set to: 15
   698                           ;main.c: 110:     TXSTA1bits.TXEN1 = 1;
   699   001104  8AAC               	bsf	172,5,c	;volatile
   700   001106                     
   701                           ; BSR set to: 15
   702                           ;main.c: 111:     TXSTA1bits.SYNC1 = 0;
   703   001106  98AC               	bcf	172,4,c	;volatile
   704   001108                     
   705                           ; BSR set to: 15
   706                           ;main.c: 112:     TXSTA1bits.BRGH1 = 1;
   707   001108  84AC               	bsf	172,2,c	;volatile
   708   00110A                     
   709                           ; BSR set to: 15
   710                           ;main.c: 115:     RCSTAbits.SPEN1 = 1;
   711   00110A  8EAB               	bsf	171,7,c	;volatile
   712   00110C                     
   713                           ; BSR set to: 15
   714                           ;main.c: 116:     RCSTAbits.RX91 = 0;
   715   00110C  9CAB               	bcf	171,6,c	;volatile
   716   00110E                     
   717                           ; BSR set to: 15
   718                           ;main.c: 117:     RCSTAbits.CREN1 = 1;
   719   00110E  88AB               	bsf	171,4,c	;volatile
   720   001110                     
   721                           ; BSR set to: 15
   722                           ;main.c: 120:     BAUDCON1bits.BRG16 = 0;
   723   001110  96B8               	bcf	184,3,c	;volatile
   724                           
   725                           ;main.c: 132:     PR2 = 0xF9;
   726   001112  0EF9               	movlw	249
   727   001114  6EBB               	movwf	187,c	;volatile
   728                           
   729                           ;main.c: 133:     T2CON = 0x00;
   730   001116  0E00               	movlw	0
   731   001118  6EBA               	movwf	186,c	;volatile
   732                           
   733                           ;main.c: 134:     CCP3CON = 0x0C;
   734   00111A  0E0C               	movlw	12
   735   00111C  6F5D               	movwf	93,b	;volatile
   736                           
   737                           ;main.c: 135:     CCPR3L = 0xFA;
   738   00111E  0EFA               	movlw	250
   739   001120  6F5E               	movwf	94,b	;volatile
   740                           
   741                           ;main.c: 136:     CCP5CON = 0x0C;
   742   001122  0E0C               	movlw	12
   743   001124  6F54               	movwf	84,b	;volatile
   744                           
   745                           ;main.c: 137:     CCPR5L = 0xFA;
   746   001126  0EFA               	movlw	250
   747   001128  6F55               	movwf	85,b	;volatile
   748   00112A                     
   749                           ; BSR set to: 15
   750                           ;main.c: 138:     T2CONbits.TMR2ON = 1;
   751   00112A  84BA               	bsf	186,2,c	;volatile
   752   00112C                     
   753                           ; BSR set to: 15
   754   00112C  0012               	return		;funcret
   755   00112E                     __end_of_Configurations:
   756                           	callstack 0
   757                           
   758 ;; *************** function _Interrupt *****************
   759 ;; Defined at:
   760 ;;		line 67 in file "main.c"
   761 ;; Parameters:    Size  Location     Type
   762 ;;		None
   763 ;; Auto vars:     Size  Location     Type
   764 ;;		None
   765 ;; Return value:  Size  Location     Type
   766 ;;                  1    wreg      void 
   767 ;; Registers used:
   768 ;;		None
   769 ;; Tracked objects:
   770 ;;		On entry : 0/0
   771 ;;		On exit  : 0/0
   772 ;;		Unchanged: 0/0
   773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   776 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   777 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   778 ;;Total ram usage:        1 bytes
   779 ;; Hardware stack levels used: 1
   780 ;; Hardware stack levels required when called: 6
   781 ;; This function calls:
   782 ;;		Nothing
   783 ;; This function is called by:
   784 ;;		Interrupt level 1
   785 ;; This function uses a non-reentrant model
   786 ;;
   787                           
   788                           	psect	intcodelo
   789   000018                     __pintcodelo:
   790                           	callstack 0
   791   000018                     _Interrupt:
   792                           	callstack 21
   793                           
   794                           ; BSR set to: 15
   795                           ;incstack = 0
   796   000018  801C               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
   797   00001A  CFE0 F00C          	movff	bsr,??_Interrupt
   798   00001E  C00C  FFE0         	movff	??_Interrupt,bsr
   799   000022  901C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   800   000024  0010               	retfie	
   801   000026                     __end_of_Interrupt:
   802                           	callstack 0
   803                           
   804 ;; *************** function _Interrupt_Rx *****************
   805 ;; Defined at:
   806 ;;		line 55 in file "main.c"
   807 ;; Parameters:    Size  Location     Type
   808 ;;		None
   809 ;; Auto vars:     Size  Location     Type
   810 ;;		None
   811 ;; Return value:  Size  Location     Type
   812 ;;                  1    wreg      void 
   813 ;; Registers used:
   814 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   822 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   823 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   824 ;;Total ram usage:        4 bytes
   825 ;; Hardware stack levels used: 1
   826 ;; Hardware stack levels required when called: 5
   827 ;; This function calls:
   828 ;;		_Receive_Interrupt
   829 ;; This function is called by:
   830 ;;		Interrupt level 2
   831 ;; This function uses a non-reentrant model
   832 ;;
   833                           
   834                           	psect	intcode
   835   000008                     __pintcode:
   836                           	callstack 0
   837   000008                     _Interrupt_Rx:
   838                           	callstack 21
   839                           
   840                           ;incstack = 0
   841   000008  821C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   842   00000A  EF13  F009         	goto	int_func
   843                           
   844                           	psect	intcode_body
   845   001226                     __pintcode_body:
   846                           	callstack 21
   847   001226                     int_func:
   848                           	callstack 21
   849   001226  CFF6 F008          	movff	tblptrl,??_Interrupt_Rx
   850   00122A  CFF7 F009          	movff	tblptrh,??_Interrupt_Rx+1
   851   00122E  CFF8 F00A          	movff	tblptru,??_Interrupt_Rx+2
   852   001232  CFF5 F00B          	movff	tablat,??_Interrupt_Rx+3
   853   001236                     
   854                           ;main.c: 57:     if (PIR1bits.RC1IF) {
   855   001236  AA9E               	btfss	158,5,c	;volatile
   856   001238  EF20  F009         	goto	i2u8_41
   857   00123C  EF22  F009         	goto	i2u8_40
   858   001240                     i2u8_41:
   859   001240  EF24  F009         	goto	i2l84
   860   001244                     i2u8_40:
   861   001244                     
   862                           ;main.c: 59:         Receive_Interrupt();
   863   001244  ECF7  F008         	call	_Receive_Interrupt	;wreg free
   864   001248                     i2l84:
   865   001248  C00B  FFF5         	movff	??_Interrupt_Rx+3,tablat
   866   00124C  C00A  FFF8         	movff	??_Interrupt_Rx+2,tblptru
   867   001250  C009  FFF7         	movff	??_Interrupt_Rx+1,tblptrh
   868   001254  C008  FFF6         	movff	??_Interrupt_Rx,tblptrl
   869   001258  921C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   870   00125A  0011               	retfie		f
   871   00125C                     __end_of_Interrupt_Rx:
   872                           	callstack 0
   873                           
   874 ;; *************** function _Receive_Interrupt *****************
   875 ;; Defined at:
   876 ;;		line 142 in file "main.c"
   877 ;; Parameters:    Size  Location     Type
   878 ;;		None
   879 ;; Auto vars:     Size  Location     Type
   880 ;;		None
   881 ;; Return value:  Size  Location     Type
   882 ;;                  1    wreg      void 
   883 ;; Registers used:
   884 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   885 ;; Tracked objects:
   886 ;;		On entry : 0/0
   887 ;;		On exit  : 0/0
   888 ;;		Unchanged: 0/0
   889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   894 ;;Total ram usage:        0 bytes
   895 ;; Hardware stack levels used: 1
   896 ;; Hardware stack levels required when called: 4
   897 ;; This function calls:
   898 ;;		_Init_Message_Platform
   899 ;; This function is called by:
   900 ;;		_Interrupt_Rx
   901 ;; This function uses a non-reentrant model
   902 ;;
   903                           
   904                           	psect	text7
   905   0011EE                     __ptext7:
   906                           	callstack 0
   907   0011EE                     _Receive_Interrupt:
   908                           	callstack 21
   909   0011EE                     
   910                           ;main.c: 144:     Rx_Buffer = RCREG1;
   911   0011EE  CFAE F01B          	movff	4014,_Rx_Buffer	;volatile
   912                           
   913                           ;main.c: 146:     switch (Rx_Buffer) {
   914   0011F2  EF03  F009         	goto	i2l1011
   915   0011F6                     i2l1005:
   916                           
   917                           ;main.c: 158:             Init_Message_Platform();
   918   0011F6  EC2E  F009         	call	_Init_Message_Platform	;wreg free
   919                           
   920                           ;main.c: 159:             break;
   921   0011FA  EF12  F009         	goto	i2l101
   922   0011FE                     i2l1007:
   923                           
   924                           ;main.c: 162:             LATD = 0x00;
   925   0011FE  0E00               	movlw	0
   926   001200  6E8C               	movwf	140,c	;volatile
   927                           
   928                           ;main.c: 163:             break;
   929   001202  EF12  F009         	goto	i2l101
   930   001206                     i2l1011:
   931   001206  501B               	movf	_Rx_Buffer^0,w,c
   932                           
   933                           ; Switch size 1, requested type "simple"
   934                           ; Number of cases is 3, Range of values is 65 to 81
   935                           ; switch strategies available:
   936                           ; Name         Instructions Cycles
   937                           ; simple_byte           10     6 (average)
   938                           ;	Chosen strategy is simple_byte
   939   001208  0A41               	xorlw	65	; case 65
   940   00120A  B4D8               	btfsc	status,2,c
   941   00120C  EF12  F009         	goto	i2l101
   942   001210  0A0C               	xorlw	12	; case 77
   943   001212  B4D8               	btfsc	status,2,c
   944   001214  EF12  F009         	goto	i2l101
   945   001218  0A1C               	xorlw	28	; case 81
   946   00121A  B4D8               	btfsc	status,2,c
   947   00121C  EFFB  F008         	goto	i2l1005
   948   001220  EFFF  F008         	goto	i2l1007
   949   001224                     i2l101:
   950   001224  0012               	return		;funcret
   951   001226                     __end_of_Receive_Interrupt:
   952                           	callstack 0
   953                           
   954 ;; *************** function _Init_Message_Platform *****************
   955 ;; Defined at:
   956 ;;		line 187 in file "main.c"
   957 ;; Parameters:    Size  Location     Type
   958 ;;		None
   959 ;; Auto vars:     Size  Location     Type
   960 ;;		None
   961 ;; Return value:  Size  Location     Type
   962 ;;                  1    wreg      void 
   963 ;; Registers used:
   964 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   965 ;; Tracked objects:
   966 ;;		On entry : 0/0
   967 ;;		On exit  : 0/0
   968 ;;		Unchanged: 0/0
   969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   974 ;;Total ram usage:        0 bytes
   975 ;; Hardware stack levels used: 1
   976 ;; Hardware stack levels required when called: 3
   977 ;; This function calls:
   978 ;;		_Send_String
   979 ;;		i2_Send_Instruction_Data
   980 ;; This function is called by:
   981 ;;		_Receive_Interrupt
   982 ;; This function uses a non-reentrant model
   983 ;;
   984                           
   985                           	psect	text8
   986   00125C                     __ptext8:
   987                           	callstack 0
   988   00125C                     _Init_Message_Platform:
   989                           	callstack 21
   990   00125C                     
   991                           ;main.c: 189:     Send_Instruction_Data(0, 0X80);
   992   00125C  0E80               	movlw	128
   993   00125E  6E03               	movwf	i2Send_Instruction_Data@Data^0,c
   994   001260  0E00               	movlw	0
   995   001262  EC4F  F009         	call	i2_Send_Instruction_Data
   996   001266                     
   997                           ;main.c: 190:     Send_String("Research Project");
   998   001266  0E12               	movlw	low STR_1
   999   001268  6E05               	movwf	Send_String@String^0,c
  1000   00126A  EC97  F008         	call	_Send_String	;wreg free
  1001   00126E                     
  1002                           ;main.c: 191:     Send_Instruction_Data(0, 0xC0);
  1003   00126E  0EC0               	movlw	192
  1004   001270  6E03               	movwf	i2Send_Instruction_Data@Data^0,c
  1005   001272  0E00               	movlw	0
  1006   001274  EC4F  F009         	call	i2_Send_Instruction_Data
  1007                           
  1008                           ;main.c: 192:     Send_String("Robotic Platform");
  1009   001278  0E01               	movlw	low STR_2
  1010   00127A  6E05               	movwf	Send_String@String^0,c
  1011   00127C  EC97  F008         	call	_Send_String	;wreg free
  1012   001280  0012               	return		;funcret
  1013   001282                     __end_of_Init_Message_Platform:
  1014                           	callstack 0
  1015                           
  1016 ;; *************** function _Send_String *****************
  1017 ;; Defined at:
  1018 ;;		line 46 in file "LCD_Library.c"
  1019 ;; Parameters:    Size  Location     Type
  1020 ;;  String          1    4[COMRAM] PTR unsigned char 
  1021 ;;		 -> STR_2(17), STR_1(17), 
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;  i               1    6[COMRAM] unsigned char 
  1024 ;; Return value:  Size  Location     Type
  1025 ;;                  1    wreg      void 
  1026 ;; Registers used:
  1027 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1028 ;; Tracked objects:
  1029 ;;		On entry : 0/0
  1030 ;;		On exit  : 0/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1033 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1034 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1035 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1036 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1037 ;;Total ram usage:        3 bytes
  1038 ;; Hardware stack levels used: 1
  1039 ;; Hardware stack levels required when called: 2
  1040 ;; This function calls:
  1041 ;;		i2_Send_Instruction_Data
  1042 ;; This function is called by:
  1043 ;;		_Init_Message_Platform
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           	psect	text9
  1048   00112E                     __ptext9:
  1049                           	callstack 0
  1050   00112E                     _Send_String:
  1051                           	callstack 21
  1052   00112E                     
  1053                           ;LCD_Library.c: 48:     for (uint8_t i = 0; String[i] != '\0'; i++) {
  1054   00112E  0E00               	movlw	0
  1055   001130  6E07               	movwf	Send_String@i^0,c
  1056   001132  EFA9  F008         	goto	i2l967
  1057   001136                     i2l963:
  1058                           
  1059                           ;LCD_Library.c: 50:         Send_Instruction_Data(1, String[i]);
  1060   001136  5005               	movf	Send_String@String^0,w,c
  1061   001138  2407               	addwf	Send_String@i^0,w,c
  1062   00113A  6E06               	movwf	??_Send_String^0,c
  1063   00113C  C006  FFF6         	movff	??_Send_String,tblptrl
  1064   001140                     	if	1	;There is more than 1 active tblptr byte
  1065   001140  0E10               	movlw	high __smallconst
  1066   001142  6EF7               	movwf	tblptrh,c
  1067   001144                     	endif
  1068   001144                     	if	0	;tblptru may be non-zero
  1069   001144                     	endif
  1070   001144                     	if	0	;tblptru may be non-zero
  1071   001144                     	endif
  1072   001144  0008               	tblrd		*
  1073   001146  CFF5 F003          	movff	tablat,i2Send_Instruction_Data@Data
  1074   00114A  0E01               	movlw	1
  1075   00114C  EC4F  F009         	call	i2_Send_Instruction_Data
  1076   001150                     
  1077                           ;LCD_Library.c: 52:     }
  1078   001150  2A07               	incf	Send_String@i^0,f,c
  1079   001152                     i2l967:
  1080   001152  5005               	movf	Send_String@String^0,w,c
  1081   001154  2407               	addwf	Send_String@i^0,w,c
  1082   001156  6E06               	movwf	??_Send_String^0,c
  1083   001158  C006  FFF6         	movff	??_Send_String,tblptrl
  1084   00115C                     	if	1	;There is more than 1 active tblptr byte
  1085   00115C  0E10               	movlw	high __smallconst
  1086   00115E  6EF7               	movwf	tblptrh,c
  1087   001160                     	endif
  1088   001160                     	if	0	;tblptru may be non-zero
  1089   001160                     	endif
  1090   001160                     	if	0	;tblptru may be non-zero
  1091   001160                     	endif
  1092   001160  0008               	tblrd		*
  1093   001162  50F5               	movf	tablat,w,c
  1094   001164  0900               	iorlw	0
  1095   001166  A4D8               	btfss	status,2,c
  1096   001168  EFB8  F008         	goto	i2u6_41
  1097   00116C  EFBA  F008         	goto	i2u6_40
  1098   001170                     i2u6_41:
  1099   001170  EF9B  F008         	goto	i2l963
  1100   001174                     i2u6_40:
  1101   001174  0012               	return		;funcret
  1102   001176                     __end_of_Send_String:
  1103                           	callstack 0
  1104                           
  1105 ;; *************** function i2_Send_Instruction_Data *****************
  1106 ;; Defined at:
  1107 ;;		line 24 in file "LCD_Library.c"
  1108 ;; Parameters:    Size  Location     Type
  1109 ;;  Instruction     1    wreg     unsigned char 
  1110 ;;  Data            1    2[COMRAM] unsigned char 
  1111 ;; Auto vars:     Size  Location     Type
  1112 ;;  Instruction     1    3[COMRAM] unsigned char 
  1113 ;; Return value:  Size  Location     Type
  1114 ;;                  1    wreg      void 
  1115 ;; Registers used:
  1116 ;;		wreg, status,2, status,0, cstack
  1117 ;; Tracked objects:
  1118 ;;		On entry : 0/0
  1119 ;;		On exit  : 0/0
  1120 ;;		Unchanged: 0/0
  1121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1122 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1123 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1125 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1126 ;;Total ram usage:        2 bytes
  1127 ;; Hardware stack levels used: 1
  1128 ;; Hardware stack levels required when called: 1
  1129 ;; This function calls:
  1130 ;;		i2_LCD_Instruction
  1131 ;; This function is called by:
  1132 ;;		_Init_Message_Platform
  1133 ;;		_Send_String
  1134 ;; This function uses a non-reentrant model
  1135 ;;
  1136                           
  1137                           	psect	text10
  1138   00129E                     __ptext10:
  1139                           	callstack 0
  1140   00129E                     i2_Send_Instruction_Data:
  1141                           	callstack 22
  1142                           
  1143                           ;incstack = 0
  1144                           ;i2Send_Instruction_Data@Instruction stored from wreg
  1145   00129E  6E04               	movwf	i2Send_Instruction_Data@Instruction^0,c
  1146   0012A0                     
  1147                           ;LCD_Library.c: 26:     LATCbits.LATC4 = Instruction;
  1148   0012A0  B004               	btfsc	i2Send_Instruction_Data@Instruction^0,0,c
  1149   0012A2  D002               	bra	i2u5_45
  1150   0012A4  988B               	bcf	139,4,c	;volatile
  1151   0012A6  D001               	bra	i2u5_46
  1152   0012A8                     i2u5_45:
  1153   0012A8  888B               	bsf	139,4,c	;volatile
  1154   0012AA                     i2u5_46:
  1155   0012AA                     
  1156                           ;LCD_Library.c: 27:     LCD_Instruction(Data >> 4);
  1157   0012AA  3803               	swapf	i2Send_Instruction_Data@Data^0,w,c
  1158   0012AC  0B0F               	andlw	15
  1159   0012AE  ECD9  F008         	call	i2_LCD_Instruction
  1160   0012B2                     
  1161                           ;LCD_Library.c: 28:     LCD_Instruction(Data);
  1162   0012B2  5003               	movf	i2Send_Instruction_Data@Data^0,w,c
  1163   0012B4  ECD9  F008         	call	i2_LCD_Instruction
  1164   0012B8  0012               	return		;funcret
  1165   0012BA                     __end_ofi2_Send_Instruction_Data:
  1166                           	callstack 0
  1167                           
  1168 ;; *************** function i2_LCD_Instruction *****************
  1169 ;; Defined at:
  1170 ;;		line 33 in file "LCD_Library.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;  Instruction     1    wreg     unsigned char 
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;  Instruction     1    1[COMRAM] unsigned char 
  1175 ;; Return value:  Size  Location     Type
  1176 ;;                  1    wreg      void 
  1177 ;; Registers used:
  1178 ;;		wreg, status,2, cstack
  1179 ;; Tracked objects:
  1180 ;;		On entry : 0/0
  1181 ;;		On exit  : 0/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1185 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1186 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1187 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1188 ;;Total ram usage:        2 bytes
  1189 ;; Hardware stack levels used: 1
  1190 ;; This function calls:
  1191 ;;		Nothing
  1192 ;; This function is called by:
  1193 ;;		i2_Send_Instruction_Data
  1194 ;; This function uses a non-reentrant model
  1195 ;;
  1196                           
  1197                           	psect	text11
  1198   0011B2                     __ptext11:
  1199                           	callstack 0
  1200   0011B2                     i2_LCD_Instruction:
  1201                           	callstack 22
  1202                           
  1203                           ;incstack = 0
  1204                           ;i2LCD_Instruction@Instruction stored from wreg
  1205   0011B2  6E02               	movwf	i2LCD_Instruction@Instruction^0,c
  1206   0011B4                     
  1207                           ;LCD_Library.c: 35:     LATCbits.LATC5 = 1;
  1208   0011B4  8A8B               	bsf	139,5,c	;volatile
  1209   0011B6                     
  1210                           ;LCD_Library.c: 36:     _delay((unsigned long)((15)*(16000000/4000.0)));
  1211   0011B6  0E4E               	movlw	78
  1212   0011B8  6E01               	movwf	??i2_LCD_Instruction^0,c
  1213   0011BA  0EEB               	movlw	235
  1214   0011BC                     i2u16_47:
  1215   0011BC  2EE8               	decfsz	wreg,f,c
  1216   0011BE  D7FE               	bra	i2u16_47
  1217   0011C0  2E01               	decfsz	??i2_LCD_Instruction^0,f,c
  1218   0011C2  D7FC               	bra	i2u16_47
  1219   0011C4  0000               	nop	
  1220   0011C6                     
  1221                           ;LCD_Library.c: 37:     LATD = Instruction;
  1222   0011C6  C002  FF8C         	movff	i2LCD_Instruction@Instruction,3980	;volatile
  1223   0011CA                     
  1224                           ;LCD_Library.c: 38:     _delay((unsigned long)((15)*(16000000/4000.0)));
  1225   0011CA  0E4E               	movlw	78
  1226   0011CC  6E01               	movwf	??i2_LCD_Instruction^0,c
  1227   0011CE  0EEB               	movlw	235
  1228   0011D0                     i2u17_47:
  1229   0011D0  2EE8               	decfsz	wreg,f,c
  1230   0011D2  D7FE               	bra	i2u17_47
  1231   0011D4  2E01               	decfsz	??i2_LCD_Instruction^0,f,c
  1232   0011D6  D7FC               	bra	i2u17_47
  1233   0011D8  0000               	nop	
  1234   0011DA                     
  1235                           ;LCD_Library.c: 39:     LATCbits.LATC5 = 0;
  1236   0011DA  9A8B               	bcf	139,5,c	;volatile
  1237   0011DC                     
  1238                           ;LCD_Library.c: 40:     _delay((unsigned long)((15)*(16000000/4000.0)));
  1239   0011DC  0E4E               	movlw	78
  1240   0011DE  6E01               	movwf	??i2_LCD_Instruction^0,c
  1241   0011E0  0EEB               	movlw	235
  1242   0011E2                     i2u18_47:
  1243   0011E2  2EE8               	decfsz	wreg,f,c
  1244   0011E4  D7FE               	bra	i2u18_47
  1245   0011E6  2E01               	decfsz	??i2_LCD_Instruction^0,f,c
  1246   0011E8  D7FC               	bra	i2u18_47
  1247   0011EA  0000               	nop	
  1248   0011EC  0012               	return		;funcret
  1249   0011EE                     __end_ofi2_LCD_Instruction:
  1250                           	callstack 0
  1251                           
  1252                           	psect	rparam
  1253   000000                     
  1254                           	psect	temp
  1255   00001C                     btemp:
  1256                           	callstack 0
  1257   00001C                     	ds	1
  1258   000000                     int$flags	set	btemp
  1259   000000                     wtemp8	set	btemp+1
  1260   000000                     ttemp5	set	btemp+1
  1261   000000                     ttemp6	set	btemp+4
  1262   000000                     ttemp7	set	btemp+8
  1263                           
  1264                           	psect	config
  1265                           
  1266                           ; Padding undefined space
  1267   300000                     	org	3145728
  1268   300000  FF                 	db	255
  1269                           
  1270                           ;Config register CONFIG1H @ 0x300001
  1271                           ;	Oscillator Selection bits
  1272                           ;	FOSC = INTIO67, Internal oscillator block
  1273                           ;	4X PLL Enable
  1274                           ;	PLLCFG = OFF, Oscillator used directly
  1275                           ;	Primary clock enable bit
  1276                           ;	PRICLKEN = ON, Primary clock is always enabled
  1277                           ;	Fail-Safe Clock Monitor Enable bit
  1278                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1279                           ;	Internal/External Oscillator Switchover bit
  1280                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1281   300001                     	org	3145729
  1282   300001  28                 	db	40
  1283                           
  1284                           ;Config register CONFIG2L @ 0x300002
  1285                           ;	Power-up Timer Enable bit
  1286                           ;	PWRTEN = OFF, Power up timer disabled
  1287                           ;	Brown-out Reset Enable bits
  1288                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1289                           ;	Brown Out Reset Voltage bits
  1290                           ;	BORV = 190, VBOR set to 1.90 V nominal
  1291   300002                     	org	3145730
  1292   300002  1F                 	db	31
  1293                           
  1294                           ;Config register CONFIG2H @ 0x300003
  1295                           ;	Watchdog Timer Enable bits
  1296                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  1297                           ;	Watchdog Timer Postscale Select bits
  1298                           ;	WDTPS = 32768, 1:32768
  1299   300003                     	org	3145731
  1300   300003  3C                 	db	60
  1301                           
  1302                           ; Padding undefined space
  1303   300004                     	org	3145732
  1304   300004  FF                 	db	255
  1305                           
  1306                           ;Config register CONFIG3H @ 0x300005
  1307                           ;	CCP2 MUX bit
  1308                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  1309                           ;	PORTB A/D Enable bit
  1310                           ;	PBADEN = ON, PORTB<5:0> pins are configured as analog input channels on Reset
  1311                           ;	P3A/CCP3 Mux bit
  1312                           ;	CCP3MX = PORTE0, P3A/CCP3 input/output is mulitplexed with RE0
  1313                           ;	HFINTOSC Fast Start-up
  1314                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
  1315                           ;	Timer3 Clock input mux bit
  1316                           ;	T3CMX = PORTC0, T3CKI is on RC0
  1317                           ;	ECCP2 B output mux bit
  1318                           ;	P2BMX = PORTD2, P2B is on RD2
  1319                           ;	MCLR Pin Enable bit
  1320                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
  1321   300005                     	org	3145733
  1322   300005  BB                 	db	187
  1323                           
  1324                           ;Config register CONFIG4L @ 0x300006
  1325                           ;	Stack Full/Underflow Reset Enable bit
  1326                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1327                           ;	Single-Supply ICSP Enable bit
  1328                           ;	LVP = OFF, Single-Supply ICSP disabled
  1329                           ;	Extended Instruction Set Enable bit
  1330                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1331                           ;	Background Debug
  1332                           ;	DEBUG = 0x1, unprogrammed default
  1333   300006                     	org	3145734
  1334   300006  81                 	db	129
  1335                           
  1336                           ; Padding undefined space
  1337   300007                     	org	3145735
  1338   300007  FF                 	db	255
  1339                           
  1340                           ;Config register CONFIG5L @ 0x300008
  1341                           ;	Code Protection Block 0
  1342                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  1343                           ;	Code Protection Block 1
  1344                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  1345                           ;	Code Protection Block 2
  1346                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  1347                           ;	Code Protection Block 3
  1348                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  1349   300008                     	org	3145736
  1350   300008  0F                 	db	15
  1351                           
  1352                           ;Config register CONFIG5H @ 0x300009
  1353                           ;	Boot Block Code Protection bit
  1354                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1355                           ;	Data EEPROM Code Protection bit
  1356                           ;	CPD = OFF, Data EEPROM not code-protected
  1357   300009                     	org	3145737
  1358   300009  C0                 	db	192
  1359                           
  1360                           ;Config register CONFIG6L @ 0x30000A
  1361                           ;	Write Protection Block 0
  1362                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  1363                           ;	Write Protection Block 1
  1364                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  1365                           ;	Write Protection Block 2
  1366                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  1367                           ;	Write Protection Block 3
  1368                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  1369   30000A                     	org	3145738
  1370   30000A  0F                 	db	15
  1371                           
  1372                           ;Config register CONFIG6H @ 0x30000B
  1373                           ;	Configuration Register Write Protection bit
  1374                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1375                           ;	Boot Block Write Protection bit
  1376                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  1377                           ;	Data EEPROM Write Protection bit
  1378                           ;	WRTD = OFF, Data EEPROM not write-protected
  1379   30000B                     	org	3145739
  1380   30000B  E0                 	db	224
  1381                           
  1382                           ;Config register CONFIG7L @ 0x30000C
  1383                           ;	Table Read Protection Block 0
  1384                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  1385                           ;	Table Read Protection Block 1
  1386                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1387                           ;	Table Read Protection Block 2
  1388                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  1389                           ;	Table Read Protection Block 3
  1390                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  1391   30000C                     	org	3145740
  1392   30000C  0F                 	db	15
  1393                           
  1394                           ;Config register CONFIG7H @ 0x30000D
  1395                           ;	Boot Block Table Read Protection bit
  1396                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1397   30000D                     	org	3145741
  1398   30000D  40                 	db	64
  1399                           tosu	equ	0xFFF
  1400                           tosh	equ	0xFFE
  1401                           tosl	equ	0xFFD
  1402                           stkptr	equ	0xFFC
  1403                           pclatu	equ	0xFFB
  1404                           pclath	equ	0xFFA
  1405                           pcl	equ	0xFF9
  1406                           tblptru	equ	0xFF8
  1407                           tblptrh	equ	0xFF7
  1408                           tblptrl	equ	0xFF6
  1409                           tablat	equ	0xFF5
  1410                           prodh	equ	0xFF4
  1411                           prodl	equ	0xFF3
  1412                           indf0	equ	0xFEF
  1413                           postinc0	equ	0xFEE
  1414                           postdec0	equ	0xFED
  1415                           preinc0	equ	0xFEC
  1416                           plusw0	equ	0xFEB
  1417                           fsr0h	equ	0xFEA
  1418                           fsr0l	equ	0xFE9
  1419                           wreg	equ	0xFE8
  1420                           indf1	equ	0xFE7
  1421                           postinc1	equ	0xFE6
  1422                           postdec1	equ	0xFE5
  1423                           preinc1	equ	0xFE4
  1424                           plusw1	equ	0xFE3
  1425                           fsr1h	equ	0xFE2
  1426                           fsr1l	equ	0xFE1
  1427                           bsr	equ	0xFE0
  1428                           indf2	equ	0xFDF
  1429                           postinc2	equ	0xFDE
  1430                           postdec2	equ	0xFDD
  1431                           preinc2	equ	0xFDC
  1432                           plusw2	equ	0xFDB
  1433                           fsr2h	equ	0xFDA
  1434                           fsr2l	equ	0xFD9
  1435                           status	equ	0xFD8

Data Sizes:
    Strings     34
    Constant    0
    Data        0
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     18      27
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    Send_String@String	PTR unsigned char  size(1) Largest target is 17
		 -> STR_1(CODE[17]), STR_2(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_Init_LCD
    _Init_LCD->_Send_Instruction_Data
    _Send_Instruction_Data->_LCD_Instruction

Critical Paths under _Interrupt in COMRAM

    None.

Critical Paths under _Interrupt_Rx in COMRAM

    _Init_Message_Platform->_Send_String
    _Send_String->i2_Send_Instruction_Data
    i2_Send_Instruction_Data->i2_LCD_Instruction

Critical Paths under _main in BANK0

    None.

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _Interrupt_Rx in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _Interrupt_Rx in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _Interrupt_Rx in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _Interrupt_Rx in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _Interrupt_Rx in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Critical Paths under _Interrupt_Rx in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Interrupt in BANK6

    None.

Critical Paths under _Interrupt_Rx in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Interrupt in BANK7

    None.

Critical Paths under _Interrupt_Rx in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Interrupt in BANK8

    None.

Critical Paths under _Interrupt_Rx in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Interrupt in BANK9

    None.

Critical Paths under _Interrupt_Rx in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Interrupt in BANK10

    None.

Critical Paths under _Interrupt_Rx in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Interrupt in BANK11

    None.

Critical Paths under _Interrupt_Rx in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Interrupt in BANK12

    None.

Critical Paths under _Interrupt_Rx in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _Interrupt in BANK13

    None.

Critical Paths under _Interrupt_Rx in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _Interrupt in BANK14

    None.

Critical Paths under _Interrupt_Rx in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _Interrupt in BANK15

    None.

Critical Paths under _Interrupt_Rx in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     839
                     _Configurations
                           _Init_LCD
 ---------------------------------------------------------------------------------
 (1) _Init_LCD                                             2     2      0     839
                                             16 COMRAM     2     2      0
              _Send_Instruction_Data
 ---------------------------------------------------------------------------------
 (2) _Send_Instruction_Data                                2     1      1     839
                                             14 COMRAM     2     1      1
                    _LCD_Instruction
 ---------------------------------------------------------------------------------
 (3) _LCD_Instruction                                      2     2      0      15
                                             12 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Configurations                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Interrupt                                            1     1      0       0
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Interrupt_Rx                                         4     4      0     574
                                              7 COMRAM     4     4      0
                  _Receive_Interrupt
 ---------------------------------------------------------------------------------
 (6) _Receive_Interrupt                                    0     0      0     574
              _Init_Message_Platform
 ---------------------------------------------------------------------------------
 (7) _Init_Message_Platform                                0     0      0     574
                        _Send_String
            i2_Send_Instruction_Data
 ---------------------------------------------------------------------------------
 (8) _Send_String                                          3     2      1     408
                                              4 COMRAM     3     2      1
            i2_Send_Instruction_Data
 ---------------------------------------------------------------------------------
 (8) i2_Send_Instruction_Data                              2     1      1     166
                                              2 COMRAM     2     1      1
                  i2_LCD_Instruction
 ---------------------------------------------------------------------------------
 (9) i2_LCD_Instruction                                    2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Configurations
   _Init_LCD
     _Send_Instruction_Data
       _LCD_Instruction

 _Interrupt (ROOT)

 _Interrupt_Rx (ROOT)
   _Receive_Interrupt
     _Init_Message_Platform
       _Send_String
         i2_Send_Instruction_Data
           i2_LCD_Instruction
       i2_Send_Instruction_Data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      51        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     12      1B       1       28.7%
BITBANK15           38      0       0      34        0.0%
BANK15              38      0       0      35        0.0%
BITBIGSFRlhllh      2C      0       0      46        0.0%
BITBIGSFRhhl        1E      0       0      37        0.0%
BITBIGSFRlhllll     17      0       0      48        0.0%
BITBIGSFRhllhhh     14      0       0      39        0.0%
BITBIGSFRhhh         D      0       0      36        0.0%
BITBIGSFRhllll       C      0       0      43        0.0%
BITBIGSFRhllhl       8      0       0      41        0.0%
BITBIGSFRlhlllh      7      0       0      47        0.0%
BITBIGSFRlhlh        6      0       0      45        0.0%
BITBIGSFRlhh         6      0       0      44        0.0%
BITBIGSFRhlh         2      0       0      38        0.0%
BITBIGSFRll          2      0       0      49        0.0%
BITBIGSFRhllhhl      1      0       0      40        0.0%
BITBIGSFRhlllh       1      0       0      42        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1B      50        0.0%
DATA                 0      0      1B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Wed Feb 28 14:51:22 2024

                                l75 12DC                                  l92 112C  
                                l76 12DC                                  u75 128C  
                                u76 128E                                  u97 102E  
                 Send_String@String 0005                                  bsr 0FE0  
                               l123 10C4                                 l126 129C  
                               l129 11B0                                 l901 112A  
                               l841 118A                                 l843 118E  
                               l861 10C6                                 l845 119E  
                               l837 1178                                 l871 10F0  
                               l863 10D8                                 l847 11A0  
                               l839 117A                                 l881 10FE  
                               l873 10F2                                 l865 10DA  
                               l891 1108                                 l883 1100  
                               l875 10F4                                 l867 10E4  
                               l893 110A                                 l885 1102  
                               l877 10F6                                 l869 10E6  
                               l981 1024                                 l895 110C  
                               l887 1104                                 l879 10F8  
                               l975 1284                                 l991 107A  
                               l983 103C                                 l897 110E  
                               l889 1106                                 l977 128E  
                               l993 1084                                 l985 1046  
                               l899 1110                                 l979 1296  
                               l995 108E                                 l987 1060  
                               l997 1098                                 l989 1070  
                               l999 10A2                                 u107 104C  
                               u117 1066                                 u127 10B6  
                               u137 1180                                 u147 1194  
                               u157 11A6                                 _PR2 0FBB  
       i2Send_Instruction_Data@Data 0003                                 wreg 0FE8  
                        _TXSTA1bits 0FAC                                l1001 10AC  
                              l1013 12D4                                l1015 12D8  
                              STR_1 1012                                STR_2 1001  
                              _LATD 0F8C                                _LATE 0F8D  
                              i1l89 001E                                i2l84 1248  
                              _main 12D4                                btemp 001C  
                              start 0026                        ___param_bank 0000  
                   _LCD_Instruction 1176    Send_Instruction_Data@Instruction 0010  
i2Send_Instruction_Data@Instruction 0004                        _BAUDCON1bits 0FB8  
                             ?_main 0001                               _T2CON 0FBA  
                             i2l101 1224                               i2l110 1280  
                             i2l126 12B8                               i2l135 1174  
                             i2l129 11EC                               i2l951 11DA  
                             i2l943 11B4                               i2l953 11DC  
                             i2l945 11B6                               i2l961 112E  
                             i2l947 11C6                               i2l955 12A0  
                             i2l963 1136                               i2l971 1266  
                             i2l949 11CA                               i2l957 12AA  
                             i2l965 1150                               i2l973 126E  
                             i2l959 12B2                               i2l967 1152  
                             i2l969 125C                               _SPBRG 0FAF  
                             _TRISD 0F95                               _TRISE 0F96  
      i2LCD_Instruction@Instruction 0002                               tablat 0FF5  
                             ttemp5 001D                               ttemp6 0020  
                             ttemp7 0024                               status 0FD8  
                             wtemp8 001D                     __initialization 12BA  
                      __end_of_main 12E4                    __end_of_Init_LCD 10C6  
             _Send_Instruction_Data 1282                              ??_main 0013  
                     ??_Send_String 0006                       __activetblptr 0002  
                            _CCPR3L 0F5E                              _CCPR5L 0F55  
                            _ANSELC 0F3A                              _ANSELD 0F3B  
                            _ANSELE 0F3C                              i2l1011 1206  
                            i2l1003 11EE                              i2l1005 11F6  
                            i2l1007 11FE                              i2l1017 1236  
                            i2l1019 1244                              _RCREG1 0FAE  
        LCD_Instruction@Instruction 000E                              _OSCCON 0FD3  
                            i2u5_45 12A8                              i2u5_46 12AA  
                            i2u6_40 1174                              i2u6_41 1170  
                            i2u8_40 1244                              i2u8_41 1240  
                     ?_Interrupt_Rx 0001             __end_of_LCD_Instruction 11B2  
     __end_of_Init_Message_Platform 1282                              clear_0 12C0  
                            isa$std 0001                        __mediumconst 0000  
                            tblptrh 0FF7                              tblptrl 0FF6  
                            tblptru 0FF8                 __end_of_Send_String 1176  
                        __accesstop 0060             __end_of__initialization 12C6  
                    ??_Interrupt_Rx 0008                       ___rparam_used 0001  
                    __pcstackCOMRAM 0001                   _Receive_Interrupt 11EE  
            ?_Send_Instruction_Data 000F                  ?_Receive_Interrupt 0001  
               ??_Receive_Interrupt 0008                         _Duty_Cycle1 0017  
                       _Duty_Cycle2 0013                   __end_of_Interrupt 0026  
                         ?_Init_LCD 0001                    ?_LCD_Instruction 0001  
         __end_of_Receive_Interrupt 1226             i2_Send_Instruction_Data 129E  
                           _CCP3CON 0F5D                             _CCP5CON 0F54  
                       _Send_String 112E                             i2u16_47 11BC  
                           i2u17_47 11D0                             i2u18_47 11E2  
                        ??_Init_LCD 0011                             __Hparam 0000  
                           __Lparam 0000                        __psmallconst 1000  
                           __pcinit 12BA                             __ramtop 1000  
                           __ptext0 12D4                             __ptext1 1024  
                           __ptext2 1282                             __ptext3 1176  
                           __ptext4 10C6                             __ptext7 11EE  
                           __ptext8 125C                             __ptext9 112E  
              __end_of_Interrupt_Rx 125C                           _T2CONbits 0FBA  
                    __pintcode_body 1226                end_of_initialization 12C6  
                     __Lmediumconst 0000                             int_func 1226  
         ??i2_Send_Instruction_Data 0004                           _RCSTAbits 0FAB  
                           postinc0 0FEE                           _TRISCbits 0F94  
           ??_Send_Instruction_Data 0010               _Init_Message_Platform 125C  
               start_initialization 12BA                        Send_String@i 0007  
         Send_Instruction_Data@Data 000F                      _Configurations 10C6  
                         _Interrupt 0018                           _Rx_Buffer 001B  
                      ?_Send_String 0005                         __pbssCOMRAM 0013  
            __end_of_Configurations 112E                          ?_Interrupt 0001  
                      _Interrupt_Rx 0008              ?_Init_Message_Platform 0001  
                         __pintcode 0008                         __pintcodelo 0018  
                       __smallconst 1000                     ?_Configurations 0001  
                          _LATCbits 0F8B                            _PIE1bits 0F9D  
                          _PIR1bits 0F9E                            _RCONbits 0FD0  
                 i2_LCD_Instruction 11B2                  ?i2_LCD_Instruction 0001  
               ??i2_LCD_Instruction 0001                         ??_Interrupt 000C  
                          _Init_LCD 1024                            __Hrparam 0000  
                          __Lrparam 0000       __end_of_Send_Instruction_Data 129E  
         __end_ofi2_LCD_Instruction 11EE                   ??_LCD_Instruction 000D  
                          __ptext10 129E                            __ptext11 11B2  
          ?i2_Send_Instruction_Data 0003                            isa$xinst 0000  
                          int$flags 001C                          _INTCONbits 0FF2  
                          intlevel1 0000                            intlevel2 0000  
           ??_Init_Message_Platform 0008                    ??_Configurations 000D  
   __end_ofi2_Send_Instruction_Data 12BA  
