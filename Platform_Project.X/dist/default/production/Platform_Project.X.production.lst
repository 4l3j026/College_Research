

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Wed Feb 14 18:27:41 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    15   000000                     
    16                           ; Generated 12/10/2023 GMT
    17                           ; 
    18                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC18F46K22 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50   000000                     _LATCbits	set	3979
    51   000000                     _LATD	set	3980
    52                           
    53                           ; #config settings
    54                           
    55                           	psect	cinit
    56   001108                     __pcinit:
    57                           	callstack 0
    58   001108                     start_initialization:
    59                           	callstack 0
    60   001108                     __initialization:
    61                           	callstack 0
    62   001108                     end_of_initialization:
    63                           	callstack 0
    64   001108                     __end_of__initialization:
    65                           	callstack 0
    66   001108  0100               	movlb	0
    67   00110A  EF7E  F008         	goto	_main	;jump to C main() function
    68                           
    69                           	psect	cstackCOMRAM
    70   000001                     __pcstackCOMRAM:
    71                           	callstack 0
    72   000001                     ??_LCD_Instruction:
    73   000001                     
    74                           ; 1 bytes @ 0x0
    75   000001                     	ds	1
    76   000002                     LCD_Instruction@Instruction:
    77                           	callstack 0
    78                           
    79                           ; 1 bytes @ 0x1
    80   000002                     	ds	1
    81   000003                     Send_Instruction_Data@Data:
    82                           	callstack 0
    83                           
    84                           ; 1 bytes @ 0x2
    85   000003                     	ds	1
    86   000004                     Send_Instruction_Data@Instruction:
    87                           	callstack 0
    88                           
    89                           ; 1 bytes @ 0x3
    90   000004                     	ds	1
    91   000005                     ??_Init_LCD:
    92                           
    93                           ; 1 bytes @ 0x4
    94   000005                     	ds	2
    95   000007                     
    96                           ; 1 bytes @ 0x6
    97 ;;
    98 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
    99 ;;
   100 ;; *************** function _main *****************
   101 ;; Defined at:
   102 ;;		line 39 in file "main.c"
   103 ;; Parameters:    Size  Location     Type
   104 ;;		None
   105 ;; Auto vars:     Size  Location     Type
   106 ;;		None
   107 ;; Return value:  Size  Location     Type
   108 ;;                  1    wreg      void 
   109 ;; Registers used:
   110 ;;		wreg, status,2, status,0, cstack
   111 ;; Tracked objects:
   112 ;;		On entry : 0/0
   113 ;;		On exit  : 0/0
   114 ;;		Unchanged: 0/0
   115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   120 ;;Total ram usage:        0 bytes
   121 ;; Hardware stack levels required when called: 3
   122 ;; This function calls:
   123 ;;		_Init_LCD
   124 ;; This function is called by:
   125 ;;		Startup code after reset
   126 ;; This function uses a non-reentrant model
   127 ;;
   128                           
   129                           	psect	text0
   130   0010FC                     __ptext0:
   131                           	callstack 0
   132   0010FC                     _main:
   133                           	callstack 28
   134   0010FC                     
   135                           ;main.c: 43:     Init_LCD();
   136   0010FC  EC01  F008         	call	_Init_LCD	;wreg free
   137   001100                     l17:
   138   001100  EF80  F008         	goto	l17
   139   001104  EF00  F000         	goto	start
   140   001108                     __end_of_main:
   141                           	callstack 0
   142                           
   143 ;; *************** function _Init_LCD *****************
   144 ;; Defined at:
   145 ;;		line 55 in file "main.c"
   146 ;; Parameters:    Size  Location     Type
   147 ;;		None
   148 ;; Auto vars:     Size  Location     Type
   149 ;;		None
   150 ;; Return value:  Size  Location     Type
   151 ;;                  1    wreg      void 
   152 ;; Registers used:
   153 ;;		wreg, status,2, status,0, cstack
   154 ;; Tracked objects:
   155 ;;		On entry : 0/0
   156 ;;		On exit  : 0/0
   157 ;;		Unchanged: 0/0
   158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   161 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   162 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   163 ;;Total ram usage:        2 bytes
   164 ;; Hardware stack levels used: 1
   165 ;; Hardware stack levels required when called: 2
   166 ;; This function calls:
   167 ;;		_Send_Instruction_Data
   168 ;; This function is called by:
   169 ;;		_main
   170 ;; This function uses a non-reentrant model
   171 ;;
   172                           
   173                           	psect	text1
   174   001002                     __ptext1:
   175                           	callstack 0
   176   001002                     _Init_LCD:
   177                           	callstack 28
   178   001002                     
   179                           ;main.c: 57:     _delay((unsigned long)((60)*(16000000/4000.0)));
   180   001002  0E02               	movlw	2
   181   001004  6E06               	movwf	(??_Init_LCD+1)^0,c
   182   001006  0E38               	movlw	56
   183   001008  6E05               	movwf	??_Init_LCD^0,c
   184   00100A  0EAD               	movlw	173
   185   00100C                     u57:
   186   00100C  2EE8               	decfsz	wreg,f,c
   187   00100E  D7FE               	bra	u57
   188   001010  2E05               	decfsz	??_Init_LCD^0,f,c
   189   001012  D7FC               	bra	u57
   190   001014  2E06               	decfsz	(??_Init_LCD+1)^0,f,c
   191   001016  D7FA               	bra	u57
   192   001018  0000               	nop	
   193   00101A                     
   194                           ;main.c: 58:     Send_Instruction_Data(0, 0x30);
   195   00101A  0E30               	movlw	48
   196   00101C  6E03               	movwf	Send_Instruction_Data@Data^0,c
   197   00101E  0E00               	movlw	0
   198   001020  EC70  F008         	call	_Send_Instruction_Data
   199   001024                     
   200                           ;main.c: 59:     _delay((unsigned long)((5)*(16000000/4000.0)));
   201   001024  0E1A               	movlw	26
   202   001026  6E05               	movwf	??_Init_LCD^0,c
   203   001028  0EF8               	movlw	248
   204   00102A                     u67:
   205   00102A  2EE8               	decfsz	wreg,f,c
   206   00102C  D7FE               	bra	u67
   207   00102E  2E05               	decfsz	??_Init_LCD^0,f,c
   208   001030  D7FC               	bra	u67
   209   001032  D000               	nop2	
   210                           
   211                           ;main.c: 60:     Send_Instruction_Data(0, 0x30);
   212   001034  0E30               	movlw	48
   213   001036  6E03               	movwf	Send_Instruction_Data@Data^0,c
   214   001038  0E00               	movlw	0
   215   00103A  EC70  F008         	call	_Send_Instruction_Data
   216   00103E                     
   217                           ;main.c: 61:     _delay((unsigned long)((5)*(16000000/4000.0)));
   218   00103E  0E1A               	movlw	26
   219   001040  6E05               	movwf	??_Init_LCD^0,c
   220   001042  0EF8               	movlw	248
   221   001044                     u77:
   222   001044  2EE8               	decfsz	wreg,f,c
   223   001046  D7FE               	bra	u77
   224   001048  2E05               	decfsz	??_Init_LCD^0,f,c
   225   00104A  D7FC               	bra	u77
   226   00104C  D000               	nop2	
   227   00104E                     
   228                           ;main.c: 62:     Send_Instruction_Data(0, 0x30);
   229   00104E  0E30               	movlw	48
   230   001050  6E03               	movwf	Send_Instruction_Data@Data^0,c
   231   001052  0E00               	movlw	0
   232   001054  EC70  F008         	call	_Send_Instruction_Data
   233   001058                     
   234                           ;main.c: 63:     Send_Instruction_Data(0, 0x02);
   235   001058  0E02               	movlw	2
   236   00105A  6E03               	movwf	Send_Instruction_Data@Data^0,c
   237   00105C  0E00               	movlw	0
   238   00105E  EC70  F008         	call	_Send_Instruction_Data
   239   001062                     
   240                           ;main.c: 64:     Send_Instruction_Data(0, 0x06);
   241   001062  0E06               	movlw	6
   242   001064  6E03               	movwf	Send_Instruction_Data@Data^0,c
   243   001066  0E00               	movlw	0
   244   001068  EC70  F008         	call	_Send_Instruction_Data
   245   00106C                     
   246                           ;main.c: 65:     Send_Instruction_Data(0, 0x0F);
   247   00106C  0E0F               	movlw	15
   248   00106E  6E03               	movwf	Send_Instruction_Data@Data^0,c
   249   001070  0E00               	movlw	0
   250   001072  EC70  F008         	call	_Send_Instruction_Data
   251   001076                     
   252                           ;main.c: 66:     Send_Instruction_Data(0, 0x28);
   253   001076  0E28               	movlw	40
   254   001078  6E03               	movwf	Send_Instruction_Data@Data^0,c
   255   00107A  0E00               	movlw	0
   256   00107C  EC70  F008         	call	_Send_Instruction_Data
   257   001080                     
   258                           ;main.c: 67:     Send_Instruction_Data(0, 0x01);
   259   001080  0E01               	movlw	1
   260   001082  6E03               	movwf	Send_Instruction_Data@Data^0,c
   261   001084  0E00               	movlw	0
   262   001086  EC70  F008         	call	_Send_Instruction_Data
   263   00108A                     
   264                           ;main.c: 68:     _delay((unsigned long)((100)*(16000000/4000.0)));
   265   00108A  0E03               	movlw	3
   266   00108C  6E06               	movwf	(??_Init_LCD+1)^0,c
   267   00108E  0E08               	movlw	8
   268   001090  6E05               	movwf	??_Init_LCD^0,c
   269   001092  0E77               	movlw	119
   270   001094                     u87:
   271   001094  2EE8               	decfsz	wreg,f,c
   272   001096  D7FE               	bra	u87
   273   001098  2E05               	decfsz	??_Init_LCD^0,f,c
   274   00109A  D7FC               	bra	u87
   275   00109C  2E06               	decfsz	(??_Init_LCD+1)^0,f,c
   276   00109E  D7FA               	bra	u87
   277   0010A0  0000               	nop	
   278   0010A2  0012               	return		;funcret
   279   0010A4                     __end_of_Init_LCD:
   280                           	callstack 0
   281                           
   282 ;; *************** function _Send_Instruction_Data *****************
   283 ;; Defined at:
   284 ;;		line 74 in file "main.c"
   285 ;; Parameters:    Size  Location     Type
   286 ;;  Instruction     1    wreg     unsigned char 
   287 ;;  Data            1    2[COMRAM] unsigned char 
   288 ;; Auto vars:     Size  Location     Type
   289 ;;  Instruction     1    3[COMRAM] unsigned char 
   290 ;; Return value:  Size  Location     Type
   291 ;;                  1    wreg      void 
   292 ;; Registers used:
   293 ;;		wreg, status,2, status,0, cstack
   294 ;; Tracked objects:
   295 ;;		On entry : 0/0
   296 ;;		On exit  : 0/0
   297 ;;		Unchanged: 0/0
   298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   299 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   300 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   302 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   303 ;;Total ram usage:        2 bytes
   304 ;; Hardware stack levels used: 1
   305 ;; Hardware stack levels required when called: 1
   306 ;; This function calls:
   307 ;;		_LCD_Instruction
   308 ;; This function is called by:
   309 ;;		_Init_LCD
   310 ;;		_Send_String
   311 ;; This function uses a non-reentrant model
   312 ;;
   313                           
   314                           	psect	text2
   315   0010E0                     __ptext2:
   316                           	callstack 0
   317   0010E0                     _Send_Instruction_Data:
   318                           	callstack 28
   319                           
   320                           ;incstack = 0
   321                           ;Send_Instruction_Data@Instruction stored from wreg
   322   0010E0  6E04               	movwf	Send_Instruction_Data@Instruction^0,c
   323   0010E2                     
   324                           ;main.c: 76:     LATCbits.LATC4 = Instruction;
   325   0010E2  B004               	btfsc	Send_Instruction_Data@Instruction^0,0,c
   326   0010E4  D002               	bra	u35
   327   0010E6  988B               	bcf	139,4,c	;volatile
   328   0010E8  D001               	bra	u36
   329   0010EA                     u35:
   330   0010EA  888B               	bsf	139,4,c	;volatile
   331   0010EC                     u36:
   332   0010EC                     
   333                           ;main.c: 77:     LCD_Instruction(Data >> 4);
   334   0010EC  3803               	swapf	Send_Instruction_Data@Data^0,w,c
   335   0010EE  0B0F               	andlw	15
   336   0010F0  EC52  F008         	call	_LCD_Instruction
   337   0010F4                     
   338                           ;main.c: 78:     LCD_Instruction(Data);
   339   0010F4  5003               	movf	Send_Instruction_Data@Data^0,w,c
   340   0010F6  EC52  F008         	call	_LCD_Instruction
   341   0010FA  0012               	return		;funcret
   342   0010FC                     __end_of_Send_Instruction_Data:
   343                           	callstack 0
   344                           
   345 ;; *************** function _LCD_Instruction *****************
   346 ;; Defined at:
   347 ;;		line 83 in file "main.c"
   348 ;; Parameters:    Size  Location     Type
   349 ;;  Instruction     1    wreg     unsigned char 
   350 ;; Auto vars:     Size  Location     Type
   351 ;;  Instruction     1    1[COMRAM] unsigned char 
   352 ;; Return value:  Size  Location     Type
   353 ;;                  1    wreg      void 
   354 ;; Registers used:
   355 ;;		wreg, status,2, cstack
   356 ;; Tracked objects:
   357 ;;		On entry : 0/0
   358 ;;		On exit  : 0/0
   359 ;;		Unchanged: 0/0
   360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   362 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   363 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   364 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   365 ;;Total ram usage:        2 bytes
   366 ;; Hardware stack levels used: 1
   367 ;; This function calls:
   368 ;;		Nothing
   369 ;; This function is called by:
   370 ;;		_Send_Instruction_Data
   371 ;; This function uses a non-reentrant model
   372 ;;
   373                           
   374                           	psect	text3
   375   0010A4                     __ptext3:
   376                           	callstack 0
   377   0010A4                     _LCD_Instruction:
   378                           	callstack 28
   379                           
   380                           ;incstack = 0
   381                           ;LCD_Instruction@Instruction stored from wreg
   382   0010A4  6E02               	movwf	LCD_Instruction@Instruction^0,c
   383   0010A6                     
   384                           ;main.c: 85:     LATCbits.LATC5 = 1;
   385   0010A6  8A8B               	bsf	139,5,c	;volatile
   386   0010A8                     
   387                           ;main.c: 86:     _delay((unsigned long)((15)*(16000000/4000.0)));
   388   0010A8  0E4E               	movlw	78
   389   0010AA  6E01               	movwf	??_LCD_Instruction^0,c
   390   0010AC  0EEB               	movlw	235
   391   0010AE                     u97:
   392   0010AE  2EE8               	decfsz	wreg,f,c
   393   0010B0  D7FE               	bra	u97
   394   0010B2  2E01               	decfsz	??_LCD_Instruction^0,f,c
   395   0010B4  D7FC               	bra	u97
   396   0010B6  0000               	nop	
   397   0010B8                     
   398                           ;main.c: 87:     LATD = Instruction;
   399   0010B8  C002  FF8C         	movff	LCD_Instruction@Instruction,3980	;volatile
   400   0010BC                     
   401                           ;main.c: 88:     _delay((unsigned long)((15)*(16000000/4000.0)));
   402   0010BC  0E4E               	movlw	78
   403   0010BE  6E01               	movwf	??_LCD_Instruction^0,c
   404   0010C0  0EEB               	movlw	235
   405   0010C2                     u107:
   406   0010C2  2EE8               	decfsz	wreg,f,c
   407   0010C4  D7FE               	bra	u107
   408   0010C6  2E01               	decfsz	??_LCD_Instruction^0,f,c
   409   0010C8  D7FC               	bra	u107
   410   0010CA  0000               	nop	
   411   0010CC                     
   412                           ;main.c: 89:     LATCbits.LATC5 = 0;
   413   0010CC  9A8B               	bcf	139,5,c	;volatile
   414   0010CE                     
   415                           ;main.c: 90:     _delay((unsigned long)((15)*(16000000/4000.0)));
   416   0010CE  0E4E               	movlw	78
   417   0010D0  6E01               	movwf	??_LCD_Instruction^0,c
   418   0010D2  0EEB               	movlw	235
   419   0010D4                     u117:
   420   0010D4  2EE8               	decfsz	wreg,f,c
   421   0010D6  D7FE               	bra	u117
   422   0010D8  2E01               	decfsz	??_LCD_Instruction^0,f,c
   423   0010DA  D7FC               	bra	u117
   424   0010DC  0000               	nop	
   425   0010DE  0012               	return		;funcret
   426   0010E0                     __end_of_LCD_Instruction:
   427                           	callstack 0
   428                           
   429                           	psect	smallconst
   430   001000                     __psmallconst:
   431                           	callstack 0
   432   001000  00                 	db	0
   433   001001  00                 	db	0	; dummy byte at the end
   434   000000                     
   435                           	psect	rparam
   436   000000                     
   437                           	psect	config
   438                           
   439                           ; Padding undefined space
   440   300000                     	org	3145728
   441   300000  FF                 	db	255
   442                           
   443                           ;Config register CONFIG1H @ 0x300001
   444                           ;	Oscillator Selection bits
   445                           ;	FOSC = INTIO67, Internal oscillator block
   446                           ;	4X PLL Enable
   447                           ;	PLLCFG = OFF, Oscillator used directly
   448                           ;	Primary clock enable bit
   449                           ;	PRICLKEN = ON, Primary clock is always enabled
   450                           ;	Fail-Safe Clock Monitor Enable bit
   451                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   452                           ;	Internal/External Oscillator Switchover bit
   453                           ;	IESO = OFF, Oscillator Switchover mode disabled
   454   300001                     	org	3145729
   455   300001  28                 	db	40
   456                           
   457                           ;Config register CONFIG2L @ 0x300002
   458                           ;	Power-up Timer Enable bit
   459                           ;	PWRTEN = OFF, Power up timer disabled
   460                           ;	Brown-out Reset Enable bits
   461                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
   462                           ;	Brown Out Reset Voltage bits
   463                           ;	BORV = 190, VBOR set to 1.90 V nominal
   464   300002                     	org	3145730
   465   300002  1F                 	db	31
   466                           
   467                           ;Config register CONFIG2H @ 0x300003
   468                           ;	Watchdog Timer Enable bits
   469                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
   470                           ;	Watchdog Timer Postscale Select bits
   471                           ;	WDTPS = 32768, 1:32768
   472   300003                     	org	3145731
   473   300003  3C                 	db	60
   474                           
   475                           ; Padding undefined space
   476   300004                     	org	3145732
   477   300004  FF                 	db	255
   478                           
   479                           ;Config register CONFIG3H @ 0x300005
   480                           ;	CCP2 MUX bit
   481                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
   482                           ;	PORTB A/D Enable bit
   483                           ;	PBADEN = ON, PORTB<5:0> pins are configured as analog input channels on Reset
   484                           ;	P3A/CCP3 Mux bit
   485                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
   486                           ;	HFINTOSC Fast Start-up
   487                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
   488                           ;	Timer3 Clock input mux bit
   489                           ;	T3CMX = PORTC0, T3CKI is on RC0
   490                           ;	ECCP2 B output mux bit
   491                           ;	P2BMX = PORTD2, P2B is on RD2
   492                           ;	MCLR Pin Enable bit
   493                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
   494   300005                     	org	3145733
   495   300005  BF                 	db	191
   496                           
   497                           ;Config register CONFIG4L @ 0x300006
   498                           ;	Stack Full/Underflow Reset Enable bit
   499                           ;	STVREN = ON, Stack full/underflow will cause Reset
   500                           ;	Single-Supply ICSP Enable bit
   501                           ;	LVP = OFF, Single-Supply ICSP disabled
   502                           ;	Extended Instruction Set Enable bit
   503                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   504                           ;	Background Debug
   505                           ;	DEBUG = 0x1, unprogrammed default
   506   300006                     	org	3145734
   507   300006  81                 	db	129
   508                           
   509                           ; Padding undefined space
   510   300007                     	org	3145735
   511   300007  FF                 	db	255
   512                           
   513                           ;Config register CONFIG5L @ 0x300008
   514                           ;	Code Protection Block 0
   515                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
   516                           ;	Code Protection Block 1
   517                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
   518                           ;	Code Protection Block 2
   519                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
   520                           ;	Code Protection Block 3
   521                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
   522   300008                     	org	3145736
   523   300008  0F                 	db	15
   524                           
   525                           ;Config register CONFIG5H @ 0x300009
   526                           ;	Boot Block Code Protection bit
   527                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
   528                           ;	Data EEPROM Code Protection bit
   529                           ;	CPD = OFF, Data EEPROM not code-protected
   530   300009                     	org	3145737
   531   300009  C0                 	db	192
   532                           
   533                           ;Config register CONFIG6L @ 0x30000A
   534                           ;	Write Protection Block 0
   535                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
   536                           ;	Write Protection Block 1
   537                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
   538                           ;	Write Protection Block 2
   539                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
   540                           ;	Write Protection Block 3
   541                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
   542   30000A                     	org	3145738
   543   30000A  0F                 	db	15
   544                           
   545                           ;Config register CONFIG6H @ 0x30000B
   546                           ;	Configuration Register Write Protection bit
   547                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
   548                           ;	Boot Block Write Protection bit
   549                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
   550                           ;	Data EEPROM Write Protection bit
   551                           ;	WRTD = OFF, Data EEPROM not write-protected
   552   30000B                     	org	3145739
   553   30000B  E0                 	db	224
   554                           
   555                           ;Config register CONFIG7L @ 0x30000C
   556                           ;	Table Read Protection Block 0
   557                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
   558                           ;	Table Read Protection Block 1
   559                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
   560                           ;	Table Read Protection Block 2
   561                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
   562                           ;	Table Read Protection Block 3
   563                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
   564   30000C                     	org	3145740
   565   30000C  0F                 	db	15
   566                           
   567                           ;Config register CONFIG7H @ 0x30000D
   568                           ;	Boot Block Table Read Protection bit
   569                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
   570   30000D                     	org	3145741
   571   30000D  40                 	db	64
   572                           tosu	equ	0xFFF
   573                           tosh	equ	0xFFE
   574                           tosl	equ	0xFFD
   575                           stkptr	equ	0xFFC
   576                           pclatu	equ	0xFFB
   577                           pclath	equ	0xFFA
   578                           pcl	equ	0xFF9
   579                           tblptru	equ	0xFF8
   580                           tblptrh	equ	0xFF7
   581                           tblptrl	equ	0xFF6
   582                           tablat	equ	0xFF5
   583                           prodh	equ	0xFF4
   584                           prodl	equ	0xFF3
   585                           indf0	equ	0xFEF
   586                           postinc0	equ	0xFEE
   587                           postdec0	equ	0xFED
   588                           preinc0	equ	0xFEC
   589                           plusw0	equ	0xFEB
   590                           fsr0h	equ	0xFEA
   591                           fsr0l	equ	0xFE9
   592                           wreg	equ	0xFE8
   593                           indf1	equ	0xFE7
   594                           postinc1	equ	0xFE6
   595                           postdec1	equ	0xFE5
   596                           preinc1	equ	0xFE4
   597                           plusw1	equ	0xFE3
   598                           fsr1h	equ	0xFE2
   599                           fsr1l	equ	0xFE1
   600                           bsr	equ	0xFE0
   601                           indf2	equ	0xFDF
   602                           postinc2	equ	0xFDE
   603                           postdec2	equ	0xFDD
   604                           preinc2	equ	0xFDC
   605                           plusw2	equ	0xFDB
   606                           fsr2h	equ	0xFDA
   607                           fsr2l	equ	0xFD9
   608                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      6       6
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_Init_LCD
    _Init_LCD->_Send_Instruction_Data
    _Send_Instruction_Data->_LCD_Instruction

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     765
                           _Init_LCD
 ---------------------------------------------------------------------------------
 (1) _Init_LCD                                             2     2      0     765
                                              4 COMRAM     2     2      0
              _Send_Instruction_Data
 ---------------------------------------------------------------------------------
 (2) _Send_Instruction_Data                                2     1      1     765
                                              2 COMRAM     2     1      1
                    _LCD_Instruction
 ---------------------------------------------------------------------------------
 (3) _LCD_Instruction                                      2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_LCD
     _Send_Instruction_Data
       _LCD_Instruction

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      6       6       1        6.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK15           38      0       0      34        0.0%
BANK15              38      0       0      35        0.0%
BITBIGSFRh          73      0       0      36        0.0%
BITBIGSFRl          53      0       0      37        0.0%
ABS                  0      0       0      38        0.0%
BIGRAM             F37      0       0      39        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Wed Feb 14 18:27:41 2024

                              l23 10A2                                l17 1100                                l26 10FA  
                              l18 1100                                l29 10DE                                u35 10EA  
                              u36 10EC                                u57 100C                                u67 102A  
                              u77 1044                                u87 1094                                u97 10AE  
                             l711 10A6                               l721 10CE                               l713 10A8  
                             l715 10B8                               l717 10BC                               l719 10CC  
                             l761 10E2                               l763 10EC                               l771 1024  
                             l765 10F4                               l781 106C                               l773 103E  
                             l783 1076                               l775 104E                               l767 1002  
                             l785 1080                               l777 1058                               l769 101A  
                             l787 108A                               l779 1062                               l789 10FC  
                             u107 10C2                               u117 10D4                               wreg 0FE8  
                            _LATD 0F8C                              _main 10FC                              start 0000  
                    ___param_bank 0000                   _LCD_Instruction 10A4  Send_Instruction_Data@Instruction 0004  
                           ?_main 0001                   __initialization 1108                      __end_of_main 1108  
                __end_of_Init_LCD 10A4             _Send_Instruction_Data 10E0                            ??_main 0007  
                   __activetblptr 0000        LCD_Instruction@Instruction 0002           __end_of_LCD_Instruction 10E0  
                          isa$std 0001                      __mediumconst 0000                        __accesstop 0060  
         __end_of__initialization 1108                     ___rparam_used 0001                    __pcstackCOMRAM 0001  
          ?_Send_Instruction_Data 0003                         ?_Init_LCD 0001                  ?_LCD_Instruction 0001  
                      ??_Init_LCD 0005                           __Hparam 0000                           __Lparam 0000  
                    __psmallconst 1000                           __pcinit 1108                           __ramtop 1000  
                         __ptext0 10FC                           __ptext1 1002                           __ptext2 10E0  
                         __ptext3 10A4              end_of_initialization 1108           ??_Send_Instruction_Data 0004  
             start_initialization 1108         Send_Instruction_Data@Data 0003                       __smallconst 1000  
                        _LATCbits 0F8B                          _Init_LCD 1002                          __Hrparam 0000  
                        __Lrparam 0000     __end_of_Send_Instruction_Data 10FC                 ??_LCD_Instruction 0001  
                        isa$xinst 0000  
