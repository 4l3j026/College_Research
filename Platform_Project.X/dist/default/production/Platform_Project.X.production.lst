

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Wed Feb 14 18:31:10 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    17   000000                     
    18                           ; Generated 12/10/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F46K22 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52   000000                     _ANSELC	set	3898
    53   000000                     _OSCCON	set	4051
    54   000000                     _LATCbits	set	3979
    55   000000                     _TRISCbits	set	3988
    56   000000                     _ANSELD	set	3899
    57   000000                     _TRISD	set	3989
    58   000000                     _LATD	set	3980
    59                           
    60                           	psect	smallconst
    61   001000                     __psmallconst:
    62                           	callstack 0
    63   001000  00                 	db	0
    64   001001                     STR_1:
    65                           
    66                           ; BSR set to: 15
    67   001001  48                 	db	72	;'H'
    68   001002  65                 	db	101	;'e'
    69   001003  6C                 	db	108	;'l'
    70   001004  6C                 	db	108	;'l'
    71   001005  6F                 	db	111	;'o'
    72   001006  20                 	db	32
    73   001007  57                 	db	87	;'W'
    74   001008  6F                 	db	111	;'o'
    75   001009  72                 	db	114	;'r'
    76   00100A  6C                 	db	108	;'l'
    77   00100B  64                 	db	100	;'d'
    78   00100C  21                 	db	33
    79   00100D  00                 	db	0
    80   00100E  00                 	db	0	; dummy byte at the end
    81   000000                     
    82                           ; #config settings
    83                           
    84                           	psect	cinit
    85   00118C                     __pcinit:
    86                           	callstack 0
    87   00118C                     start_initialization:
    88                           	callstack 0
    89   00118C                     __initialization:
    90                           	callstack 0
    91   00118C                     end_of_initialization:
    92                           	callstack 0
    93   00118C                     __end_of__initialization:
    94                           	callstack 0
    95   00118C  0E00               	movlw	low (__Lsmallconst shr (0+16))
    96   00118E  6EF8               	movwf	tblptru,c
    97   001190  0E10               	movlw	high __Lsmallconst
    98   001192  6EF7               	movwf	tblptrh,c
    99   001194  0100               	movlb	0
   100   001196  EF97  F008         	goto	_main	;jump to C main() function
   101                           
   102                           	psect	cstackCOMRAM
   103   000001                     __pcstackCOMRAM:
   104                           	callstack 0
   105   000001                     ??_LCD_Instruction:
   106   000001                     
   107                           ; 1 bytes @ 0x0
   108   000001                     	ds	1
   109   000002                     LCD_Instruction@Instruction:
   110                           	callstack 0
   111                           
   112                           ; 1 bytes @ 0x1
   113   000002                     	ds	1
   114   000003                     Send_Instruction_Data@Data:
   115                           	callstack 0
   116                           
   117                           ; 1 bytes @ 0x2
   118   000003                     	ds	1
   119   000004                     Send_Instruction_Data@Instruction:
   120                           	callstack 0
   121                           
   122                           ; 1 bytes @ 0x3
   123   000004                     	ds	1
   124   000005                     ??_Init_LCD:
   125   000005                     Send_String@String:
   126                           	callstack 0
   127                           
   128                           ; 1 bytes @ 0x4
   129   000005                     	ds	1
   130   000006                     ??_Send_String:
   131                           
   132                           ; 1 bytes @ 0x5
   133   000006                     	ds	1
   134   000007                     Send_String@i:
   135                           	callstack 0
   136                           
   137                           ; 1 bytes @ 0x6
   138   000007                     	ds	1
   139   000008                     
   140                           ; 1 bytes @ 0x7
   141 ;;
   142 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   143 ;;
   144 ;; *************** function _main *****************
   145 ;; Defined at:
   146 ;;		line 40 in file "main.c"
   147 ;; Parameters:    Size  Location     Type
   148 ;;		None
   149 ;; Auto vars:     Size  Location     Type
   150 ;;		None
   151 ;; Return value:  Size  Location     Type
   152 ;;                  1    wreg      void 
   153 ;; Registers used:
   154 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   155 ;; Tracked objects:
   156 ;;		On entry : 0/0
   157 ;;		On exit  : 0/0
   158 ;;		Unchanged: 0/0
   159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   164 ;;Total ram usage:        0 bytes
   165 ;; Hardware stack levels required when called: 3
   166 ;; This function calls:
   167 ;;		_Configurations
   168 ;;		_Init_LCD
   169 ;;		_Send_Instruction_Data
   170 ;;		_Send_String
   171 ;; This function is called by:
   172 ;;		Startup code after reset
   173 ;; This function uses a non-reentrant model
   174 ;;
   175                           
   176                           	psect	text0
   177   00112E                     __ptext0:
   178                           	callstack 0
   179   00112E                     _main:
   180                           	callstack 28
   181   00112E                     
   182                           ;main.c: 43:     Configurations();
   183   00112E  ECA8  F008         	call	_Configurations	;wreg free
   184   001132                     
   185                           ;main.c: 44:     Init_LCD();
   186   001132  EC08  F008         	call	_Init_LCD	;wreg free
   187   001136                     
   188                           ;main.c: 46:     Send_Instruction_Data(0, 0xC0);
   189   001136  0EC0               	movlw	192
   190   001138  6E03               	movwf	Send_Instruction_Data@Data^0,c
   191   00113A  0E00               	movlw	0
   192   00113C  ECB8  F008         	call	_Send_Instruction_Data
   193   001140                     
   194                           ;main.c: 47:     Send_String("Hello World!");
   195   001140  0E01               	movlw	low STR_1
   196   001142  6E05               	movwf	Send_String@String^0,c
   197   001144  EC59  F008         	call	_Send_String	;wreg free
   198   001148                     l31:
   199   001148  EFA4  F008         	goto	l31
   200   00114C  EF00  F000         	goto	start
   201   001150                     __end_of_main:
   202                           	callstack 0
   203                           
   204 ;; *************** function _Send_String *****************
   205 ;; Defined at:
   206 ;;		line 122 in file "main.c"
   207 ;; Parameters:    Size  Location     Type
   208 ;;  String          1    4[COMRAM] PTR unsigned char 
   209 ;;		 -> STR_1(13), 
   210 ;; Auto vars:     Size  Location     Type
   211 ;;  i               1    6[COMRAM] unsigned char 
   212 ;; Return value:  Size  Location     Type
   213 ;;                  1    wreg      void 
   214 ;; Registers used:
   215 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   216 ;; Tracked objects:
   217 ;;		On entry : 0/0
   218 ;;		On exit  : 0/0
   219 ;;		Unchanged: 0/0
   220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   221 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   222 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   223 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   224 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   225 ;;Total ram usage:        3 bytes
   226 ;; Hardware stack levels used: 1
   227 ;; Hardware stack levels required when called: 2
   228 ;; This function calls:
   229 ;;		_Send_Instruction_Data
   230 ;; This function is called by:
   231 ;;		_main
   232 ;; This function uses a non-reentrant model
   233 ;;
   234                           
   235                           	psect	text1
   236   0010B2                     __ptext1:
   237                           	callstack 0
   238   0010B2                     _Send_String:
   239                           	callstack 28
   240   0010B2                     
   241                           ;main.c: 124:     for (uint8_t i = 0; String[i] != '\0'; i++) {
   242   0010B2  0E00               	movlw	0
   243   0010B4  6E07               	movwf	Send_String@i^0,c
   244   0010B6  EF69  F008         	goto	l828
   245   0010BA                     l824:
   246                           
   247                           ;main.c: 126:         Send_Instruction_Data(1, String[i]);
   248   0010BA  5005               	movf	Send_String@String^0,w,c
   249   0010BC  2407               	addwf	Send_String@i^0,w,c
   250   0010BE  6E06               	movwf	??_Send_String^0,c
   251   0010C0  C006  FFF6         	movff	??_Send_String,tblptrl
   252   0010C4                     	if	0	;There is only one active tblptr byte
   253   0010C4                     	endif
   254   0010C4                     	if	0	;tblptru may be non-zero
   255   0010C4                     	endif
   256   0010C4                     	if	0	;tblptru may be non-zero
   257   0010C4                     	endif
   258   0010C4  0008               	tblrd		*
   259   0010C6  CFF5 F003          	movff	tablat,Send_Instruction_Data@Data
   260   0010CA  0E01               	movlw	1
   261   0010CC  ECB8  F008         	call	_Send_Instruction_Data
   262   0010D0                     
   263                           ;main.c: 128:     }
   264   0010D0  2A07               	incf	Send_String@i^0,f,c
   265   0010D2                     l828:
   266   0010D2  5005               	movf	Send_String@String^0,w,c
   267   0010D4  2407               	addwf	Send_String@i^0,w,c
   268   0010D6  6E06               	movwf	??_Send_String^0,c
   269   0010D8  C006  FFF6         	movff	??_Send_String,tblptrl
   270   0010DC                     	if	0	;There is only one active tblptr byte
   271   0010DC                     	endif
   272   0010DC                     	if	0	;tblptru may be non-zero
   273   0010DC                     	endif
   274   0010DC                     	if	0	;tblptru may be non-zero
   275   0010DC                     	endif
   276   0010DC  0008               	tblrd		*
   277   0010DE  50F5               	movf	tablat,w,c
   278   0010E0  0900               	iorlw	0
   279   0010E2  A4D8               	btfss	status,2,c
   280   0010E4  EF76  F008         	goto	u41
   281   0010E8  EF78  F008         	goto	u40
   282   0010EC                     u41:
   283   0010EC  EF5D  F008         	goto	l824
   284   0010F0                     u40:
   285   0010F0  0012               	return		;funcret
   286   0010F2                     __end_of_Send_String:
   287                           	callstack 0
   288                           
   289 ;; *************** function _Init_LCD *****************
   290 ;; Defined at:
   291 ;;		line 81 in file "main.c"
   292 ;; Parameters:    Size  Location     Type
   293 ;;		None
   294 ;; Auto vars:     Size  Location     Type
   295 ;;		None
   296 ;; Return value:  Size  Location     Type
   297 ;;                  1    wreg      void 
   298 ;; Registers used:
   299 ;;		wreg, status,2, status,0, cstack
   300 ;; Tracked objects:
   301 ;;		On entry : 0/0
   302 ;;		On exit  : 0/0
   303 ;;		Unchanged: 0/0
   304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   307 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   308 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   309 ;;Total ram usage:        2 bytes
   310 ;; Hardware stack levels used: 1
   311 ;; Hardware stack levels required when called: 2
   312 ;; This function calls:
   313 ;;		_Send_Instruction_Data
   314 ;; This function is called by:
   315 ;;		_main
   316 ;; This function uses a non-reentrant model
   317 ;;
   318                           
   319                           	psect	text2
   320   001010                     __ptext2:
   321                           	callstack 0
   322   001010                     _Init_LCD:
   323                           	callstack 28
   324   001010                     
   325                           ;main.c: 83:     _delay((unsigned long)((60)*(16000000/4000.0)));
   326   001010  0E02               	movlw	2
   327   001012  6E06               	movwf	(??_Init_LCD+1)^0,c
   328   001014  0E38               	movlw	56
   329   001016  6E05               	movwf	??_Init_LCD^0,c
   330   001018  0EAD               	movlw	173
   331   00101A                     u57:
   332   00101A  2EE8               	decfsz	wreg,f,c
   333   00101C  D7FE               	bra	u57
   334   00101E  2E05               	decfsz	??_Init_LCD^0,f,c
   335   001020  D7FC               	bra	u57
   336   001022  2E06               	decfsz	(??_Init_LCD+1)^0,f,c
   337   001024  D7FA               	bra	u57
   338   001026  0000               	nop	
   339   001028                     
   340                           ;main.c: 84:     Send_Instruction_Data(0, 0x30);
   341   001028  0E30               	movlw	48
   342   00102A  6E03               	movwf	Send_Instruction_Data@Data^0,c
   343   00102C  0E00               	movlw	0
   344   00102E  ECB8  F008         	call	_Send_Instruction_Data
   345   001032                     
   346                           ;main.c: 85:     _delay((unsigned long)((5)*(16000000/4000.0)));
   347   001032  0E1A               	movlw	26
   348   001034  6E05               	movwf	??_Init_LCD^0,c
   349   001036  0EF8               	movlw	248
   350   001038                     u67:
   351   001038  2EE8               	decfsz	wreg,f,c
   352   00103A  D7FE               	bra	u67
   353   00103C  2E05               	decfsz	??_Init_LCD^0,f,c
   354   00103E  D7FC               	bra	u67
   355   001040  D000               	nop2	
   356                           
   357                           ;main.c: 86:     Send_Instruction_Data(0, 0x30);
   358   001042  0E30               	movlw	48
   359   001044  6E03               	movwf	Send_Instruction_Data@Data^0,c
   360   001046  0E00               	movlw	0
   361   001048  ECB8  F008         	call	_Send_Instruction_Data
   362   00104C                     
   363                           ;main.c: 87:     _delay((unsigned long)((5)*(16000000/4000.0)));
   364   00104C  0E1A               	movlw	26
   365   00104E  6E05               	movwf	??_Init_LCD^0,c
   366   001050  0EF8               	movlw	248
   367   001052                     u77:
   368   001052  2EE8               	decfsz	wreg,f,c
   369   001054  D7FE               	bra	u77
   370   001056  2E05               	decfsz	??_Init_LCD^0,f,c
   371   001058  D7FC               	bra	u77
   372   00105A  D000               	nop2	
   373   00105C                     
   374                           ;main.c: 88:     Send_Instruction_Data(0, 0x30);
   375   00105C  0E30               	movlw	48
   376   00105E  6E03               	movwf	Send_Instruction_Data@Data^0,c
   377   001060  0E00               	movlw	0
   378   001062  ECB8  F008         	call	_Send_Instruction_Data
   379   001066                     
   380                           ;main.c: 89:     Send_Instruction_Data(0, 0x02);
   381   001066  0E02               	movlw	2
   382   001068  6E03               	movwf	Send_Instruction_Data@Data^0,c
   383   00106A  0E00               	movlw	0
   384   00106C  ECB8  F008         	call	_Send_Instruction_Data
   385   001070                     
   386                           ;main.c: 90:     Send_Instruction_Data(0, 0x06);
   387   001070  0E06               	movlw	6
   388   001072  6E03               	movwf	Send_Instruction_Data@Data^0,c
   389   001074  0E00               	movlw	0
   390   001076  ECB8  F008         	call	_Send_Instruction_Data
   391   00107A                     
   392                           ;main.c: 91:     Send_Instruction_Data(0, 0x0F);
   393   00107A  0E0F               	movlw	15
   394   00107C  6E03               	movwf	Send_Instruction_Data@Data^0,c
   395   00107E  0E00               	movlw	0
   396   001080  ECB8  F008         	call	_Send_Instruction_Data
   397   001084                     
   398                           ;main.c: 92:     Send_Instruction_Data(0, 0x28);
   399   001084  0E28               	movlw	40
   400   001086  6E03               	movwf	Send_Instruction_Data@Data^0,c
   401   001088  0E00               	movlw	0
   402   00108A  ECB8  F008         	call	_Send_Instruction_Data
   403   00108E                     
   404                           ;main.c: 93:     Send_Instruction_Data(0, 0x01);
   405   00108E  0E01               	movlw	1
   406   001090  6E03               	movwf	Send_Instruction_Data@Data^0,c
   407   001092  0E00               	movlw	0
   408   001094  ECB8  F008         	call	_Send_Instruction_Data
   409   001098                     
   410                           ;main.c: 94:     _delay((unsigned long)((100)*(16000000/4000.0)));
   411   001098  0E03               	movlw	3
   412   00109A  6E06               	movwf	(??_Init_LCD+1)^0,c
   413   00109C  0E08               	movlw	8
   414   00109E  6E05               	movwf	??_Init_LCD^0,c
   415   0010A0  0E77               	movlw	119
   416   0010A2                     u87:
   417   0010A2  2EE8               	decfsz	wreg,f,c
   418   0010A4  D7FE               	bra	u87
   419   0010A6  2E05               	decfsz	??_Init_LCD^0,f,c
   420   0010A8  D7FC               	bra	u87
   421   0010AA  2E06               	decfsz	(??_Init_LCD+1)^0,f,c
   422   0010AC  D7FA               	bra	u87
   423   0010AE  0000               	nop	
   424   0010B0  0012               	return		;funcret
   425   0010B2                     __end_of_Init_LCD:
   426                           	callstack 0
   427                           
   428 ;; *************** function _Send_Instruction_Data *****************
   429 ;; Defined at:
   430 ;;		line 100 in file "main.c"
   431 ;; Parameters:    Size  Location     Type
   432 ;;  Instruction     1    wreg     unsigned char 
   433 ;;  Data            1    2[COMRAM] unsigned char 
   434 ;; Auto vars:     Size  Location     Type
   435 ;;  Instruction     1    3[COMRAM] unsigned char 
   436 ;; Return value:  Size  Location     Type
   437 ;;                  1    wreg      void 
   438 ;; Registers used:
   439 ;;		wreg, status,2, status,0, cstack
   440 ;; Tracked objects:
   441 ;;		On entry : 0/0
   442 ;;		On exit  : 0/0
   443 ;;		Unchanged: 0/0
   444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   445 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   446 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   448 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   449 ;;Total ram usage:        2 bytes
   450 ;; Hardware stack levels used: 1
   451 ;; Hardware stack levels required when called: 1
   452 ;; This function calls:
   453 ;;		_LCD_Instruction
   454 ;; This function is called by:
   455 ;;		_main
   456 ;;		_Init_LCD
   457 ;;		_Send_String
   458 ;; This function uses a non-reentrant model
   459 ;;
   460                           
   461                           	psect	text3
   462   001170                     __ptext3:
   463                           	callstack 0
   464   001170                     _Send_Instruction_Data:
   465                           	callstack 28
   466                           
   467                           ;incstack = 0
   468                           ;Send_Instruction_Data@Instruction stored from wreg
   469   001170  6E04               	movwf	Send_Instruction_Data@Instruction^0,c
   470   001172                     
   471                           ;main.c: 102:     LATCbits.LATC4 = Instruction;
   472   001172  B004               	btfsc	Send_Instruction_Data@Instruction^0,0,c
   473   001174  D002               	bra	u35
   474   001176  988B               	bcf	139,4,c	;volatile
   475   001178  D001               	bra	u36
   476   00117A                     u35:
   477   00117A  888B               	bsf	139,4,c	;volatile
   478   00117C                     u36:
   479   00117C                     
   480                           ;main.c: 103:     LCD_Instruction(Data >> 4);
   481   00117C  3803               	swapf	Send_Instruction_Data@Data^0,w,c
   482   00117E  0B0F               	andlw	15
   483   001180  EC79  F008         	call	_LCD_Instruction
   484   001184                     
   485                           ;main.c: 104:     LCD_Instruction(Data);
   486   001184  5003               	movf	Send_Instruction_Data@Data^0,w,c
   487   001186  EC79  F008         	call	_LCD_Instruction
   488   00118A  0012               	return		;funcret
   489   00118C                     __end_of_Send_Instruction_Data:
   490                           	callstack 0
   491                           
   492 ;; *************** function _LCD_Instruction *****************
   493 ;; Defined at:
   494 ;;		line 109 in file "main.c"
   495 ;; Parameters:    Size  Location     Type
   496 ;;  Instruction     1    wreg     unsigned char 
   497 ;; Auto vars:     Size  Location     Type
   498 ;;  Instruction     1    1[COMRAM] unsigned char 
   499 ;; Return value:  Size  Location     Type
   500 ;;                  1    wreg      void 
   501 ;; Registers used:
   502 ;;		wreg, status,2, cstack
   503 ;; Tracked objects:
   504 ;;		On entry : 0/0
   505 ;;		On exit  : 0/0
   506 ;;		Unchanged: 0/0
   507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   509 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   510 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   511 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   512 ;;Total ram usage:        2 bytes
   513 ;; Hardware stack levels used: 1
   514 ;; This function calls:
   515 ;;		Nothing
   516 ;; This function is called by:
   517 ;;		_Send_Instruction_Data
   518 ;; This function uses a non-reentrant model
   519 ;;
   520                           
   521                           	psect	text4
   522   0010F2                     __ptext4:
   523                           	callstack 0
   524   0010F2                     _LCD_Instruction:
   525                           	callstack 28
   526                           
   527                           ;incstack = 0
   528                           ;LCD_Instruction@Instruction stored from wreg
   529   0010F2  6E02               	movwf	LCD_Instruction@Instruction^0,c
   530   0010F4                     
   531                           ;main.c: 111:     LATCbits.LATC5 = 1;
   532   0010F4  8A8B               	bsf	139,5,c	;volatile
   533   0010F6                     
   534                           ;main.c: 112:     _delay((unsigned long)((15)*(16000000/4000.0)));
   535   0010F6  0E4E               	movlw	78
   536   0010F8  6E01               	movwf	??_LCD_Instruction^0,c
   537   0010FA  0EEB               	movlw	235
   538   0010FC                     u97:
   539   0010FC  2EE8               	decfsz	wreg,f,c
   540   0010FE  D7FE               	bra	u97
   541   001100  2E01               	decfsz	??_LCD_Instruction^0,f,c
   542   001102  D7FC               	bra	u97
   543   001104  0000               	nop	
   544   001106                     
   545                           ;main.c: 113:     LATD = Instruction;
   546   001106  C002  FF8C         	movff	LCD_Instruction@Instruction,3980	;volatile
   547   00110A                     
   548                           ;main.c: 114:     _delay((unsigned long)((15)*(16000000/4000.0)));
   549   00110A  0E4E               	movlw	78
   550   00110C  6E01               	movwf	??_LCD_Instruction^0,c
   551   00110E  0EEB               	movlw	235
   552   001110                     u107:
   553   001110  2EE8               	decfsz	wreg,f,c
   554   001112  D7FE               	bra	u107
   555   001114  2E01               	decfsz	??_LCD_Instruction^0,f,c
   556   001116  D7FC               	bra	u107
   557   001118  0000               	nop	
   558   00111A                     
   559                           ;main.c: 115:     LATCbits.LATC5 = 0;
   560   00111A  9A8B               	bcf	139,5,c	;volatile
   561   00111C                     
   562                           ;main.c: 116:     _delay((unsigned long)((15)*(16000000/4000.0)));
   563   00111C  0E4E               	movlw	78
   564   00111E  6E01               	movwf	??_LCD_Instruction^0,c
   565   001120  0EEB               	movlw	235
   566   001122                     u117:
   567   001122  2EE8               	decfsz	wreg,f,c
   568   001124  D7FE               	bra	u117
   569   001126  2E01               	decfsz	??_LCD_Instruction^0,f,c
   570   001128  D7FC               	bra	u117
   571   00112A  0000               	nop	
   572   00112C  0012               	return		;funcret
   573   00112E                     __end_of_LCD_Instruction:
   574                           	callstack 0
   575                           
   576 ;; *************** function _Configurations *****************
   577 ;; Defined at:
   578 ;;		line 60 in file "main.c"
   579 ;; Parameters:    Size  Location     Type
   580 ;;		None
   581 ;; Auto vars:     Size  Location     Type
   582 ;;		None
   583 ;; Return value:  Size  Location     Type
   584 ;;                  1    wreg      void 
   585 ;; Registers used:
   586 ;;		wreg, status,2
   587 ;; Tracked objects:
   588 ;;		On entry : 0/0
   589 ;;		On exit  : 0/0
   590 ;;		Unchanged: 0/0
   591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   596 ;;Total ram usage:        0 bytes
   597 ;; Hardware stack levels used: 1
   598 ;; This function calls:
   599 ;;		Nothing
   600 ;; This function is called by:
   601 ;;		_main
   602 ;; This function uses a non-reentrant model
   603 ;;
   604                           
   605                           	psect	text5
   606   001150                     __ptext5:
   607                           	callstack 0
   608   001150                     _Configurations:
   609                           	callstack 30
   610   001150                     
   611                           ;main.c: 62:     OSCCON = 0x72;
   612   001150  0E72               	movlw	114
   613   001152  6ED3               	movwf	211,c	;volatile
   614                           
   615                           ;main.c: 64:     ANSELC = 0;
   616   001154  0E00               	movlw	0
   617   001156  010F               	movlb	15	; () banked
   618   001158  6F3A               	movwf	58,b	;volatile
   619                           
   620                           ;main.c: 65:     ANSELD = 0;
   621   00115A  0E00               	movlw	0
   622   00115C  6F3B               	movwf	59,b	;volatile
   623   00115E                     
   624                           ; BSR set to: 15
   625                           ;main.c: 67:     TRISCbits.RC4 = 0;
   626   00115E  9894               	bcf	148,4,c	;volatile
   627   001160                     
   628                           ; BSR set to: 15
   629                           ;main.c: 68:     TRISCbits.RC5 = 0;
   630   001160  9A94               	bcf	148,5,c	;volatile
   631                           
   632                           ;main.c: 70:     TRISD = 0;
   633   001162  0E00               	movlw	0
   634   001164  6E95               	movwf	149,c	;volatile
   635   001166                     
   636                           ; BSR set to: 15
   637                           ;main.c: 72:     LATCbits.LC4 = 0;
   638   001166  988B               	bcf	139,4,c	;volatile
   639   001168                     
   640                           ; BSR set to: 15
   641                           ;main.c: 73:     LATCbits.LC5 = 0;
   642   001168  9A8B               	bcf	139,5,c	;volatile
   643                           
   644                           ;main.c: 75:     LATD = 0;
   645   00116A  0E00               	movlw	0
   646   00116C  6E8C               	movwf	140,c	;volatile
   647   00116E                     
   648                           ; BSR set to: 15
   649   00116E  0012               	return		;funcret
   650   001170                     __end_of_Configurations:
   651                           	callstack 0
   652                           
   653                           	psect	rparam
   654   000000                     
   655                           	psect	config
   656                           
   657                           ; Padding undefined space
   658   300000                     	org	3145728
   659   300000  FF                 	db	255
   660                           
   661                           ;Config register CONFIG1H @ 0x300001
   662                           ;	Oscillator Selection bits
   663                           ;	FOSC = INTIO67, Internal oscillator block
   664                           ;	4X PLL Enable
   665                           ;	PLLCFG = OFF, Oscillator used directly
   666                           ;	Primary clock enable bit
   667                           ;	PRICLKEN = ON, Primary clock is always enabled
   668                           ;	Fail-Safe Clock Monitor Enable bit
   669                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   670                           ;	Internal/External Oscillator Switchover bit
   671                           ;	IESO = OFF, Oscillator Switchover mode disabled
   672   300001                     	org	3145729
   673   300001  28                 	db	40
   674                           
   675                           ;Config register CONFIG2L @ 0x300002
   676                           ;	Power-up Timer Enable bit
   677                           ;	PWRTEN = OFF, Power up timer disabled
   678                           ;	Brown-out Reset Enable bits
   679                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
   680                           ;	Brown Out Reset Voltage bits
   681                           ;	BORV = 190, VBOR set to 1.90 V nominal
   682   300002                     	org	3145730
   683   300002  1F                 	db	31
   684                           
   685                           ;Config register CONFIG2H @ 0x300003
   686                           ;	Watchdog Timer Enable bits
   687                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
   688                           ;	Watchdog Timer Postscale Select bits
   689                           ;	WDTPS = 32768, 1:32768
   690   300003                     	org	3145731
   691   300003  3C                 	db	60
   692                           
   693                           ; Padding undefined space
   694   300004                     	org	3145732
   695   300004  FF                 	db	255
   696                           
   697                           ;Config register CONFIG3H @ 0x300005
   698                           ;	CCP2 MUX bit
   699                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
   700                           ;	PORTB A/D Enable bit
   701                           ;	PBADEN = ON, PORTB<5:0> pins are configured as analog input channels on Reset
   702                           ;	P3A/CCP3 Mux bit
   703                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
   704                           ;	HFINTOSC Fast Start-up
   705                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
   706                           ;	Timer3 Clock input mux bit
   707                           ;	T3CMX = PORTC0, T3CKI is on RC0
   708                           ;	ECCP2 B output mux bit
   709                           ;	P2BMX = PORTD2, P2B is on RD2
   710                           ;	MCLR Pin Enable bit
   711                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
   712   300005                     	org	3145733
   713   300005  BF                 	db	191
   714                           
   715                           ;Config register CONFIG4L @ 0x300006
   716                           ;	Stack Full/Underflow Reset Enable bit
   717                           ;	STVREN = ON, Stack full/underflow will cause Reset
   718                           ;	Single-Supply ICSP Enable bit
   719                           ;	LVP = OFF, Single-Supply ICSP disabled
   720                           ;	Extended Instruction Set Enable bit
   721                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   722                           ;	Background Debug
   723                           ;	DEBUG = 0x1, unprogrammed default
   724   300006                     	org	3145734
   725   300006  81                 	db	129
   726                           
   727                           ; Padding undefined space
   728   300007                     	org	3145735
   729   300007  FF                 	db	255
   730                           
   731                           ;Config register CONFIG5L @ 0x300008
   732                           ;	Code Protection Block 0
   733                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
   734                           ;	Code Protection Block 1
   735                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
   736                           ;	Code Protection Block 2
   737                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
   738                           ;	Code Protection Block 3
   739                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
   740   300008                     	org	3145736
   741   300008  0F                 	db	15
   742                           
   743                           ;Config register CONFIG5H @ 0x300009
   744                           ;	Boot Block Code Protection bit
   745                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
   746                           ;	Data EEPROM Code Protection bit
   747                           ;	CPD = OFF, Data EEPROM not code-protected
   748   300009                     	org	3145737
   749   300009  C0                 	db	192
   750                           
   751                           ;Config register CONFIG6L @ 0x30000A
   752                           ;	Write Protection Block 0
   753                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
   754                           ;	Write Protection Block 1
   755                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
   756                           ;	Write Protection Block 2
   757                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
   758                           ;	Write Protection Block 3
   759                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
   760   30000A                     	org	3145738
   761   30000A  0F                 	db	15
   762                           
   763                           ;Config register CONFIG6H @ 0x30000B
   764                           ;	Configuration Register Write Protection bit
   765                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
   766                           ;	Boot Block Write Protection bit
   767                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
   768                           ;	Data EEPROM Write Protection bit
   769                           ;	WRTD = OFF, Data EEPROM not write-protected
   770   30000B                     	org	3145739
   771   30000B  E0                 	db	224
   772                           
   773                           ;Config register CONFIG7L @ 0x30000C
   774                           ;	Table Read Protection Block 0
   775                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
   776                           ;	Table Read Protection Block 1
   777                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
   778                           ;	Table Read Protection Block 2
   779                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
   780                           ;	Table Read Protection Block 3
   781                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
   782   30000C                     	org	3145740
   783   30000C  0F                 	db	15
   784                           
   785                           ;Config register CONFIG7H @ 0x30000D
   786                           ;	Boot Block Table Read Protection bit
   787                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
   788   30000D                     	org	3145741
   789   30000D  40                 	db	64
   790                           tosu	equ	0xFFF
   791                           tosh	equ	0xFFE
   792                           tosl	equ	0xFFD
   793                           stkptr	equ	0xFFC
   794                           pclatu	equ	0xFFB
   795                           pclath	equ	0xFFA
   796                           pcl	equ	0xFF9
   797                           tblptru	equ	0xFF8
   798                           tblptrh	equ	0xFF7
   799                           tblptrl	equ	0xFF6
   800                           tablat	equ	0xFF5
   801                           prodh	equ	0xFF4
   802                           prodl	equ	0xFF3
   803                           indf0	equ	0xFEF
   804                           postinc0	equ	0xFEE
   805                           postdec0	equ	0xFED
   806                           preinc0	equ	0xFEC
   807                           plusw0	equ	0xFEB
   808                           fsr0h	equ	0xFEA
   809                           fsr0l	equ	0xFE9
   810                           wreg	equ	0xFE8
   811                           indf1	equ	0xFE7
   812                           postinc1	equ	0xFE6
   813                           postdec1	equ	0xFE5
   814                           preinc1	equ	0xFE4
   815                           plusw1	equ	0xFE3
   816                           fsr1h	equ	0xFE2
   817                           fsr1l	equ	0xFE1
   818                           bsr	equ	0xFE0
   819                           indf2	equ	0xFDF
   820                           postinc2	equ	0xFDE
   821                           postdec2	equ	0xFDD
   822                           preinc2	equ	0xFDC
   823                           plusw2	equ	0xFDB
   824                           fsr2h	equ	0xFDA
   825                           fsr2l	equ	0xFD9
   826                           status	equ	0xFD8

Data Sizes:
    Strings     13
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      7       7
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    Send_String@String	PTR unsigned char  size(1) Largest target is 13
		 -> STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_Send_String
    _Send_String->_Send_Instruction_Data
    _Init_LCD->_Send_Instruction_Data
    _Send_Instruction_Data->_LCD_Instruction

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2689
                     _Configurations
                           _Init_LCD
              _Send_Instruction_Data
                        _Send_String
 ---------------------------------------------------------------------------------
 (1) _Send_String                                          3     2      1    1007
                                              4 COMRAM     3     2      1
              _Send_Instruction_Data
 ---------------------------------------------------------------------------------
 (1) _Init_LCD                                             2     2      0     841
                                              4 COMRAM     2     2      0
              _Send_Instruction_Data
 ---------------------------------------------------------------------------------
 (2) _Send_Instruction_Data                                2     1      1     841
                                              2 COMRAM     2     1      1
                    _LCD_Instruction
 ---------------------------------------------------------------------------------
 (3) _LCD_Instruction                                      2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Configurations                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Configurations
   _Init_LCD
     _Send_Instruction_Data
       _LCD_Instruction
   _Send_Instruction_Data
   _Send_String
     _Send_Instruction_Data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      7       7       1        7.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
ABS                  0      0       0      28        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITBIGSFRh          2C      0       0      37        0.0%
BITBIGSFRlhh        3D      0       0      38        0.0%
BITBIGSFRlhlh        7      0       0      39        0.0%
BITBIGSFRlhll       4F      0       0      40        0.0%
BITBIGSFRll          2      0       0      41        0.0%
BIGRAM             F37      0       0      42        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Wed Feb 14 18:31:10 2024

                              l31 1148                                l40 10B0                                l32 1148  
                              l43 118A                                l52 10F0                                l37 116E  
                              l46 112C                                u40 10F0                                u41 10EC  
                              u35 117A                                u36 117C                                u57 101A  
                              u67 1038                                u77 1052                                u87 10A2  
                              u97 10FC                 Send_String@String 0005                               l800 1010  
                             l730 10F6                               l810 1066                               l802 1028  
                             l732 1106                               l820 1098                               l812 1070  
                             l804 1032                               l750 1160                               l734 110A  
                             l814 107A                               l806 104C                               l822 10B2  
                             l830 112E                               l752 1166                               l736 111A  
                             l728 10F4                               l816 1084                               l808 105C  
                             l824 10BA                               l832 1132                               l754 1168  
                             l746 1150                               l738 111C                               l818 108E  
                             l826 10D0                               l834 1136                               l748 115E  
                             l828 10D2                               l836 1140                               l794 1172  
                             l796 117C                               l798 1184                               u107 1110  
                             u117 1122                               wreg 0FE8                              STR_1 1001  
                            _LATD 0F8C                              _main 112E                              start 0000  
                    ___param_bank 0000                   _LCD_Instruction 10F2  Send_Instruction_Data@Instruction 0004  
                           ?_main 0001                             _TRISD 0F95                             tablat 0FF5  
                           status 0FD8                   __initialization 118C                      __end_of_main 1150  
                __end_of_Init_LCD 10B2             _Send_Instruction_Data 1170                            ??_main 0008  
                   ??_Send_String 0006                     __activetblptr 0001                            _ANSELC 0F3A  
                          _ANSELD 0F3B        LCD_Instruction@Instruction 0002                            _OSCCON 0FD3  
         __end_of_LCD_Instruction 112E                            isa$std 0001                      __mediumconst 0000  
                          tblptrh 0FF7                            tblptrl 0FF6                            tblptru 0FF8  
             __end_of_Send_String 10F2                        __accesstop 0060           __end_of__initialization 118C  
                   ___rparam_used 0001                    __pcstackCOMRAM 0001            ?_Send_Instruction_Data 0003  
                       ?_Init_LCD 0001                  ?_LCD_Instruction 0001                       _Send_String 10B2  
                      ??_Init_LCD 0005                           __Hparam 0000                           __Lparam 0000  
                    __psmallconst 1000                           __pcinit 118C                           __ramtop 1000  
                         __ptext0 112E                           __ptext1 10B2                           __ptext2 1010  
                         __ptext3 1170                           __ptext4 10F2                           __ptext5 1150  
            end_of_initialization 118C                         _TRISCbits 0F94           ??_Send_Instruction_Data 0004  
             start_initialization 118C                      Send_String@i 0007         Send_Instruction_Data@Data 0003  
                  _Configurations 1150                      ?_Send_String 0005            __end_of_Configurations 1170  
                     __smallconst 1000                   ?_Configurations 0001                          _LATCbits 0F8B  
                        _Init_LCD 1010                          __Hrparam 0000                          __Lrparam 0000  
                    __Lsmallconst 1000     __end_of_Send_Instruction_Data 118C                 ??_LCD_Instruction 0001  
                        isa$xinst 0000                  ??_Configurations 0001  
