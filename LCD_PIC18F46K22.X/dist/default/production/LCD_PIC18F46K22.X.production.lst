

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Wed Jan 24 01:33:03 2024

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21   000000                     
    22                           ; Generated 09/02/2023 GMT
    23                           ; 
    24                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F46K22 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56   000000                     
    57                           	psect	idataCOMRAM
    58   00FDA0                     __pidataCOMRAM:
    59                           	callstack 0
    60                           
    61                           ;initializer for _Text3
    62   00FDA0  57                 	db	87
    63   00FDA1  65                 	db	101
    64   00FDA2  6C                 	db	108
    65   00FDA3  63                 	db	99
    66   00FDA4  6F                 	db	111
    67   00FDA5  6D                 	db	109
    68   00FDA6  65                 	db	101
    69   00FDA7  20                 	db	32
    70   00FDA8  74                 	db	116
    71   00FDA9  6F                 	db	111
    72   00FDAA  20                 	db	32
    73   00FDAB  74                 	db	116
    74   00FDAC  68                 	db	104
    75   00FDAD  69                 	db	105
    76   00FDAE  73                 	db	115
    77   00FDAF  00                 	db	0
    78   00FDB0  00                 	db	0
    79   00FDB1  00                 	db	0
    80   00FDB2  00                 	db	0
    81   00FDB3  00                 	db	0
    82   00FDB4  00                 	db	0
    83   00FDB5  00                 	db	0
    84   00FDB6  00                 	db	0
    85   00FDB7  00                 	db	0
    86   00FDB8  00                 	db	0
    87   00FDB9  00                 	db	0
    88   00FDBA  00                 	db	0
    89   00FDBB  00                 	db	0
    90   00FDBC  00                 	db	0
    91   00FDBD  00                 	db	0
    92                           
    93                           ;initializer for _Text2
    94   00FDBE  4D                 	db	77
    95   00FDBF  79                 	db	121
    96   00FDC0  20                 	db	32
    97   00FDC1  6C                 	db	108
    98   00FDC2  6F                 	db	111
    99   00FDC3  76                 	db	118
   100   00FDC4  65                 	db	101
   101   00FDC5  21                 	db	33
   102   00FDC6  00                 	db	0
   103   00FDC7  00                 	db	0
   104   00FDC8  00                 	db	0
   105   00FDC9  00                 	db	0
   106   00FDCA  00                 	db	0
   107   00FDCB  00                 	db	0
   108   00FDCC  00                 	db	0
   109   00FDCD  00                 	db	0
   110   00FDCE  00                 	db	0
   111   00FDCF  00                 	db	0
   112   00FDD0  00                 	db	0
   113   00FDD1  00                 	db	0
   114   00FDD2  00                 	db	0
   115   00FDD3  00                 	db	0
   116   00FDD4  00                 	db	0
   117   00FDD5  00                 	db	0
   118   00FDD6  00                 	db	0
   119   00FDD7  00                 	db	0
   120                           
   121                           ;initializer for _Text1
   122   00FDD8  48                 	db	72
   123   00FDD9  65                 	db	101
   124   00FDDA  6C                 	db	108
   125   00FDDB  6C                 	db	108
   126   00FDDC  6F                 	db	111
   127   00FDDD  21                 	db	33
   128   00FDDE  00                 	db	0
   129   00FDDF  00                 	db	0
   130   00FDE0  00                 	db	0
   131   00FDE1  00                 	db	0
   132   00FDE2  00                 	db	0
   133   00FDE3  00                 	db	0
   134   00FDE4  00                 	db	0
   135   00FDE5  00                 	db	0
   136   00FDE6  00                 	db	0
   137   00FDE7  00                 	db	0
   138   00FDE8  00                 	db	0
   139   00FDE9  00                 	db	0
   140   00FDEA  00                 	db	0
   141   00FDEB  00                 	db	0
   142                           
   143                           	psect	idataBANK0
   144   00FCAA                     __pidataBANK0:
   145                           	callstack 0
   146                           
   147                           ;initializer for _Text4
   148   00FCAA  4D                 	db	77
   149   00FCAB  69                 	db	105
   150   00FCAC  63                 	db	99
   151   00FCAD  72                 	db	114
   152   00FCAE  6F                 	db	111
   153   00FCAF  63                 	db	99
   154   00FCB0  6F                 	db	111
   155   00FCB1  6E                 	db	110
   156   00FCB2  74                 	db	116
   157   00FCB3  72                 	db	114
   158   00FCB4  6F                 	db	111
   159   00FCB5  6C                 	db	108
   160   00FCB6  6C                 	db	108
   161   00FCB7  65                 	db	101
   162   00FCB8  72                 	db	114
   163   00FCB9  21                 	db	33
   164   00FCBA  00                 	db	0
   165   00FCBB  00                 	db	0
   166   00FCBC  00                 	db	0
   167   00FCBD  00                 	db	0
   168   00FCBE  00                 	db	0
   169   00FCBF  00                 	db	0
   170   00FCC0  00                 	db	0
   171   00FCC1  00                 	db	0
   172   00FCC2  00                 	db	0
   173   00FCC3  00                 	db	0
   174   00FCC4  00                 	db	0
   175   00FCC5  00                 	db	0
   176   00FCC6  00                 	db	0
   177   00FCC7  00                 	db	0
   178   000000                     _LATCbits	set	3979
   179   000000                     _ANSELCbits	set	3898
   180   000000                     _ANSELD	set	3899
   181   000000                     _OSCCON	set	4051
   182   000000                     _LATC	set	3979
   183   000000                     _TRISCbits	set	3988
   184   000000                     _TRISD	set	3989
   185   000000                     _LATD	set	3980
   186                           
   187                           ; #config settings
   188                           
   189                           	psect	cinit
   190   00FD5A                     __pcinit:
   191                           	callstack 0
   192   00FD5A                     start_initialization:
   193                           	callstack 0
   194   00FD5A                     __initialization:
   195                           	callstack 0
   196                           
   197                           ; Initialize objects allocated to BANK0 (30 bytes)
   198                           ; load TBLPTR registers with __pidataBANK0
   199   00FD5A  0EAA               	movlw	low __pidataBANK0
   200   00FD5C  6EF6               	movwf	tblptrl,c
   201   00FD5E  0EFC               	movlw	high __pidataBANK0
   202   00FD60  6EF7               	movwf	tblptrh,c
   203   00FD62  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   204   00FD64  6EF8               	movwf	tblptru,c
   205   00FD66  EE00  F060         	lfsr	0,__pdataBANK0
   206   00FD6A  EE10 F01E          	lfsr	1,30
   207   00FD6E                     copy_data0:
   208   00FD6E  0009               	tblrd		*+
   209   00FD70  CFF5 FFEE          	movff	tablat,postinc0
   210   00FD74  50E5               	movf	postdec1,w,c
   211   00FD76  50E1               	movf	fsr1l,w,c
   212   00FD78  E1FA               	bnz	copy_data0
   213                           
   214                           ; Initialize objects allocated to COMRAM (76 bytes)
   215                           ; load TBLPTR registers with __pidataCOMRAM
   216   00FD7A  0EA0               	movlw	low __pidataCOMRAM
   217   00FD7C  6EF6               	movwf	tblptrl,c
   218   00FD7E  0EFD               	movlw	high __pidataCOMRAM
   219   00FD80  6EF7               	movwf	tblptrh,c
   220   00FD82  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   221   00FD84  6EF8               	movwf	tblptru,c
   222   00FD86  EE00  F001         	lfsr	0,__pdataCOMRAM
   223   00FD8A  EE10 F04C          	lfsr	1,76
   224   00FD8E                     copy_data1:
   225   00FD8E  0009               	tblrd		*+
   226   00FD90  CFF5 FFEE          	movff	tablat,postinc0
   227   00FD94  50E5               	movf	postdec1,w,c
   228   00FD96  50E1               	movf	fsr1l,w,c
   229   00FD98  E1FA               	bnz	copy_data1
   230   00FD9A                     end_of_initialization:
   231                           	callstack 0
   232   00FD9A                     __end_of__initialization:
   233                           	callstack 0
   234   00FD9A  0100               	movlb	0
   235   00FD9C  EF3D  F07E         	goto	_main	;jump to C main() function
   236                           
   237                           	psect	dataCOMRAM
   238   000001                     __pdataCOMRAM:
   239                           	callstack 0
   240   000001                     _Text3:
   241                           	callstack 0
   242   000001                     	ds	30
   243   00001F                     _Text2:
   244                           	callstack 0
   245   00001F                     	ds	26
   246   000039                     _Text1:
   247                           	callstack 0
   248   000039                     	ds	20
   249                           
   250                           	psect	dataBANK0
   251   000060                     __pdataBANK0:
   252                           	callstack 0
   253   000060                     _Text4:
   254                           	callstack 0
   255   000060                     	ds	30
   256                           
   257                           	psect	cstackCOMRAM
   258   00004D                     __pcstackCOMRAM:
   259                           	callstack 0
   260   00004D                     ??_LCD_Instruction:
   261   00004D                     ?_strlen:
   262                           	callstack 0
   263   00004D                     strlen@s:
   264                           	callstack 0
   265                           
   266                           ; 2 bytes @ 0x0
   267   00004D                     	ds	1
   268   00004E                     LCD_Instruction@Instruction:
   269                           	callstack 0
   270                           
   271                           ; 1 bytes @ 0x1
   272   00004E                     	ds	1
   273   00004F                     Send_Instruction_Data@Data:
   274                           	callstack 0
   275   00004F                     strlen@a:
   276                           	callstack 0
   277                           
   278                           ; 2 bytes @ 0x2
   279   00004F                     	ds	1
   280   000050                     Send_Instruction_Data@Instruction:
   281                           	callstack 0
   282                           
   283                           ; 1 bytes @ 0x3
   284   000050                     	ds	1
   285   000051                     ??_Init_LCD:
   286   000051                     ??_Test:
   287                           
   288                           ; 1 bytes @ 0x4
   289   000051                     	ds	2
   290   000053                     Test@i:
   291                           	callstack 0
   292                           
   293                           ; 2 bytes @ 0x6
   294   000053                     	ds	2
   295   000055                     Test@i_203:
   296                           	callstack 0
   297                           
   298                           ; 2 bytes @ 0x8
   299   000055                     	ds	2
   300   000057                     Test@i_204:
   301                           	callstack 0
   302                           
   303                           ; 2 bytes @ 0xA
   304   000057                     	ds	2
   305   000059                     Test@j:
   306                           	callstack 0
   307                           
   308                           ; 2 bytes @ 0xC
   309   000059                     	ds	2
   310   00005B                     
   311                           ; 1 bytes @ 0xE
   312 ;;
   313 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   314 ;;
   315 ;; *************** function _main *****************
   316 ;; Defined at:
   317 ;;		line 46 in file "main.c"
   318 ;; Parameters:    Size  Location     Type
   319 ;;		None
   320 ;; Auto vars:     Size  Location     Type
   321 ;;		None
   322 ;; Return value:  Size  Location     Type
   323 ;;                  1    wreg      void 
   324 ;; Registers used:
   325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   326 ;; Tracked objects:
   327 ;;		On entry : 0/0
   328 ;;		On exit  : 0/0
   329 ;;		Unchanged: 0/0
   330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   335 ;;Total ram usage:        0 bytes
   336 ;; Hardware stack levels required when called: 3
   337 ;; This function calls:
   338 ;;		_Configurations
   339 ;;		_Init_LCD
   340 ;;		_Test
   341 ;; This function is called by:
   342 ;;		Startup code after reset
   343 ;; This function uses a non-reentrant model
   344 ;;
   345                           
   346                           	psect	text0
   347   00FC7A                     __ptext0:
   348                           	callstack 0
   349   00FC7A                     _main:
   350                           	callstack 28
   351   00FC7A                     
   352                           ;main.c: 49:     Configurations();
   353   00FC7A  EC64  F07E         	call	_Configurations	;wreg free
   354   00FC7E                     
   355                           ;main.c: 50:     Init_LCD();
   356   00FC7E  ECF6  F07E         	call	_Init_LCD	;wreg free
   357   00FC82                     
   358                           ;main.c: 51:     Test();
   359   00FC82  EC3E  F07F         	call	_Test	;wreg free
   360   00FC86                     l43:
   361   00FC86  EF43  F07E         	goto	l43
   362   00FC8A  EF00  F000         	goto	start
   363   00FC8E                     __end_of_main:
   364                           	callstack 0
   365                           
   366 ;; *************** function _Test *****************
   367 ;; Defined at:
   368 ;;		line 128 in file "main.c"
   369 ;; Parameters:    Size  Location     Type
   370 ;;		None
   371 ;; Auto vars:     Size  Location     Type
   372 ;;  j               2   12[COMRAM] int 
   373 ;;  i               2   10[COMRAM] int 
   374 ;;  i               2    8[COMRAM] int 
   375 ;;  i               2    6[COMRAM] int 
   376 ;; Return value:  Size  Location     Type
   377 ;;                  1    wreg      void 
   378 ;; Registers used:
   379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   380 ;; Tracked objects:
   381 ;;		On entry : 0/0
   382 ;;		On exit  : 0/0
   383 ;;		Unchanged: 0/0
   384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   386 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   387 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   388 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   389 ;;Total ram usage:       10 bytes
   390 ;; Hardware stack levels used: 1
   391 ;; Hardware stack levels required when called: 2
   392 ;; This function calls:
   393 ;;		_Send_Instruction_Data
   394 ;;		_strlen
   395 ;; This function is called by:
   396 ;;		_main
   397 ;; This function uses a non-reentrant model
   398 ;;
   399                           
   400                           	psect	text1
   401   00FE7C                     __ptext1:
   402                           	callstack 0
   403   00FE7C                     _Test:
   404                           	callstack 28
   405   00FE7C                     
   406                           ;main.c: 130:     Send_Instruction_Data(0, 0X80);
   407   00FE7C  0E80               	movlw	128
   408   00FE7E  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   409   00FE80  0E00               	movlw	0
   410   00FE82  EC47  F07E         	call	_Send_Instruction_Data
   411   00FE86                     
   412                           ;main.c: 132:     for (int i = 0; i < strlen(Text3); i++) {
   413   00FE86  0E00               	movlw	0
   414   00FE88  6E54               	movwf	(Test@i+1)^0,c
   415   00FE8A  0E00               	movlw	0
   416   00FE8C  6E53               	movwf	Test@i^0,c
   417   00FE8E  EF56  F07F         	goto	l925
   418   00FE92                     l921:
   419                           
   420                           ;main.c: 134:         Send_Instruction_Data(1, Text3[i]);
   421   00FE92  0E01               	movlw	low _Text3
   422   00FE94  2453               	addwf	Test@i^0,w,c
   423   00FE96  6ED9               	movwf	fsr2l,c
   424   00FE98  0E00               	movlw	high _Text3
   425   00FE9A  2054               	addwfc	(Test@i+1)^0,w,c
   426   00FE9C  6EDA               	movwf	fsr2h,c
   427   00FE9E  50DF               	movf	indf2,w,c
   428   00FEA0  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   429   00FEA2  0E01               	movlw	1
   430   00FEA4  EC47  F07E         	call	_Send_Instruction_Data
   431   00FEA8                     
   432                           ;main.c: 136:     }
   433   00FEA8  4A53               	infsnz	Test@i^0,f,c
   434   00FEAA  2A54               	incf	(Test@i+1)^0,f,c
   435   00FEAC                     l925:
   436   00FEAC  0E01               	movlw	low _Text3
   437   00FEAE  6E4D               	movwf	strlen@s^0,c
   438   00FEB0  0E00               	movlw	high _Text3
   439   00FEB2  6E4E               	movwf	(strlen@s+1)^0,c
   440   00FEB4  EC74  F07E         	call	_strlen	;wreg free
   441   00FEB8  504D               	movf	?_strlen^0,w,c
   442   00FEBA  5C53               	subwf	Test@i^0,w,c
   443   00FEBC  504E               	movf	(?_strlen+1)^0,w,c
   444   00FEBE  5854               	subwfb	(Test@i+1)^0,w,c
   445   00FEC0  A0D8               	btfss	status,0,c
   446   00FEC2  EF65  F07F         	goto	u91
   447   00FEC6  EF67  F07F         	goto	u90
   448   00FECA                     u91:
   449   00FECA  EF49  F07F         	goto	l921
   450   00FECE                     u90:
   451   00FECE                     
   452                           ;main.c: 138:     Send_Instruction_Data(0, 0xC0);
   453   00FECE  0EC0               	movlw	192
   454   00FED0  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   455   00FED2  0E00               	movlw	0
   456   00FED4  EC47  F07E         	call	_Send_Instruction_Data
   457   00FED8                     
   458                           ;main.c: 140:     for (int i = 0; i < strlen(Text4); i++) {
   459   00FED8  0E00               	movlw	0
   460   00FEDA  6E56               	movwf	(Test@i_203+1)^0,c
   461   00FEDC  0E00               	movlw	0
   462   00FEDE  6E55               	movwf	Test@i_203^0,c
   463   00FEE0  EF7F  F07F         	goto	l935
   464   00FEE4                     l931:
   465                           
   466                           ;main.c: 142:         Send_Instruction_Data(1, Text4[i]);
   467   00FEE4  0E60               	movlw	low _Text4
   468   00FEE6  2455               	addwf	Test@i_203^0,w,c
   469   00FEE8  6ED9               	movwf	fsr2l,c
   470   00FEEA  0E00               	movlw	high _Text4
   471   00FEEC  2056               	addwfc	(Test@i_203+1)^0,w,c
   472   00FEEE  6EDA               	movwf	fsr2h,c
   473   00FEF0  50DF               	movf	indf2,w,c
   474   00FEF2  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   475   00FEF4  0E01               	movlw	1
   476   00FEF6  EC47  F07E         	call	_Send_Instruction_Data
   477   00FEFA                     
   478                           ;main.c: 144:     }
   479   00FEFA  4A55               	infsnz	Test@i_203^0,f,c
   480   00FEFC  2A56               	incf	(Test@i_203+1)^0,f,c
   481   00FEFE                     l935:
   482   00FEFE  0E60               	movlw	low _Text4
   483   00FF00  6E4D               	movwf	strlen@s^0,c
   484   00FF02  0E00               	movlw	high _Text4
   485   00FF04  6E4E               	movwf	(strlen@s+1)^0,c
   486   00FF06  EC74  F07E         	call	_strlen	;wreg free
   487   00FF0A  504D               	movf	?_strlen^0,w,c
   488   00FF0C  5C55               	subwf	Test@i_203^0,w,c
   489   00FF0E  504E               	movf	(?_strlen+1)^0,w,c
   490   00FF10  5856               	subwfb	(Test@i_203+1)^0,w,c
   491   00FF12  A0D8               	btfss	status,0,c
   492   00FF14  EF8E  F07F         	goto	u101
   493   00FF18  EF90  F07F         	goto	u100
   494   00FF1C                     u101:
   495   00FF1C  EF72  F07F         	goto	l931
   496   00FF20                     u100:
   497   00FF20                     
   498                           ;main.c: 146:     Send_Instruction_Data(0, 0X94);
   499   00FF20  0E94               	movlw	148
   500   00FF22  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   501   00FF24  0E00               	movlw	0
   502   00FF26  EC47  F07E         	call	_Send_Instruction_Data
   503   00FF2A                     
   504                           ;main.c: 148:     for (int i = 0; i < strlen(Text1); i++) {
   505   00FF2A  0E00               	movlw	0
   506   00FF2C  6E58               	movwf	(Test@i_204+1)^0,c
   507   00FF2E  0E00               	movlw	0
   508   00FF30  6E57               	movwf	Test@i_204^0,c
   509   00FF32  EFA8  F07F         	goto	l945
   510   00FF36                     l941:
   511                           
   512                           ;main.c: 150:         Send_Instruction_Data(1, Text1[i]);
   513   00FF36  0E39               	movlw	low _Text1
   514   00FF38  2457               	addwf	Test@i_204^0,w,c
   515   00FF3A  6ED9               	movwf	fsr2l,c
   516   00FF3C  0E00               	movlw	high _Text1
   517   00FF3E  2058               	addwfc	(Test@i_204+1)^0,w,c
   518   00FF40  6EDA               	movwf	fsr2h,c
   519   00FF42  50DF               	movf	indf2,w,c
   520   00FF44  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   521   00FF46  0E01               	movlw	1
   522   00FF48  EC47  F07E         	call	_Send_Instruction_Data
   523   00FF4C                     
   524                           ;main.c: 152:     }
   525   00FF4C  4A57               	infsnz	Test@i_204^0,f,c
   526   00FF4E  2A58               	incf	(Test@i_204+1)^0,f,c
   527   00FF50                     l945:
   528   00FF50  0E39               	movlw	low _Text1
   529   00FF52  6E4D               	movwf	strlen@s^0,c
   530   00FF54  0E00               	movlw	high _Text1
   531   00FF56  6E4E               	movwf	(strlen@s+1)^0,c
   532   00FF58  EC74  F07E         	call	_strlen	;wreg free
   533   00FF5C  504D               	movf	?_strlen^0,w,c
   534   00FF5E  5C57               	subwf	Test@i_204^0,w,c
   535   00FF60  504E               	movf	(?_strlen+1)^0,w,c
   536   00FF62  5858               	subwfb	(Test@i_204+1)^0,w,c
   537   00FF64  A0D8               	btfss	status,0,c
   538   00FF66  EFB7  F07F         	goto	u111
   539   00FF6A  EFB9  F07F         	goto	u110
   540   00FF6E                     u111:
   541   00FF6E  EF9B  F07F         	goto	l941
   542   00FF72                     u110:
   543   00FF72                     
   544                           ;main.c: 154:     _delay((unsigned long)((100)*(16000000/4000.0)));
   545   00FF72  0E03               	movlw	3
   546   00FF74  6E52               	movwf	(??_Test+1)^0,c
   547   00FF76  0E08               	movlw	8
   548   00FF78  6E51               	movwf	??_Test^0,c
   549   00FF7A  0E77               	movlw	119
   550   00FF7C                     u137:
   551   00FF7C  2EE8               	decfsz	wreg,f,c
   552   00FF7E  D7FE               	bra	u137
   553   00FF80  2E51               	decfsz	??_Test^0,f,c
   554   00FF82  D7FC               	bra	u137
   555   00FF84  2E52               	decfsz	(??_Test+1)^0,f,c
   556   00FF86  D7FA               	bra	u137
   557   00FF88  F000               	nop	
   558   00FF8A                     
   559                           ;main.c: 156:     Send_Instruction_Data(0, 0XD4);
   560   00FF8A  0ED4               	movlw	212
   561   00FF8C  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   562   00FF8E  0E00               	movlw	0
   563   00FF90  EC47  F07E         	call	_Send_Instruction_Data
   564   00FF94                     
   565                           ;main.c: 158:     for (int j = 0; j < strlen(Text2); j++) {
   566   00FF94  0E00               	movlw	0
   567   00FF96  6E5A               	movwf	(Test@j+1)^0,c
   568   00FF98  0E00               	movlw	0
   569   00FF9A  6E59               	movwf	Test@j^0,c
   570   00FF9C  EFDD  F07F         	goto	l957
   571   00FFA0                     l953:
   572                           
   573                           ;main.c: 160:         Send_Instruction_Data(1, Text2[j]);
   574   00FFA0  0E1F               	movlw	low _Text2
   575   00FFA2  2459               	addwf	Test@j^0,w,c
   576   00FFA4  6ED9               	movwf	fsr2l,c
   577   00FFA6  0E00               	movlw	high _Text2
   578   00FFA8  205A               	addwfc	(Test@j+1)^0,w,c
   579   00FFAA  6EDA               	movwf	fsr2h,c
   580   00FFAC  50DF               	movf	indf2,w,c
   581   00FFAE  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   582   00FFB0  0E01               	movlw	1
   583   00FFB2  EC47  F07E         	call	_Send_Instruction_Data
   584   00FFB6                     
   585                           ;main.c: 162:     }
   586   00FFB6  4A59               	infsnz	Test@j^0,f,c
   587   00FFB8  2A5A               	incf	(Test@j+1)^0,f,c
   588   00FFBA                     l957:
   589   00FFBA  0E1F               	movlw	low _Text2
   590   00FFBC  6E4D               	movwf	strlen@s^0,c
   591   00FFBE  0E00               	movlw	high _Text2
   592   00FFC0  6E4E               	movwf	(strlen@s+1)^0,c
   593   00FFC2  EC74  F07E         	call	_strlen	;wreg free
   594   00FFC6  504D               	movf	?_strlen^0,w,c
   595   00FFC8  5C59               	subwf	Test@j^0,w,c
   596   00FFCA  504E               	movf	(?_strlen+1)^0,w,c
   597   00FFCC  585A               	subwfb	(Test@j+1)^0,w,c
   598   00FFCE  A0D8               	btfss	status,0,c
   599   00FFD0  EFEC  F07F         	goto	u121
   600   00FFD4  EFEE  F07F         	goto	u120
   601   00FFD8                     u121:
   602   00FFD8  EFD0  F07F         	goto	l953
   603   00FFDC                     u120:
   604   00FFDC                     
   605                           ;main.c: 164:     _delay((unsigned long)((5000)*(16000000/4000.0)));
   606   00FFDC  0E66               	movlw	102
   607   00FFDE  6E52               	movwf	(??_Test+1)^0,c
   608   00FFE0  0E76               	movlw	118
   609   00FFE2  6E51               	movwf	??_Test^0,c
   610   00FFE4  0EC1               	movlw	193
   611   00FFE6                     u147:
   612   00FFE6  2EE8               	decfsz	wreg,f,c
   613   00FFE8  D7FE               	bra	u147
   614   00FFEA  2E51               	decfsz	??_Test^0,f,c
   615   00FFEC  D7FC               	bra	u147
   616   00FFEE  2E52               	decfsz	(??_Test+1)^0,f,c
   617   00FFF0  D7FA               	bra	u147
   618   00FFF2  F000               	nop	
   619   00FFF4                     
   620                           ;main.c: 166:     Send_Instruction_Data(0, 0x01);
   621   00FFF4  0E01               	movlw	1
   622   00FFF6  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   623   00FFF8  0E00               	movlw	0
   624   00FFFA  EC47  F07E         	call	_Send_Instruction_Data
   625   00FFFE  0012               	return		;funcret
   626   010000                     __end_of_Test:
   627                           	callstack 0
   628                           
   629 ;; *************** function _strlen *****************
   630 ;; Defined at:
   631 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\strlen.c"
   632 ;; Parameters:    Size  Location     Type
   633 ;;  s               2    0[COMRAM] PTR const unsigned char 
   634 ;;		 -> Text2(26), Text1(20), Text4(30), Text3(30), 
   635 ;; Auto vars:     Size  Location     Type
   636 ;;  a               2    2[COMRAM] PTR const unsigned char 
   637 ;;		 -> Text2(26), Text1(20), Text4(30), Text3(30), 
   638 ;; Return value:  Size  Location     Type
   639 ;;                  2    0[COMRAM] unsigned int 
   640 ;; Registers used:
   641 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   642 ;; Tracked objects:
   643 ;;		On entry : 0/0
   644 ;;		On exit  : 0/0
   645 ;;		Unchanged: 0/0
   646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   647 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   648 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   650 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   651 ;;Total ram usage:        4 bytes
   652 ;; Hardware stack levels used: 1
   653 ;; This function calls:
   654 ;;		Nothing
   655 ;; This function is called by:
   656 ;;		_Test
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660                           	psect	text2
   661   00FCE8                     __ptext2:
   662                           	callstack 0
   663   00FCE8                     _strlen:
   664                           	callstack 29
   665   00FCE8  C04D  F04F         	movff	strlen@s,strlen@a
   666   00FCEC  C04E  F050         	movff	strlen@s+1,strlen@a+1
   667   00FCF0  EF7C  F07E         	goto	l889
   668   00FCF4                     l887:
   669   00FCF4  4A4D               	infsnz	strlen@s^0,f,c
   670   00FCF6  2A4E               	incf	(strlen@s+1)^0,f,c
   671   00FCF8                     l889:
   672   00FCF8  C04D  FFD9         	movff	strlen@s,fsr2l
   673   00FCFC  C04E  FFDA         	movff	strlen@s+1,fsr2h
   674   00FD00  50DF               	movf	indf2,w,c
   675   00FD02  A4D8               	btfss	status,2,c
   676   00FD04  EF86  F07E         	goto	u81
   677   00FD08  EF88  F07E         	goto	u80
   678   00FD0C                     u81:
   679   00FD0C  EF7A  F07E         	goto	l887
   680   00FD10                     u80:
   681   00FD10  504F               	movf	strlen@a^0,w,c
   682   00FD12  5C4D               	subwf	strlen@s^0,w,c
   683   00FD14  6E4D               	movwf	?_strlen^0,c
   684   00FD16  5050               	movf	(strlen@a+1)^0,w,c
   685   00FD18  584E               	subwfb	(strlen@s+1)^0,w,c
   686   00FD1A  6E4E               	movwf	(?_strlen+1)^0,c
   687   00FD1C  0012               	return		;funcret
   688   00FD1E                     __end_of_strlen:
   689                           	callstack 0
   690                           
   691 ;; *************** function _Init_LCD *****************
   692 ;; Defined at:
   693 ;;		line 86 in file "main.c"
   694 ;; Parameters:    Size  Location     Type
   695 ;;		None
   696 ;; Auto vars:     Size  Location     Type
   697 ;;		None
   698 ;; Return value:  Size  Location     Type
   699 ;;                  1    wreg      void 
   700 ;; Registers used:
   701 ;;		wreg, status,2, status,0, cstack
   702 ;; Tracked objects:
   703 ;;		On entry : 0/0
   704 ;;		On exit  : 0/0
   705 ;;		Unchanged: 0/0
   706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   709 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   710 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   711 ;;Total ram usage:        1 bytes
   712 ;; Hardware stack levels used: 1
   713 ;; Hardware stack levels required when called: 2
   714 ;; This function calls:
   715 ;;		_Send_Instruction_Data
   716 ;; This function is called by:
   717 ;;		_main
   718 ;; This function uses a non-reentrant model
   719 ;;
   720                           
   721                           	psect	text3
   722   00FDEC                     __ptext3:
   723                           	callstack 0
   724   00FDEC                     _Init_LCD:
   725                           	callstack 28
   726   00FDEC                     
   727                           ;main.c: 88:     _delay((unsigned long)((20)*(16000000/4000.0)));
   728   00FDEC  0E68               	movlw	104
   729   00FDEE  6E51               	movwf	??_Init_LCD^0,c
   730   00FDF0  0EE4               	movlw	228
   731   00FDF2                     u157:
   732   00FDF2  2EE8               	decfsz	wreg,f,c
   733   00FDF4  D7FE               	bra	u157
   734   00FDF6  2E51               	decfsz	??_Init_LCD^0,f,c
   735   00FDF8  D7FC               	bra	u157
   736   00FDFA  D000               	nop2	
   737   00FDFC                     
   738                           ;main.c: 89:     Send_Instruction_Data(0, 0x30);
   739   00FDFC  0E30               	movlw	48
   740   00FDFE  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   741   00FE00  0E00               	movlw	0
   742   00FE02  EC47  F07E         	call	_Send_Instruction_Data
   743   00FE06                     
   744                           ;main.c: 90:     _delay((unsigned long)((5)*(16000000/4000.0)));
   745   00FE06  0E1A               	movlw	26
   746   00FE08  6E51               	movwf	??_Init_LCD^0,c
   747   00FE0A  0EF8               	movlw	248
   748   00FE0C                     u167:
   749   00FE0C  2EE8               	decfsz	wreg,f,c
   750   00FE0E  D7FE               	bra	u167
   751   00FE10  2E51               	decfsz	??_Init_LCD^0,f,c
   752   00FE12  D7FC               	bra	u167
   753   00FE14  D000               	nop2	
   754                           
   755                           ;main.c: 91:     Send_Instruction_Data(0, 0x30);
   756   00FE16  0E30               	movlw	48
   757   00FE18  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   758   00FE1A  0E00               	movlw	0
   759   00FE1C  EC47  F07E         	call	_Send_Instruction_Data
   760   00FE20                     
   761                           ;main.c: 92:     _delay((unsigned long)((5)*(16000000/4000.0)));
   762   00FE20  0E1A               	movlw	26
   763   00FE22  6E51               	movwf	??_Init_LCD^0,c
   764   00FE24  0EF8               	movlw	248
   765   00FE26                     u177:
   766   00FE26  2EE8               	decfsz	wreg,f,c
   767   00FE28  D7FE               	bra	u177
   768   00FE2A  2E51               	decfsz	??_Init_LCD^0,f,c
   769   00FE2C  D7FC               	bra	u177
   770   00FE2E  D000               	nop2	
   771   00FE30                     
   772                           ;main.c: 93:     Send_Instruction_Data(0, 0x30);
   773   00FE30  0E30               	movlw	48
   774   00FE32  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   775   00FE34  0E00               	movlw	0
   776   00FE36  EC47  F07E         	call	_Send_Instruction_Data
   777   00FE3A                     
   778                           ;main.c: 94:     Send_Instruction_Data(0, 0x02);
   779   00FE3A  0E02               	movlw	2
   780   00FE3C  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   781   00FE3E  0E00               	movlw	0
   782   00FE40  EC47  F07E         	call	_Send_Instruction_Data
   783   00FE44                     
   784                           ;main.c: 95:     Send_Instruction_Data(0, 0x06);
   785   00FE44  0E06               	movlw	6
   786   00FE46  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   787   00FE48  0E00               	movlw	0
   788   00FE4A  EC47  F07E         	call	_Send_Instruction_Data
   789   00FE4E                     
   790                           ;main.c: 96:     Send_Instruction_Data(0, 0x0F);
   791   00FE4E  0E0F               	movlw	15
   792   00FE50  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   793   00FE52  0E00               	movlw	0
   794   00FE54  EC47  F07E         	call	_Send_Instruction_Data
   795   00FE58                     
   796                           ;main.c: 97:     Send_Instruction_Data(0, 0x28);
   797   00FE58  0E28               	movlw	40
   798   00FE5A  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   799   00FE5C  0E00               	movlw	0
   800   00FE5E  EC47  F07E         	call	_Send_Instruction_Data
   801   00FE62                     
   802                           ;main.c: 98:     Send_Instruction_Data(0, 0x01);
   803   00FE62  0E01               	movlw	1
   804   00FE64  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   805   00FE66  0E00               	movlw	0
   806   00FE68  EC47  F07E         	call	_Send_Instruction_Data
   807   00FE6C                     
   808                           ;main.c: 99:     _delay((unsigned long)((10)*(16000000/4000.0)));
   809   00FE6C  0E34               	movlw	52
   810   00FE6E  6E51               	movwf	??_Init_LCD^0,c
   811   00FE70  0EF2               	movlw	242
   812   00FE72                     u187:
   813   00FE72  2EE8               	decfsz	wreg,f,c
   814   00FE74  D7FE               	bra	u187
   815   00FE76  2E51               	decfsz	??_Init_LCD^0,f,c
   816   00FE78  D7FC               	bra	u187
   817   00FE7A  0012               	return		;funcret
   818   00FE7C                     __end_of_Init_LCD:
   819                           	callstack 0
   820                           
   821 ;; *************** function _Send_Instruction_Data *****************
   822 ;; Defined at:
   823 ;;		line 105 in file "main.c"
   824 ;; Parameters:    Size  Location     Type
   825 ;;  Instruction     1    wreg     unsigned char 
   826 ;;  Data            1    2[COMRAM] unsigned char 
   827 ;; Auto vars:     Size  Location     Type
   828 ;;  Instruction     1    3[COMRAM] unsigned char 
   829 ;; Return value:  Size  Location     Type
   830 ;;                  1    wreg      void 
   831 ;; Registers used:
   832 ;;		wreg, status,2, status,0, cstack
   833 ;; Tracked objects:
   834 ;;		On entry : 0/0
   835 ;;		On exit  : 0/0
   836 ;;		Unchanged: 0/0
   837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   838 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   839 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   841 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   842 ;;Total ram usage:        2 bytes
   843 ;; Hardware stack levels used: 1
   844 ;; Hardware stack levels required when called: 1
   845 ;; This function calls:
   846 ;;		_LCD_Instruction
   847 ;; This function is called by:
   848 ;;		_Init_LCD
   849 ;;		_Test
   850 ;; This function uses a non-reentrant model
   851 ;;
   852                           
   853                           	psect	text4
   854   00FC8E                     __ptext4:
   855                           	callstack 0
   856   00FC8E                     _Send_Instruction_Data:
   857                           	callstack 28
   858                           
   859                           ;incstack = 0
   860                           ;Send_Instruction_Data@Instruction stored from wreg
   861   00FC8E  6E50               	movwf	Send_Instruction_Data@Instruction^0,c
   862   00FC90                     
   863                           ;main.c: 107:     LATCbits.LATC4 = Instruction;
   864   00FC90  B050               	btfsc	Send_Instruction_Data@Instruction^0,0,c
   865   00FC92  D002               	bra	u75
   866   00FC94  988B               	bcf	139,4,c	;volatile
   867   00FC96  D001               	bra	u76
   868   00FC98                     u75:
   869   00FC98  888B               	bsf	139,4,c	;volatile
   870   00FC9A                     u76:
   871   00FC9A                     
   872                           ;main.c: 108:     LCD_Instruction(Data >> 4);
   873   00FC9A  384F               	swapf	Send_Instruction_Data@Data^0,w,c
   874   00FC9C  0B0F               	andlw	15
   875   00FC9E  EC8F  F07E         	call	_LCD_Instruction
   876   00FCA2                     
   877                           ;main.c: 109:     LCD_Instruction(Data);
   878   00FCA2  504F               	movf	Send_Instruction_Data@Data^0,w,c
   879   00FCA4  EC8F  F07E         	call	_LCD_Instruction
   880   00FCA8  0012               	return		;funcret
   881   00FCAA                     __end_of_Send_Instruction_Data:
   882                           	callstack 0
   883                           
   884 ;; *************** function _LCD_Instruction *****************
   885 ;; Defined at:
   886 ;;		line 115 in file "main.c"
   887 ;; Parameters:    Size  Location     Type
   888 ;;  Instruction     1    wreg     unsigned char 
   889 ;; Auto vars:     Size  Location     Type
   890 ;;  Instruction     1    1[COMRAM] unsigned char 
   891 ;; Return value:  Size  Location     Type
   892 ;;                  1    wreg      void 
   893 ;; Registers used:
   894 ;;		wreg, status,2, cstack
   895 ;; Tracked objects:
   896 ;;		On entry : 0/0
   897 ;;		On exit  : 0/0
   898 ;;		Unchanged: 0/0
   899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   901 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   902 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   903 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   904 ;;Total ram usage:        2 bytes
   905 ;; Hardware stack levels used: 1
   906 ;; This function calls:
   907 ;;		Nothing
   908 ;; This function is called by:
   909 ;;		_Send_Instruction_Data
   910 ;; This function uses a non-reentrant model
   911 ;;
   912                           
   913                           	psect	text5
   914   00FD1E                     __ptext5:
   915                           	callstack 0
   916   00FD1E                     _LCD_Instruction:
   917                           	callstack 28
   918                           
   919                           ;incstack = 0
   920                           ;LCD_Instruction@Instruction stored from wreg
   921   00FD1E  6E4E               	movwf	LCD_Instruction@Instruction^0,c
   922   00FD20                     
   923                           ;main.c: 117:     LATCbits.LATC5 = 1;
   924   00FD20  8A8B               	bsf	139,5,c	;volatile
   925   00FD22                     
   926                           ;main.c: 118:     _delay((unsigned long)((15)*(16000000/4000.0)));
   927   00FD22  0E4E               	movlw	78
   928   00FD24  6E4D               	movwf	??_LCD_Instruction^0,c
   929   00FD26  0EEB               	movlw	235
   930   00FD28                     u197:
   931   00FD28  2EE8               	decfsz	wreg,f,c
   932   00FD2A  D7FE               	bra	u197
   933   00FD2C  2E4D               	decfsz	??_LCD_Instruction^0,f,c
   934   00FD2E  D7FC               	bra	u197
   935   00FD30  F000               	nop	
   936   00FD32                     
   937                           ;main.c: 119:     LATD = Instruction;
   938   00FD32  C04E  FF8C         	movff	LCD_Instruction@Instruction,3980	;volatile
   939   00FD36                     
   940                           ;main.c: 120:     _delay((unsigned long)((15)*(16000000/4000.0)));
   941   00FD36  0E4E               	movlw	78
   942   00FD38  6E4D               	movwf	??_LCD_Instruction^0,c
   943   00FD3A  0EEB               	movlw	235
   944   00FD3C                     u207:
   945   00FD3C  2EE8               	decfsz	wreg,f,c
   946   00FD3E  D7FE               	bra	u207
   947   00FD40  2E4D               	decfsz	??_LCD_Instruction^0,f,c
   948   00FD42  D7FC               	bra	u207
   949   00FD44  F000               	nop	
   950   00FD46                     
   951                           ;main.c: 121:     LATCbits.LATC5 = 0;
   952   00FD46  9A8B               	bcf	139,5,c	;volatile
   953   00FD48                     
   954                           ;main.c: 122:     _delay((unsigned long)((15)*(16000000/4000.0)));
   955   00FD48  0E4E               	movlw	78
   956   00FD4A  6E4D               	movwf	??_LCD_Instruction^0,c
   957   00FD4C  0EEB               	movlw	235
   958   00FD4E                     u217:
   959   00FD4E  2EE8               	decfsz	wreg,f,c
   960   00FD50  D7FE               	bra	u217
   961   00FD52  2E4D               	decfsz	??_LCD_Instruction^0,f,c
   962   00FD54  D7FC               	bra	u217
   963   00FD56  F000               	nop	
   964   00FD58  0012               	return		;funcret
   965   00FD5A                     __end_of_LCD_Instruction:
   966                           	callstack 0
   967                           
   968 ;; *************** function _Configurations *****************
   969 ;; Defined at:
   970 ;;		line 64 in file "main.c"
   971 ;; Parameters:    Size  Location     Type
   972 ;;		None
   973 ;; Auto vars:     Size  Location     Type
   974 ;;		None
   975 ;; Return value:  Size  Location     Type
   976 ;;                  1    wreg      void 
   977 ;; Registers used:
   978 ;;		wreg, status,2
   979 ;; Tracked objects:
   980 ;;		On entry : 0/0
   981 ;;		On exit  : 0/0
   982 ;;		Unchanged: 0/0
   983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   988 ;;Total ram usage:        0 bytes
   989 ;; Hardware stack levels used: 1
   990 ;; This function calls:
   991 ;;		Nothing
   992 ;; This function is called by:
   993 ;;		_main
   994 ;; This function uses a non-reentrant model
   995 ;;
   996                           
   997                           	psect	text6
   998   00FCC8                     __ptext6:
   999                           	callstack 0
  1000   00FCC8                     _Configurations:
  1001                           	callstack 30
  1002   00FCC8                     
  1003                           ;main.c: 66:     OSCCON = 0x72;
  1004   00FCC8  0E72               	movlw	114
  1005   00FCCA  6ED3               	movwf	211,c	;volatile
  1006                           
  1007                           ;main.c: 69:     ANSELD = 0x00;
  1008   00FCCC  0E00               	movlw	0
  1009   00FCCE  010F               	movlb	15	; () banked
  1010   00FCD0  6F3B               	movwf	59,b	;volatile
  1011   00FCD2                     
  1012                           ; BSR set to: 15
  1013                           ;main.c: 70:     ANSELCbits.ANSC4 = 0;
  1014   00FCD2  993A               	bcf	58,4,b	;volatile
  1015   00FCD4                     
  1016                           ; BSR set to: 15
  1017                           ;main.c: 71:     ANSELCbits.ANSC5 = 0;
  1018   00FCD4  9B3A               	bcf	58,5,b	;volatile
  1019                           
  1020                           ;main.c: 74:     TRISD = 0x00;
  1021   00FCD6  0E00               	movlw	0
  1022   00FCD8  6E95               	movwf	149,c	;volatile
  1023   00FCDA                     
  1024                           ; BSR set to: 15
  1025                           ;main.c: 75:     TRISCbits.RC4 = 0;
  1026   00FCDA  9894               	bcf	148,4,c	;volatile
  1027   00FCDC                     
  1028                           ; BSR set to: 15
  1029                           ;main.c: 76:     TRISCbits.RC5 = 0;
  1030   00FCDC  9A94               	bcf	148,5,c	;volatile
  1031                           
  1032                           ;main.c: 79:     LATC = 0;
  1033   00FCDE  0E00               	movlw	0
  1034   00FCE0  6E8B               	movwf	139,c	;volatile
  1035                           
  1036                           ;main.c: 80:     LATD = 0;
  1037   00FCE2  0E00               	movlw	0
  1038   00FCE4  6E8C               	movwf	140,c	;volatile
  1039   00FCE6                     
  1040                           ; BSR set to: 15
  1041   00FCE6  0012               	return		;funcret
  1042   00FCE8                     __end_of_Configurations:
  1043                           	callstack 0
  1044   000000                     
  1045                           	psect	rparam
  1046   000000                     
  1047                           	psect	config
  1048                           
  1049                           ; Padding undefined space
  1050   300000                     	org	3145728
  1051   300000  FF                 	db	255
  1052                           
  1053                           ;Config register CONFIG1H @ 0x300001
  1054                           ;	Oscillator Selection bits
  1055                           ;	FOSC = INTIO67, Internal oscillator block
  1056                           ;	4X PLL Enable
  1057                           ;	PLLCFG = OFF, Oscillator used directly
  1058                           ;	Primary clock enable bit
  1059                           ;	PRICLKEN = ON, Primary clock is always enabled
  1060                           ;	Fail-Safe Clock Monitor Enable bit
  1061                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1062                           ;	Internal/External Oscillator Switchover bit
  1063                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1064   300001                     	org	3145729
  1065   300001  28                 	db	40
  1066                           
  1067                           ;Config register CONFIG2L @ 0x300002
  1068                           ;	Power-up Timer Enable bit
  1069                           ;	PWRTEN = OFF, Power up timer disabled
  1070                           ;	Brown-out Reset Enable bits
  1071                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1072                           ;	Brown Out Reset Voltage bits
  1073                           ;	BORV = 190, VBOR set to 1.90 V nominal
  1074   300002                     	org	3145730
  1075   300002  1F                 	db	31
  1076                           
  1077                           ;Config register CONFIG2H @ 0x300003
  1078                           ;	Watchdog Timer Enable bits
  1079                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  1080                           ;	Watchdog Timer Postscale Select bits
  1081                           ;	WDTPS = 32768, 1:32768
  1082   300003                     	org	3145731
  1083   300003  3C                 	db	60
  1084                           
  1085                           ; Padding undefined space
  1086   300004                     	org	3145732
  1087   300004  FF                 	db	255
  1088                           
  1089                           ;Config register CONFIG3H @ 0x300005
  1090                           ;	CCP2 MUX bit
  1091                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  1092                           ;	PORTB A/D Enable bit
  1093                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  1094                           ;	P3A/CCP3 Mux bit
  1095                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
  1096                           ;	HFINTOSC Fast Start-up
  1097                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
  1098                           ;	Timer3 Clock input mux bit
  1099                           ;	T3CMX = PORTC0, T3CKI is on RC0
  1100                           ;	ECCP2 B output mux bit
  1101                           ;	P2BMX = PORTD2, P2B is on RD2
  1102                           ;	MCLR Pin Enable bit
  1103                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
  1104   300005                     	org	3145733
  1105   300005  BD                 	db	189
  1106                           
  1107                           ;Config register CONFIG4L @ 0x300006
  1108                           ;	Stack Full/Underflow Reset Enable bit
  1109                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1110                           ;	Single-Supply ICSP Enable bit
  1111                           ;	LVP = OFF, Single-Supply ICSP disabled
  1112                           ;	Extended Instruction Set Enable bit
  1113                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1114                           ;	Background Debug
  1115                           ;	DEBUG = 0x1, unprogrammed default
  1116   300006                     	org	3145734
  1117   300006  81                 	db	129
  1118                           
  1119                           ; Padding undefined space
  1120   300007                     	org	3145735
  1121   300007  FF                 	db	255
  1122                           
  1123                           ;Config register CONFIG5L @ 0x300008
  1124                           ;	Code Protection Block 0
  1125                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  1126                           ;	Code Protection Block 1
  1127                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  1128                           ;	Code Protection Block 2
  1129                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  1130                           ;	Code Protection Block 3
  1131                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  1132   300008                     	org	3145736
  1133   300008  0F                 	db	15
  1134                           
  1135                           ;Config register CONFIG5H @ 0x300009
  1136                           ;	Boot Block Code Protection bit
  1137                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1138                           ;	Data EEPROM Code Protection bit
  1139                           ;	CPD = OFF, Data EEPROM not code-protected
  1140   300009                     	org	3145737
  1141   300009  C0                 	db	192
  1142                           
  1143                           ;Config register CONFIG6L @ 0x30000A
  1144                           ;	Write Protection Block 0
  1145                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  1146                           ;	Write Protection Block 1
  1147                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  1148                           ;	Write Protection Block 2
  1149                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  1150                           ;	Write Protection Block 3
  1151                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  1152   30000A                     	org	3145738
  1153   30000A  0F                 	db	15
  1154                           
  1155                           ;Config register CONFIG6H @ 0x30000B
  1156                           ;	Configuration Register Write Protection bit
  1157                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1158                           ;	Boot Block Write Protection bit
  1159                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  1160                           ;	Data EEPROM Write Protection bit
  1161                           ;	WRTD = OFF, Data EEPROM not write-protected
  1162   30000B                     	org	3145739
  1163   30000B  E0                 	db	224
  1164                           
  1165                           ;Config register CONFIG7L @ 0x30000C
  1166                           ;	Table Read Protection Block 0
  1167                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  1168                           ;	Table Read Protection Block 1
  1169                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1170                           ;	Table Read Protection Block 2
  1171                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  1172                           ;	Table Read Protection Block 3
  1173                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  1174   30000C                     	org	3145740
  1175   30000C  0F                 	db	15
  1176                           
  1177                           ;Config register CONFIG7H @ 0x30000D
  1178                           ;	Boot Block Table Read Protection bit
  1179                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1180   30000D                     	org	3145741
  1181   30000D  40                 	db	64
  1182                           tosu	equ	0xFFF
  1183                           tosh	equ	0xFFE
  1184                           tosl	equ	0xFFD
  1185                           stkptr	equ	0xFFC
  1186                           pclatu	equ	0xFFB
  1187                           pclath	equ	0xFFA
  1188                           pcl	equ	0xFF9
  1189                           tblptru	equ	0xFF8
  1190                           tblptrh	equ	0xFF7
  1191                           tblptrl	equ	0xFF6
  1192                           tablat	equ	0xFF5
  1193                           prodh	equ	0xFF4
  1194                           prodl	equ	0xFF3
  1195                           indf0	equ	0xFEF
  1196                           postinc0	equ	0xFEE
  1197                           postdec0	equ	0xFED
  1198                           preinc0	equ	0xFEC
  1199                           plusw0	equ	0xFEB
  1200                           fsr0h	equ	0xFEA
  1201                           fsr0l	equ	0xFE9
  1202                           wreg	equ	0xFE8
  1203                           indf1	equ	0xFE7
  1204                           postinc1	equ	0xFE6
  1205                           postdec1	equ	0xFE5
  1206                           preinc1	equ	0xFE4
  1207                           plusw1	equ	0xFE3
  1208                           fsr1h	equ	0xFE2
  1209                           fsr1l	equ	0xFE1
  1210                           bsr	equ	0xFE0
  1211                           indf2	equ	0xFDF
  1212                           postinc2	equ	0xFDE
  1213                           postdec2	equ	0xFDD
  1214                           preinc2	equ	0xFDC
  1215                           plusw2	equ	0xFDB
  1216                           fsr2h	equ	0xFDA
  1217                           fsr2l	equ	0xFD9
  1218                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        106
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      90
    BANK0           160      0      30
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 30
		 -> Text2(COMRAM[26]), Text1(COMRAM[20]), Text4(BANK0[30]), Text3(COMRAM[30]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 30
		 -> Text2(COMRAM[26]), Text1(COMRAM[20]), Text4(BANK0[30]), Text3(COMRAM[30]), 


Critical Paths under _main in COMRAM

    _main->_Test
    _Test->_Send_Instruction_Data
    _Test->_strlen
    _Init_LCD->_Send_Instruction_Data
    _Send_Instruction_Data->_LCD_Instruction

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3338
                     _Configurations
                           _Init_LCD
                               _Test
 ---------------------------------------------------------------------------------
 (1) _Test                                                10    10      0    1958
                                              4 COMRAM    10    10      0
              _Send_Instruction_Data
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     394
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Init_LCD                                             1     1      0    1380
                                              4 COMRAM     1     1      0
              _Send_Instruction_Data
 ---------------------------------------------------------------------------------
 (2) _Send_Instruction_Data                                2     1      1    1380
                                              2 COMRAM     2     1      1
                    _LCD_Instruction
 ---------------------------------------------------------------------------------
 (3) _LCD_Instruction                                      2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Configurations                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Configurations
   _Init_LCD
     _Send_Instruction_Data
       _LCD_Instruction
   _Test
     _Send_Instruction_Data
     _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      42        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      1E       5       18.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      E      5A       1       94.7%
BITBIGSFRlhll       4F      0       0      40        0.0%
BITBIGSFRlhh        3D      0       0      38        0.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITBIGSFRh          2C      0       0      37        0.0%
BITBIGSFRlhlh        7      0       0      39        0.0%
BITBIGSFRll          2      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      78      28        0.0%
DATA                 0      0      78       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Wed Jan 24 01:33:03 2024

                              l43 FC86                                l52 FE7A                                l44 FC86  
                              l55 FCA8                                l49 FCE6                                l73 FFFE  
                              l58 FD58                                u80 FD10                                u81 FD0C  
                              u90 FECE                                u75 FC98                                u91 FECA  
                              u76 FC9A                               l901 FE20                               l911 FE58  
                             l903 FE30                               l913 FE62                               l905 FE3A  
                             l753 FD1C                               l921 FE92                               l915 FE6C  
                             l907 FE44                               l931 FEE4                               l923 FEA8  
                             l909 FE4E                               l941 FF36                               l933 FEFA  
                             l925 FEAC                               l917 FE7C                               l791 FCDC  
                             l783 FCC8                               l871 FD32                               l951 FF94  
                             l943 FF4C                               l935 FEFE                               l927 FECE  
                             l919 FE86                               l785 FCD2                               l873 FD36  
                             l881 FC9A                               l961 FFF4                               l953 FFA0  
                             l945 FF50                               l937 FF20                               l929 FED8  
                             l787 FCD4                               l875 FD46                               l867 FD20  
                             l883 FCA2                               l891 FD10                               l955 FFB6  
                             l947 FF72                               l939 FF2A                               l963 FC7A  
                             l789 FCDA                               l877 FD48                               l869 FD22  
                             l885 FCE8                               l957 FFBA                               l949 FF8A  
                             l965 FC7E                               l879 FC90                               l895 FDEC  
                             l887 FCF4                               l959 FFDC                               l967 FC82  
                             l897 FDFC                               l889 FCF8                               l899 FE06  
                             u100 FF20                               u101 FF1C                               u110 FF72  
                             u111 FF6E                               u120 FFDC                               u121 FFD8  
                             u207 FD3C                               u217 FD4E                               u137 FF7C  
                             u147 FFE6                               u157 FDF2                               u167 FE0C  
                             u177 FE26                               u187 FE72                               u197 FD28  
                             wreg 0FE8                              _LATC 0F8B                              _LATD 0F8C  
                            _Test FE7C                              _main FC7A                              fsr2h 0FDA  
                            indf2 0FDF                              fsr1l 0FE1                              fsr2l 0FD9  
                            start 0000                      ___param_bank 0000                   _LCD_Instruction FD1E  
Send_Instruction_Data@Instruction 0050                             ?_Test 004D                             ?_main 004D  
                           _TRISD 0F95                             Test@i 0053                             Test@j 0059  
                           _Text1 0039                             _Text2 001F                             _Text3 0001  
                           _Text4 0060                             tablat 0FF5                             status 0FD8  
                 __initialization FD5A                      __end_of_Test 0000                      __end_of_main FC8E  
                __end_of_Init_LCD FE7C             _Send_Instruction_Data FC8E                            ??_Test 0051  
                          ??_main 005B                     __activetblptr 0000                            _ANSELD 0F3B  
      LCD_Instruction@Instruction 004E                            _OSCCON 0FD3           __end_of_LCD_Instruction FD5A  
                          isa$std 0001                            _strlen FCE8                      __pdataCOMRAM 0001  
                          tblptrh 0FF7                            tblptrl 0FF6                            tblptru 0FF8  
                      __accesstop 0060           __end_of__initialization FD9A                     ___rparam_used 0001  
                  __pcstackCOMRAM 004D                      __pidataBANK0 FCAA            ?_Send_Instruction_Data 004F  
                       ?_Init_LCD 004D                  ?_LCD_Instruction 004D                           ?_strlen 004D  
                      ??_Init_LCD 0051                           __Hparam 0000                           __Lparam 0000  
                         __pcinit FD5A                           __ramtop 1000                           __ptext0 FC7A  
                         __ptext1 FE7C                           __ptext2 FCE8                           __ptext3 FDEC  
                         __ptext4 FC8E                           __ptext5 FD1E                           __ptext6 FCC8  
            end_of_initialization FD9A                           postdec1 0FE5                           postinc0 0FEE  
                         strlen@a 004F                           strlen@s 004D                         _TRISCbits 0F94  
         ??_Send_Instruction_Data 0050                     __pidataCOMRAM FDA0                    __end_of_strlen FD1E  
             start_initialization FD5A         Send_Instruction_Data@Data 004F                    _Configurations FCC8  
                       Test@i_203 0055                         Test@i_204 0057                       __pdataBANK0 0060  
                        ??_strlen 004F            __end_of_Configurations FCE8                   ?_Configurations 004D  
                        _LATCbits 0F8B                         copy_data0 FD6E                         copy_data1 FD8E  
                        _Init_LCD FDEC                          __Hrparam 0000                          __Lrparam 0000  
   __end_of_Send_Instruction_Data FCAA                        _ANSELCbits 0F3A                 ??_LCD_Instruction 004D  
                        isa$xinst 0000                  ??_Configurations 004D  
