

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Thu Feb 01 01:25:38 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22   000000                     
    23                           ; Generated 05/01/2024 GMT
    24                           ; 
    25                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F46K22 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57   000000                     
    58                           	psect	idataCOMRAM
    59   0011D6                     __pidataCOMRAM:
    60                           	callstack 0
    61                           
    62                           ;initializer for _Text3
    63   0011D6  57                 	db	87
    64   0011D7  65                 	db	101
    65   0011D8  6C                 	db	108
    66   0011D9  63                 	db	99
    67   0011DA  6F                 	db	111
    68   0011DB  6D                 	db	109
    69   0011DC  65                 	db	101
    70   0011DD  20                 	db	32
    71   0011DE  74                 	db	116
    72   0011DF  6F                 	db	111
    73   0011E0  20                 	db	32
    74   0011E1  74                 	db	116
    75   0011E2  68                 	db	104
    76   0011E3  69                 	db	105
    77   0011E4  73                 	db	115
    78   0011E5  00                 	db	0
    79   0011E6  00                 	db	0
    80   0011E7  00                 	db	0
    81   0011E8  00                 	db	0
    82   0011E9  00                 	db	0
    83   0011EA  00                 	db	0
    84   0011EB  00                 	db	0
    85   0011EC  00                 	db	0
    86   0011ED  00                 	db	0
    87   0011EE  00                 	db	0
    88   0011EF  00                 	db	0
    89   0011F0  00                 	db	0
    90   0011F1  00                 	db	0
    91   0011F2  00                 	db	0
    92   0011F3  00                 	db	0
    93                           
    94                           ;initializer for _Text2
    95   0011F4  45                 	db	69
    96   0011F5  76                 	db	118
    97   0011F6  65                 	db	101
    98   0011F7  72                 	db	114
    99   0011F8  79                 	db	121
   100   0011F9  6F                 	db	111
   101   0011FA  6E                 	db	110
   102   0011FB  65                 	db	101
   103   0011FC  21                 	db	33
   104   0011FD  00                 	db	0
   105   0011FE  00                 	db	0
   106   0011FF  00                 	db	0
   107   001200  00                 	db	0
   108   001201  00                 	db	0
   109   001202  00                 	db	0
   110   001203  00                 	db	0
   111   001204  00                 	db	0
   112   001205  00                 	db	0
   113   001206  00                 	db	0
   114   001207  00                 	db	0
   115   001208  00                 	db	0
   116   001209  00                 	db	0
   117   00120A  00                 	db	0
   118   00120B  00                 	db	0
   119   00120C  00                 	db	0
   120   00120D  00                 	db	0
   121                           
   122                           ;initializer for _Text1
   123   00120E  48                 	db	72
   124   00120F  65                 	db	101
   125   001210  6C                 	db	108
   126   001211  6C                 	db	108
   127   001212  6F                 	db	111
   128   001213  21                 	db	33
   129   001214  00                 	db	0
   130   001215  00                 	db	0
   131   001216  00                 	db	0
   132   001217  00                 	db	0
   133   001218  00                 	db	0
   134   001219  00                 	db	0
   135   00121A  00                 	db	0
   136   00121B  00                 	db	0
   137   00121C  00                 	db	0
   138   00121D  00                 	db	0
   139   00121E  00                 	db	0
   140   00121F  00                 	db	0
   141   001220  00                 	db	0
   142   001221  00                 	db	0
   143                           
   144                           	psect	idataBANK0
   145   0012F2                     __pidataBANK0:
   146                           	callstack 0
   147                           
   148                           ;initializer for _Text4
   149   0012F2  4D                 	db	77
   150   0012F3  69                 	db	105
   151   0012F4  63                 	db	99
   152   0012F5  72                 	db	114
   153   0012F6  6F                 	db	111
   154   0012F7  63                 	db	99
   155   0012F8  6F                 	db	111
   156   0012F9  6E                 	db	110
   157   0012FA  74                 	db	116
   158   0012FB  72                 	db	114
   159   0012FC  6F                 	db	111
   160   0012FD  6C                 	db	108
   161   0012FE  6C                 	db	108
   162   0012FF  65                 	db	101
   163   001300  72                 	db	114
   164   001301  21                 	db	33
   165   001302  00                 	db	0
   166   001303  00                 	db	0
   167   001304  00                 	db	0
   168   001305  00                 	db	0
   169   001306  00                 	db	0
   170   001307  00                 	db	0
   171   001308  00                 	db	0
   172   001309  00                 	db	0
   173   00130A  00                 	db	0
   174   00130B  00                 	db	0
   175   00130C  00                 	db	0
   176   00130D  00                 	db	0
   177   00130E  00                 	db	0
   178   00130F  00                 	db	0
   179   000000                     _LATCbits	set	3979
   180   000000                     _ANSELCbits	set	3898
   181   000000                     _ANSELD	set	3899
   182   000000                     _OSCCON	set	4051
   183   000000                     _LATC	set	3979
   184   000000                     _TRISCbits	set	3988
   185   000000                     _TRISD	set	3989
   186   000000                     _LATD	set	3980
   187                           
   188                           ; #config settings
   189                           
   190                           	psect	cinit
   191   001222                     __pcinit:
   192                           	callstack 0
   193   001222                     start_initialization:
   194                           	callstack 0
   195   001222                     __initialization:
   196                           	callstack 0
   197                           
   198                           ; Initialize objects allocated to BANK0 (30 bytes)
   199                           ; load TBLPTR registers with __pidataBANK0
   200   001222  0EF2               	movlw	low __pidataBANK0
   201   001224  6EF6               	movwf	tblptrl,c
   202   001226  0E12               	movlw	high __pidataBANK0
   203   001228  6EF7               	movwf	tblptrh,c
   204   00122A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   205   00122C  6EF8               	movwf	tblptru,c
   206   00122E  EE00  F060         	lfsr	0,__pdataBANK0
   207   001232  EE10 F01E          	lfsr	1,30
   208   001236                     copy_data0:
   209   001236  0009               	tblrd		*+
   210   001238  CFF5 FFEE          	movff	tablat,postinc0
   211   00123C  50E5               	movf	postdec1,w,c
   212   00123E  50E1               	movf	fsr1l,w,c
   213   001240  E1FA               	bnz	copy_data0
   214                           
   215                           ; Initialize objects allocated to COMRAM (76 bytes)
   216                           ; load TBLPTR registers with __pidataCOMRAM
   217   001242  0ED6               	movlw	low __pidataCOMRAM
   218   001244  6EF6               	movwf	tblptrl,c
   219   001246  0E11               	movlw	high __pidataCOMRAM
   220   001248  6EF7               	movwf	tblptrh,c
   221   00124A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   222   00124C  6EF8               	movwf	tblptru,c
   223   00124E  EE00  F001         	lfsr	0,__pdataCOMRAM
   224   001252  EE10 F04C          	lfsr	1,76
   225   001256                     copy_data1:
   226   001256  0009               	tblrd		*+
   227   001258  CFF5 FFEE          	movff	tablat,postinc0
   228   00125C  50E5               	movf	postdec1,w,c
   229   00125E  50E1               	movf	fsr1l,w,c
   230   001260  E1FA               	bnz	copy_data1
   231   001262                     end_of_initialization:
   232                           	callstack 0
   233   001262                     __end_of__initialization:
   234                           	callstack 0
   235   001262  0100               	movlb	0
   236   001264  EF96  F009         	goto	_main	;jump to C main() function
   237                           
   238                           	psect	dataCOMRAM
   239   000001                     __pdataCOMRAM:
   240                           	callstack 0
   241   000001                     _Text3:
   242                           	callstack 0
   243   000001                     	ds	30
   244   00001F                     _Text2:
   245                           	callstack 0
   246   00001F                     	ds	26
   247   000039                     _Text1:
   248                           	callstack 0
   249   000039                     	ds	20
   250                           
   251                           	psect	dataBANK0
   252   000060                     __pdataBANK0:
   253                           	callstack 0
   254   000060                     _Text4:
   255                           	callstack 0
   256   000060                     	ds	30
   257                           
   258                           	psect	cstackCOMRAM
   259   00004D                     __pcstackCOMRAM:
   260                           	callstack 0
   261   00004D                     ??_LCD_Instruction:
   262   00004D                     ?_strlen:
   263                           	callstack 0
   264   00004D                     strlen@s:
   265                           	callstack 0
   266                           
   267                           ; 1 bytes @ 0x0
   268   00004D                     	ds	1
   269   00004E                     LCD_Instruction@Instruction:
   270                           	callstack 0
   271                           
   272                           ; 1 bytes @ 0x1
   273   00004E                     	ds	1
   274   00004F                     Send_Instruction_Data@Data:
   275                           	callstack 0
   276   00004F                     strlen@a:
   277                           	callstack 0
   278                           
   279                           ; 1 bytes @ 0x2
   280   00004F                     	ds	1
   281   000050                     Send_Instruction_Data@Instruction:
   282                           	callstack 0
   283                           
   284                           ; 1 bytes @ 0x3
   285   000050                     	ds	1
   286   000051                     ??_Init_LCD:
   287   000051                     ??_Test:
   288                           
   289                           ; 1 bytes @ 0x4
   290   000051                     	ds	2
   291   000053                     Test@i:
   292                           	callstack 0
   293                           
   294                           ; 2 bytes @ 0x6
   295   000053                     	ds	2
   296   000055                     Test@i_203:
   297                           	callstack 0
   298                           
   299                           ; 2 bytes @ 0x8
   300   000055                     	ds	2
   301   000057                     Test@i_204:
   302                           	callstack 0
   303                           
   304                           ; 2 bytes @ 0xA
   305   000057                     	ds	2
   306   000059                     Test@j:
   307                           	callstack 0
   308                           
   309                           ; 2 bytes @ 0xC
   310   000059                     	ds	2
   311   00005B                     
   312                           ; 1 bytes @ 0xE
   313 ;;
   314 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   315 ;;
   316 ;; *************** function _main *****************
   317 ;; Defined at:
   318 ;;		line 46 in file "main.c"
   319 ;; Parameters:    Size  Location     Type
   320 ;;		None
   321 ;; Auto vars:     Size  Location     Type
   322 ;;		None
   323 ;; Return value:  Size  Location     Type
   324 ;;                  1    wreg      void 
   325 ;; Registers used:
   326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   327 ;; Tracked objects:
   328 ;;		On entry : 0/0
   329 ;;		On exit  : 0/0
   330 ;;		Unchanged: 0/0
   331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   336 ;;Total ram usage:        0 bytes
   337 ;; Hardware stack levels required when called: 3
   338 ;; This function calls:
   339 ;;		_Configurations
   340 ;;		_Init_LCD
   341 ;;		_Test
   342 ;; This function is called by:
   343 ;;		Startup code after reset
   344 ;; This function uses a non-reentrant model
   345 ;;
   346                           
   347                           	psect	text0
   348   00132C                     __ptext0:
   349                           	callstack 0
   350   00132C                     _main:
   351                           	callstack 28
   352   00132C                     
   353                           ;main.c: 49:     Configurations();
   354   00132C  EC69  F009         	call	_Configurations	;wreg free
   355   001330                     
   356                           ;main.c: 50:     Init_LCD();
   357   001330  ECA2  F008         	call	_Init_LCD	;wreg free
   358   001334                     
   359                           ;main.c: 51:     Test();
   360   001334  EC01  F008         	call	_Test	;wreg free
   361   001338                     l43:
   362   001338  EF9C  F009         	goto	l43
   363   00133C  EF00  F000         	goto	start
   364   001340                     __end_of_main:
   365                           	callstack 0
   366                           
   367 ;; *************** function _Test *****************
   368 ;; Defined at:
   369 ;;		line 126 in file "main.c"
   370 ;; Parameters:    Size  Location     Type
   371 ;;		None
   372 ;; Auto vars:     Size  Location     Type
   373 ;;  j               2   12[COMRAM] int 
   374 ;;  i               2   10[COMRAM] int 
   375 ;;  i               2    8[COMRAM] int 
   376 ;;  i               2    6[COMRAM] int 
   377 ;; Return value:  Size  Location     Type
   378 ;;                  1    wreg      void 
   379 ;; Registers used:
   380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   381 ;; Tracked objects:
   382 ;;		On entry : 0/0
   383 ;;		On exit  : 0/0
   384 ;;		Unchanged: 0/0
   385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   387 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   388 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   389 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   390 ;;Total ram usage:       10 bytes
   391 ;; Hardware stack levels used: 1
   392 ;; Hardware stack levels required when called: 2
   393 ;; This function calls:
   394 ;;		_Send_Instruction_Data
   395 ;;		_strlen
   396 ;; This function is called by:
   397 ;;		_main
   398 ;; This function uses a non-reentrant model
   399 ;;
   400                           
   401                           	psect	text1
   402   001002                     __ptext1:
   403                           	callstack 0
   404   001002                     _Test:
   405                           	callstack 28
   406   001002                     
   407                           ;main.c: 128:     Send_Instruction_Data(0, 0X80);
   408   001002  0E80               	movlw	128
   409   001004  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   410   001006  0E00               	movlw	0
   411   001008  EC88  F009         	call	_Send_Instruction_Data
   412   00100C                     
   413                           ;main.c: 130:     for (int i = 0; i < strlen(Text3); i++) {
   414   00100C  0E00               	movlw	0
   415   00100E  6E54               	movwf	(Test@i+1)^0,c
   416   001010  0E00               	movlw	0
   417   001012  6E53               	movwf	Test@i^0,c
   418   001014  EF17  F008         	goto	l921
   419   001018                     l917:
   420                           
   421                           ;main.c: 132:         Send_Instruction_Data(1, Text3[i]);
   422   001018  5053               	movf	Test@i^0,w,c
   423   00101A  0F01               	addlw	low _Text3
   424   00101C  6ED9               	movwf	fsr2l,c
   425   00101E  6ADA               	clrf	fsr2h,c
   426   001020  50DF               	movf	indf2,w,c
   427   001022  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   428   001024  0E01               	movlw	1
   429   001026  EC88  F009         	call	_Send_Instruction_Data
   430   00102A                     
   431                           ;main.c: 134:     }
   432   00102A  4A53               	infsnz	Test@i^0,f,c
   433   00102C  2A54               	incf	(Test@i+1)^0,f,c
   434   00102E                     l921:
   435   00102E  0E01               	movlw	low _Text3
   436   001030  6E4D               	movwf	strlen@s^0,c
   437   001032  EC52  F009         	call	_strlen	;wreg free
   438   001036  504D               	movf	?_strlen^0,w,c
   439   001038  5C53               	subwf	Test@i^0,w,c
   440   00103A  504E               	movf	(?_strlen+1)^0,w,c
   441   00103C  5854               	subwfb	(Test@i+1)^0,w,c
   442   00103E  A0D8               	btfss	status,0,c
   443   001040  EF24  F008         	goto	u91
   444   001044  EF26  F008         	goto	u90
   445   001048                     u91:
   446   001048  EF0C  F008         	goto	l917
   447   00104C                     u90:
   448   00104C                     
   449                           ;main.c: 136:     Send_Instruction_Data(0, 0xC0);
   450   00104C  0EC0               	movlw	192
   451   00104E  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   452   001050  0E00               	movlw	0
   453   001052  EC88  F009         	call	_Send_Instruction_Data
   454   001056                     
   455                           ;main.c: 138:     for (int i = 0; i < strlen(Text4); i++) {
   456   001056  0E00               	movlw	0
   457   001058  6E56               	movwf	(Test@i_203+1)^0,c
   458   00105A  0E00               	movlw	0
   459   00105C  6E55               	movwf	Test@i_203^0,c
   460   00105E  EF3C  F008         	goto	l931
   461   001062                     l927:
   462                           
   463                           ;main.c: 140:         Send_Instruction_Data(1, Text4[i]);
   464   001062  5055               	movf	Test@i_203^0,w,c
   465   001064  0F60               	addlw	low _Text4
   466   001066  6ED9               	movwf	fsr2l,c
   467   001068  6ADA               	clrf	fsr2h,c
   468   00106A  50DF               	movf	indf2,w,c
   469   00106C  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   470   00106E  0E01               	movlw	1
   471   001070  EC88  F009         	call	_Send_Instruction_Data
   472   001074                     
   473                           ;main.c: 142:     }
   474   001074  4A55               	infsnz	Test@i_203^0,f,c
   475   001076  2A56               	incf	(Test@i_203+1)^0,f,c
   476   001078                     l931:
   477   001078  0E60               	movlw	low _Text4
   478   00107A  6E4D               	movwf	strlen@s^0,c
   479   00107C  EC52  F009         	call	_strlen	;wreg free
   480   001080  504D               	movf	?_strlen^0,w,c
   481   001082  5C55               	subwf	Test@i_203^0,w,c
   482   001084  504E               	movf	(?_strlen+1)^0,w,c
   483   001086  5856               	subwfb	(Test@i_203+1)^0,w,c
   484   001088  A0D8               	btfss	status,0,c
   485   00108A  EF49  F008         	goto	u101
   486   00108E  EF4B  F008         	goto	u100
   487   001092                     u101:
   488   001092  EF31  F008         	goto	l927
   489   001096                     u100:
   490   001096                     
   491                           ;main.c: 144:     Send_Instruction_Data(0, 0X94);
   492   001096  0E94               	movlw	148
   493   001098  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   494   00109A  0E00               	movlw	0
   495   00109C  EC88  F009         	call	_Send_Instruction_Data
   496   0010A0                     
   497                           ;main.c: 146:     for (int i = 0; i < strlen(Text1); i++) {
   498   0010A0  0E00               	movlw	0
   499   0010A2  6E58               	movwf	(Test@i_204+1)^0,c
   500   0010A4  0E00               	movlw	0
   501   0010A6  6E57               	movwf	Test@i_204^0,c
   502   0010A8  EF61  F008         	goto	l941
   503   0010AC                     l937:
   504                           
   505                           ;main.c: 148:         Send_Instruction_Data(1, Text1[i]);
   506   0010AC  5057               	movf	Test@i_204^0,w,c
   507   0010AE  0F39               	addlw	low _Text1
   508   0010B0  6ED9               	movwf	fsr2l,c
   509   0010B2  6ADA               	clrf	fsr2h,c
   510   0010B4  50DF               	movf	indf2,w,c
   511   0010B6  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   512   0010B8  0E01               	movlw	1
   513   0010BA  EC88  F009         	call	_Send_Instruction_Data
   514   0010BE                     
   515                           ;main.c: 150:     }
   516   0010BE  4A57               	infsnz	Test@i_204^0,f,c
   517   0010C0  2A58               	incf	(Test@i_204+1)^0,f,c
   518   0010C2                     l941:
   519   0010C2  0E39               	movlw	low _Text1
   520   0010C4  6E4D               	movwf	strlen@s^0,c
   521   0010C6  EC52  F009         	call	_strlen	;wreg free
   522   0010CA  504D               	movf	?_strlen^0,w,c
   523   0010CC  5C57               	subwf	Test@i_204^0,w,c
   524   0010CE  504E               	movf	(?_strlen+1)^0,w,c
   525   0010D0  5858               	subwfb	(Test@i_204+1)^0,w,c
   526   0010D2  A0D8               	btfss	status,0,c
   527   0010D4  EF6E  F008         	goto	u111
   528   0010D8  EF70  F008         	goto	u110
   529   0010DC                     u111:
   530   0010DC  EF56  F008         	goto	l937
   531   0010E0                     u110:
   532   0010E0                     
   533                           ;main.c: 152:     _delay((unsigned long)((100)*(16000000/4000.0)));
   534   0010E0  0E03               	movlw	3
   535   0010E2  6E52               	movwf	(??_Test+1)^0,c
   536   0010E4  0E08               	movlw	8
   537   0010E6  6E51               	movwf	??_Test^0,c
   538   0010E8  0E77               	movlw	119
   539   0010EA                     u137:
   540   0010EA  2EE8               	decfsz	wreg,f,c
   541   0010EC  D7FE               	bra	u137
   542   0010EE  2E51               	decfsz	??_Test^0,f,c
   543   0010F0  D7FC               	bra	u137
   544   0010F2  2E52               	decfsz	(??_Test+1)^0,f,c
   545   0010F4  D7FA               	bra	u137
   546   0010F6  0000               	nop	
   547   0010F8                     
   548                           ;main.c: 154:     Send_Instruction_Data(0, 0XD4);
   549   0010F8  0ED4               	movlw	212
   550   0010FA  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   551   0010FC  0E00               	movlw	0
   552   0010FE  EC88  F009         	call	_Send_Instruction_Data
   553   001102                     
   554                           ;main.c: 156:     for (int j = 0; j < strlen(Text2); j++) {
   555   001102  0E00               	movlw	0
   556   001104  6E5A               	movwf	(Test@j+1)^0,c
   557   001106  0E00               	movlw	0
   558   001108  6E59               	movwf	Test@j^0,c
   559   00110A  EF92  F008         	goto	l953
   560   00110E                     l949:
   561                           
   562                           ;main.c: 158:         Send_Instruction_Data(1, Text2[j]);
   563   00110E  5059               	movf	Test@j^0,w,c
   564   001110  0F1F               	addlw	low _Text2
   565   001112  6ED9               	movwf	fsr2l,c
   566   001114  6ADA               	clrf	fsr2h,c
   567   001116  50DF               	movf	indf2,w,c
   568   001118  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   569   00111A  0E01               	movlw	1
   570   00111C  EC88  F009         	call	_Send_Instruction_Data
   571   001120                     
   572                           ;main.c: 160:     }
   573   001120  4A59               	infsnz	Test@j^0,f,c
   574   001122  2A5A               	incf	(Test@j+1)^0,f,c
   575   001124                     l953:
   576   001124  0E1F               	movlw	low _Text2
   577   001126  6E4D               	movwf	strlen@s^0,c
   578   001128  EC52  F009         	call	_strlen	;wreg free
   579   00112C  504D               	movf	?_strlen^0,w,c
   580   00112E  5C59               	subwf	Test@j^0,w,c
   581   001130  504E               	movf	(?_strlen+1)^0,w,c
   582   001132  585A               	subwfb	(Test@j+1)^0,w,c
   583   001134  A0D8               	btfss	status,0,c
   584   001136  EF9F  F008         	goto	u121
   585   00113A  EFA1  F008         	goto	u120
   586   00113E                     u121:
   587   00113E  EF87  F008         	goto	l949
   588   001142                     u120:
   589   001142  0012               	return		;funcret
   590   001144                     __end_of_Test:
   591                           	callstack 0
   592                           
   593 ;; *************** function _strlen *****************
   594 ;; Defined at:
   595 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\strlen.c"
   596 ;; Parameters:    Size  Location     Type
   597 ;;  s               1    0[COMRAM] PTR const unsigned char 
   598 ;;		 -> Text2(26), Text1(20), Text4(30), Text3(30), 
   599 ;; Auto vars:     Size  Location     Type
   600 ;;  a               1    2[COMRAM] PTR const unsigned char 
   601 ;;		 -> Text2(26), Text1(20), Text4(30), Text3(30), 
   602 ;; Return value:  Size  Location     Type
   603 ;;                  2    0[COMRAM] unsigned int 
   604 ;; Registers used:
   605 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   606 ;; Tracked objects:
   607 ;;		On entry : 0/0
   608 ;;		On exit  : 0/0
   609 ;;		Unchanged: 0/0
   610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   611 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   612 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   614 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   615 ;;Total ram usage:        3 bytes
   616 ;; Hardware stack levels used: 1
   617 ;; This function calls:
   618 ;;		Nothing
   619 ;; This function is called by:
   620 ;;		_Test
   621 ;; This function uses a non-reentrant model
   622 ;;
   623                           
   624                           	psect	text2
   625   0012A4                     __ptext2:
   626                           	callstack 0
   627   0012A4                     _strlen:
   628                           	callstack 29
   629   0012A4  C04D  F04F         	movff	strlen@s,strlen@a
   630   0012A8  EF57  F009         	goto	l885
   631   0012AC                     l883:
   632   0012AC  2A4D               	incf	strlen@s^0,f,c
   633   0012AE                     l885:
   634   0012AE  504D               	movf	strlen@s^0,w,c
   635   0012B0  6ED9               	movwf	fsr2l,c
   636   0012B2  6ADA               	clrf	fsr2h,c
   637   0012B4  50DF               	movf	indf2,w,c
   638   0012B6  A4D8               	btfss	status,2,c
   639   0012B8  EF60  F009         	goto	u81
   640   0012BC  EF62  F009         	goto	u80
   641   0012C0                     u81:
   642   0012C0  EF56  F009         	goto	l883
   643   0012C4                     u80:
   644   0012C4  504F               	movf	strlen@a^0,w,c
   645   0012C6  5C4D               	subwf	strlen@s^0,w,c
   646   0012C8  6E4D               	movwf	?_strlen^0,c
   647   0012CA  6A4E               	clrf	(?_strlen+1)^0,c
   648   0012CC  BE4D               	btfsc	?_strlen^0,7,c
   649   0012CE  064E               	decf	(?_strlen+1)^0,f,c
   650   0012D0  0012               	return		;funcret
   651   0012D2                     __end_of_strlen:
   652                           	callstack 0
   653                           
   654 ;; *************** function _Init_LCD *****************
   655 ;; Defined at:
   656 ;;		line 84 in file "main.c"
   657 ;; Parameters:    Size  Location     Type
   658 ;;		None
   659 ;; Auto vars:     Size  Location     Type
   660 ;;		None
   661 ;; Return value:  Size  Location     Type
   662 ;;                  1    wreg      void 
   663 ;; Registers used:
   664 ;;		wreg, status,2, status,0, cstack
   665 ;; Tracked objects:
   666 ;;		On entry : 0/0
   667 ;;		On exit  : 0/0
   668 ;;		Unchanged: 0/0
   669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   672 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   673 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   674 ;;Total ram usage:        1 bytes
   675 ;; Hardware stack levels used: 1
   676 ;; Hardware stack levels required when called: 2
   677 ;; This function calls:
   678 ;;		_Send_Instruction_Data
   679 ;; This function is called by:
   680 ;;		_main
   681 ;; This function uses a non-reentrant model
   682 ;;
   683                           
   684                           	psect	text3
   685   001144                     __ptext3:
   686                           	callstack 0
   687   001144                     _Init_LCD:
   688                           	callstack 28
   689   001144                     
   690                           ;main.c: 86:     _delay((unsigned long)((20)*(16000000/4000.0)));
   691   001144  0E68               	movlw	104
   692   001146  6E51               	movwf	??_Init_LCD^0,c
   693   001148  0EE4               	movlw	228
   694   00114A                     u147:
   695   00114A  2EE8               	decfsz	wreg,f,c
   696   00114C  D7FE               	bra	u147
   697   00114E  2E51               	decfsz	??_Init_LCD^0,f,c
   698   001150  D7FC               	bra	u147
   699   001152  D000               	nop2	
   700   001154                     
   701                           ;main.c: 87:     Send_Instruction_Data(0, 0x30);
   702   001154  0E30               	movlw	48
   703   001156  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   704   001158  0E00               	movlw	0
   705   00115A  EC88  F009         	call	_Send_Instruction_Data
   706   00115E                     
   707                           ;main.c: 88:     _delay((unsigned long)((5)*(16000000/4000.0)));
   708   00115E  0E1A               	movlw	26
   709   001160  6E51               	movwf	??_Init_LCD^0,c
   710   001162  0EF8               	movlw	248
   711   001164                     u157:
   712   001164  2EE8               	decfsz	wreg,f,c
   713   001166  D7FE               	bra	u157
   714   001168  2E51               	decfsz	??_Init_LCD^0,f,c
   715   00116A  D7FC               	bra	u157
   716   00116C  D000               	nop2	
   717                           
   718                           ;main.c: 89:     Send_Instruction_Data(0, 0x30);
   719   00116E  0E30               	movlw	48
   720   001170  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   721   001172  0E00               	movlw	0
   722   001174  EC88  F009         	call	_Send_Instruction_Data
   723   001178                     
   724                           ;main.c: 90:     _delay((unsigned long)((5)*(16000000/4000.0)));
   725   001178  0E1A               	movlw	26
   726   00117A  6E51               	movwf	??_Init_LCD^0,c
   727   00117C  0EF8               	movlw	248
   728   00117E                     u167:
   729   00117E  2EE8               	decfsz	wreg,f,c
   730   001180  D7FE               	bra	u167
   731   001182  2E51               	decfsz	??_Init_LCD^0,f,c
   732   001184  D7FC               	bra	u167
   733   001186  D000               	nop2	
   734   001188                     
   735                           ;main.c: 91:     Send_Instruction_Data(0, 0x30);
   736   001188  0E30               	movlw	48
   737   00118A  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   738   00118C  0E00               	movlw	0
   739   00118E  EC88  F009         	call	_Send_Instruction_Data
   740   001192                     
   741                           ;main.c: 92:     Send_Instruction_Data(0, 0x02);
   742   001192  0E02               	movlw	2
   743   001194  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   744   001196  0E00               	movlw	0
   745   001198  EC88  F009         	call	_Send_Instruction_Data
   746   00119C                     
   747                           ;main.c: 93:     Send_Instruction_Data(0, 0x06);
   748   00119C  0E06               	movlw	6
   749   00119E  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   750   0011A0  0E00               	movlw	0
   751   0011A2  EC88  F009         	call	_Send_Instruction_Data
   752   0011A6                     
   753                           ;main.c: 94:     Send_Instruction_Data(0, 0x0F);
   754   0011A6  0E0F               	movlw	15
   755   0011A8  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   756   0011AA  0E00               	movlw	0
   757   0011AC  EC88  F009         	call	_Send_Instruction_Data
   758   0011B0                     
   759                           ;main.c: 95:     Send_Instruction_Data(0, 0x28);
   760   0011B0  0E28               	movlw	40
   761   0011B2  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   762   0011B4  0E00               	movlw	0
   763   0011B6  EC88  F009         	call	_Send_Instruction_Data
   764   0011BA                     
   765                           ;main.c: 96:     Send_Instruction_Data(0, 0x01);
   766   0011BA  0E01               	movlw	1
   767   0011BC  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   768   0011BE  0E00               	movlw	0
   769   0011C0  EC88  F009         	call	_Send_Instruction_Data
   770   0011C4                     
   771                           ;main.c: 97:     _delay((unsigned long)((5)*(16000000/4000.0)));
   772   0011C4  0E1A               	movlw	26
   773   0011C6  6E51               	movwf	??_Init_LCD^0,c
   774   0011C8  0EF8               	movlw	248
   775   0011CA                     u177:
   776   0011CA  2EE8               	decfsz	wreg,f,c
   777   0011CC  D7FE               	bra	u177
   778   0011CE  2E51               	decfsz	??_Init_LCD^0,f,c
   779   0011D0  D7FC               	bra	u177
   780   0011D2  D000               	nop2	
   781   0011D4  0012               	return		;funcret
   782   0011D6                     __end_of_Init_LCD:
   783                           	callstack 0
   784                           
   785 ;; *************** function _Send_Instruction_Data *****************
   786 ;; Defined at:
   787 ;;		line 103 in file "main.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  Instruction     1    wreg     unsigned char 
   790 ;;  Data            1    2[COMRAM] unsigned char 
   791 ;; Auto vars:     Size  Location     Type
   792 ;;  Instruction     1    3[COMRAM] unsigned char 
   793 ;; Return value:  Size  Location     Type
   794 ;;                  1    wreg      void 
   795 ;; Registers used:
   796 ;;		wreg, status,2, status,0, cstack
   797 ;; Tracked objects:
   798 ;;		On entry : 0/0
   799 ;;		On exit  : 0/0
   800 ;;		Unchanged: 0/0
   801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   802 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   803 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   805 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   806 ;;Total ram usage:        2 bytes
   807 ;; Hardware stack levels used: 1
   808 ;; Hardware stack levels required when called: 1
   809 ;; This function calls:
   810 ;;		_LCD_Instruction
   811 ;; This function is called by:
   812 ;;		_Init_LCD
   813 ;;		_Test
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           	psect	text4
   818   001310                     __ptext4:
   819                           	callstack 0
   820   001310                     _Send_Instruction_Data:
   821                           	callstack 28
   822                           
   823                           ;incstack = 0
   824                           ;Send_Instruction_Data@Instruction stored from wreg
   825   001310  6E50               	movwf	Send_Instruction_Data@Instruction^0,c
   826   001312                     
   827                           ;main.c: 105:     LATCbits.LATC4 = Instruction;
   828   001312  B050               	btfsc	Send_Instruction_Data@Instruction^0,0,c
   829   001314  D002               	bra	u75
   830   001316  988B               	bcf	139,4,c	;volatile
   831   001318  D001               	bra	u76
   832   00131A                     u75:
   833   00131A  888B               	bsf	139,4,c	;volatile
   834   00131C                     u76:
   835   00131C                     
   836                           ;main.c: 106:     LCD_Instruction(Data >> 4);
   837   00131C  384F               	swapf	Send_Instruction_Data@Data^0,w,c
   838   00131E  0B0F               	andlw	15
   839   001320  EC34  F009         	call	_LCD_Instruction
   840   001324                     
   841                           ;main.c: 107:     LCD_Instruction(Data);
   842   001324  504F               	movf	Send_Instruction_Data@Data^0,w,c
   843   001326  EC34  F009         	call	_LCD_Instruction
   844   00132A  0012               	return		;funcret
   845   00132C                     __end_of_Send_Instruction_Data:
   846                           	callstack 0
   847                           
   848 ;; *************** function _LCD_Instruction *****************
   849 ;; Defined at:
   850 ;;		line 113 in file "main.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;  Instruction     1    wreg     unsigned char 
   853 ;; Auto vars:     Size  Location     Type
   854 ;;  Instruction     1    1[COMRAM] unsigned char 
   855 ;; Return value:  Size  Location     Type
   856 ;;                  1    wreg      void 
   857 ;; Registers used:
   858 ;;		wreg, status,2, cstack
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   865 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   866 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   867 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   868 ;;Total ram usage:        2 bytes
   869 ;; Hardware stack levels used: 1
   870 ;; This function calls:
   871 ;;		Nothing
   872 ;; This function is called by:
   873 ;;		_Send_Instruction_Data
   874 ;; This function uses a non-reentrant model
   875 ;;
   876                           
   877                           	psect	text5
   878   001268                     __ptext5:
   879                           	callstack 0
   880   001268                     _LCD_Instruction:
   881                           	callstack 28
   882                           
   883                           ;incstack = 0
   884                           ;LCD_Instruction@Instruction stored from wreg
   885   001268  6E4E               	movwf	LCD_Instruction@Instruction^0,c
   886   00126A                     
   887                           ;main.c: 115:     LATCbits.LATC5 = 1;
   888   00126A  8A8B               	bsf	139,5,c	;volatile
   889   00126C                     
   890                           ;main.c: 116:     _delay((unsigned long)((15)*(16000000/4000.0)));
   891   00126C  0E4E               	movlw	78
   892   00126E  6E4D               	movwf	??_LCD_Instruction^0,c
   893   001270  0EEB               	movlw	235
   894   001272                     u187:
   895   001272  2EE8               	decfsz	wreg,f,c
   896   001274  D7FE               	bra	u187
   897   001276  2E4D               	decfsz	??_LCD_Instruction^0,f,c
   898   001278  D7FC               	bra	u187
   899   00127A  0000               	nop	
   900   00127C                     
   901                           ;main.c: 117:     LATD = Instruction;
   902   00127C  C04E  FF8C         	movff	LCD_Instruction@Instruction,3980	;volatile
   903   001280                     
   904                           ;main.c: 118:     _delay((unsigned long)((15)*(16000000/4000.0)));
   905   001280  0E4E               	movlw	78
   906   001282  6E4D               	movwf	??_LCD_Instruction^0,c
   907   001284  0EEB               	movlw	235
   908   001286                     u197:
   909   001286  2EE8               	decfsz	wreg,f,c
   910   001288  D7FE               	bra	u197
   911   00128A  2E4D               	decfsz	??_LCD_Instruction^0,f,c
   912   00128C  D7FC               	bra	u197
   913   00128E  0000               	nop	
   914   001290                     
   915                           ;main.c: 119:     LATCbits.LATC5 = 0;
   916   001290  9A8B               	bcf	139,5,c	;volatile
   917   001292                     
   918                           ;main.c: 120:     _delay((unsigned long)((15)*(16000000/4000.0)));
   919   001292  0E4E               	movlw	78
   920   001294  6E4D               	movwf	??_LCD_Instruction^0,c
   921   001296  0EEB               	movlw	235
   922   001298                     u207:
   923   001298  2EE8               	decfsz	wreg,f,c
   924   00129A  D7FE               	bra	u207
   925   00129C  2E4D               	decfsz	??_LCD_Instruction^0,f,c
   926   00129E  D7FC               	bra	u207
   927   0012A0  0000               	nop	
   928   0012A2  0012               	return		;funcret
   929   0012A4                     __end_of_LCD_Instruction:
   930                           	callstack 0
   931                           
   932 ;; *************** function _Configurations *****************
   933 ;; Defined at:
   934 ;;		line 62 in file "main.c"
   935 ;; Parameters:    Size  Location     Type
   936 ;;		None
   937 ;; Auto vars:     Size  Location     Type
   938 ;;		None
   939 ;; Return value:  Size  Location     Type
   940 ;;                  1    wreg      void 
   941 ;; Registers used:
   942 ;;		wreg, status,2
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   952 ;;Total ram usage:        0 bytes
   953 ;; Hardware stack levels used: 1
   954 ;; This function calls:
   955 ;;		Nothing
   956 ;; This function is called by:
   957 ;;		_main
   958 ;; This function uses a non-reentrant model
   959 ;;
   960                           
   961                           	psect	text6
   962   0012D2                     __ptext6:
   963                           	callstack 0
   964   0012D2                     _Configurations:
   965                           	callstack 30
   966   0012D2                     
   967                           ;main.c: 64:     OSCCON = 0x72;
   968   0012D2  0E72               	movlw	114
   969   0012D4  6ED3               	movwf	211,c	;volatile
   970                           
   971                           ;main.c: 67:     ANSELD = 0x00;
   972   0012D6  0E00               	movlw	0
   973   0012D8  010F               	movlb	15	; () banked
   974   0012DA  6F3B               	movwf	59,b	;volatile
   975   0012DC                     
   976                           ; BSR set to: 15
   977                           ;main.c: 68:     ANSELCbits.ANSC4 = 0;
   978   0012DC  993A               	bcf	58,4,b	;volatile
   979   0012DE                     
   980                           ; BSR set to: 15
   981                           ;main.c: 69:     ANSELCbits.ANSC5 = 0;
   982   0012DE  9B3A               	bcf	58,5,b	;volatile
   983                           
   984                           ;main.c: 72:     TRISD = 0x00;
   985   0012E0  0E00               	movlw	0
   986   0012E2  6E95               	movwf	149,c	;volatile
   987   0012E4                     
   988                           ; BSR set to: 15
   989                           ;main.c: 73:     TRISCbits.RC4 = 0;
   990   0012E4  9894               	bcf	148,4,c	;volatile
   991   0012E6                     
   992                           ; BSR set to: 15
   993                           ;main.c: 74:     TRISCbits.RC5 = 0;
   994   0012E6  9A94               	bcf	148,5,c	;volatile
   995                           
   996                           ;main.c: 77:     LATC = 0;
   997   0012E8  0E00               	movlw	0
   998   0012EA  6E8B               	movwf	139,c	;volatile
   999                           
  1000                           ;main.c: 78:     LATD = 0;
  1001   0012EC  0E00               	movlw	0
  1002   0012EE  6E8C               	movwf	140,c	;volatile
  1003   0012F0                     
  1004                           ; BSR set to: 15
  1005   0012F0  0012               	return		;funcret
  1006   0012F2                     __end_of_Configurations:
  1007                           	callstack 0
  1008                           
  1009                           	psect	smallconst
  1010   001000                     __psmallconst:
  1011                           	callstack 0
  1012   001000  00                 	db	0
  1013   001001  00                 	db	0	; dummy byte at the end
  1014   000000                     
  1015                           	psect	rparam
  1016   000000                     
  1017                           	psect	config
  1018                           
  1019                           ; Padding undefined space
  1020   300000                     	org	3145728
  1021   300000  FF                 	db	255
  1022                           
  1023                           ;Config register CONFIG1H @ 0x300001
  1024                           ;	Oscillator Selection bits
  1025                           ;	FOSC = INTIO67, Internal oscillator block
  1026                           ;	4X PLL Enable
  1027                           ;	PLLCFG = OFF, Oscillator used directly
  1028                           ;	Primary clock enable bit
  1029                           ;	PRICLKEN = ON, Primary clock is always enabled
  1030                           ;	Fail-Safe Clock Monitor Enable bit
  1031                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1032                           ;	Internal/External Oscillator Switchover bit
  1033                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1034   300001                     	org	3145729
  1035   300001  28                 	db	40
  1036                           
  1037                           ;Config register CONFIG2L @ 0x300002
  1038                           ;	Power-up Timer Enable bit
  1039                           ;	PWRTEN = OFF, Power up timer disabled
  1040                           ;	Brown-out Reset Enable bits
  1041                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1042                           ;	Brown Out Reset Voltage bits
  1043                           ;	BORV = 190, VBOR set to 1.90 V nominal
  1044   300002                     	org	3145730
  1045   300002  1F                 	db	31
  1046                           
  1047                           ;Config register CONFIG2H @ 0x300003
  1048                           ;	Watchdog Timer Enable bits
  1049                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  1050                           ;	Watchdog Timer Postscale Select bits
  1051                           ;	WDTPS = 32768, 1:32768
  1052   300003                     	org	3145731
  1053   300003  3C                 	db	60
  1054                           
  1055                           ; Padding undefined space
  1056   300004                     	org	3145732
  1057   300004  FF                 	db	255
  1058                           
  1059                           ;Config register CONFIG3H @ 0x300005
  1060                           ;	CCP2 MUX bit
  1061                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  1062                           ;	PORTB A/D Enable bit
  1063                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  1064                           ;	P3A/CCP3 Mux bit
  1065                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
  1066                           ;	HFINTOSC Fast Start-up
  1067                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
  1068                           ;	Timer3 Clock input mux bit
  1069                           ;	T3CMX = PORTC0, T3CKI is on RC0
  1070                           ;	ECCP2 B output mux bit
  1071                           ;	P2BMX = PORTD2, P2B is on RD2
  1072                           ;	MCLR Pin Enable bit
  1073                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
  1074   300005                     	org	3145733
  1075   300005  BD                 	db	189
  1076                           
  1077                           ;Config register CONFIG4L @ 0x300006
  1078                           ;	Stack Full/Underflow Reset Enable bit
  1079                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1080                           ;	Single-Supply ICSP Enable bit
  1081                           ;	LVP = OFF, Single-Supply ICSP disabled
  1082                           ;	Extended Instruction Set Enable bit
  1083                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1084                           ;	Background Debug
  1085                           ;	DEBUG = 0x1, unprogrammed default
  1086   300006                     	org	3145734
  1087   300006  81                 	db	129
  1088                           
  1089                           ; Padding undefined space
  1090   300007                     	org	3145735
  1091   300007  FF                 	db	255
  1092                           
  1093                           ;Config register CONFIG5L @ 0x300008
  1094                           ;	Code Protection Block 0
  1095                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  1096                           ;	Code Protection Block 1
  1097                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  1098                           ;	Code Protection Block 2
  1099                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  1100                           ;	Code Protection Block 3
  1101                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  1102   300008                     	org	3145736
  1103   300008  0F                 	db	15
  1104                           
  1105                           ;Config register CONFIG5H @ 0x300009
  1106                           ;	Boot Block Code Protection bit
  1107                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1108                           ;	Data EEPROM Code Protection bit
  1109                           ;	CPD = OFF, Data EEPROM not code-protected
  1110   300009                     	org	3145737
  1111   300009  C0                 	db	192
  1112                           
  1113                           ;Config register CONFIG6L @ 0x30000A
  1114                           ;	Write Protection Block 0
  1115                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  1116                           ;	Write Protection Block 1
  1117                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  1118                           ;	Write Protection Block 2
  1119                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  1120                           ;	Write Protection Block 3
  1121                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  1122   30000A                     	org	3145738
  1123   30000A  0F                 	db	15
  1124                           
  1125                           ;Config register CONFIG6H @ 0x30000B
  1126                           ;	Configuration Register Write Protection bit
  1127                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1128                           ;	Boot Block Write Protection bit
  1129                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  1130                           ;	Data EEPROM Write Protection bit
  1131                           ;	WRTD = OFF, Data EEPROM not write-protected
  1132   30000B                     	org	3145739
  1133   30000B  E0                 	db	224
  1134                           
  1135                           ;Config register CONFIG7L @ 0x30000C
  1136                           ;	Table Read Protection Block 0
  1137                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  1138                           ;	Table Read Protection Block 1
  1139                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1140                           ;	Table Read Protection Block 2
  1141                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  1142                           ;	Table Read Protection Block 3
  1143                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  1144   30000C                     	org	3145740
  1145   30000C  0F                 	db	15
  1146                           
  1147                           ;Config register CONFIG7H @ 0x30000D
  1148                           ;	Boot Block Table Read Protection bit
  1149                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1150   30000D                     	org	3145741
  1151   30000D  40                 	db	64
  1152                           tosu	equ	0xFFF
  1153                           tosh	equ	0xFFE
  1154                           tosl	equ	0xFFD
  1155                           stkptr	equ	0xFFC
  1156                           pclatu	equ	0xFFB
  1157                           pclath	equ	0xFFA
  1158                           pcl	equ	0xFF9
  1159                           tblptru	equ	0xFF8
  1160                           tblptrh	equ	0xFF7
  1161                           tblptrl	equ	0xFF6
  1162                           tablat	equ	0xFF5
  1163                           prodh	equ	0xFF4
  1164                           prodl	equ	0xFF3
  1165                           indf0	equ	0xFEF
  1166                           postinc0	equ	0xFEE
  1167                           postdec0	equ	0xFED
  1168                           preinc0	equ	0xFEC
  1169                           plusw0	equ	0xFEB
  1170                           fsr0h	equ	0xFEA
  1171                           fsr0l	equ	0xFE9
  1172                           wreg	equ	0xFE8
  1173                           indf1	equ	0xFE7
  1174                           postinc1	equ	0xFE6
  1175                           postdec1	equ	0xFE5
  1176                           preinc1	equ	0xFE4
  1177                           plusw1	equ	0xFE3
  1178                           fsr1h	equ	0xFE2
  1179                           fsr1l	equ	0xFE1
  1180                           bsr	equ	0xFE0
  1181                           indf2	equ	0xFDF
  1182                           postinc2	equ	0xFDE
  1183                           postdec2	equ	0xFDD
  1184                           preinc2	equ	0xFDC
  1185                           plusw2	equ	0xFDB
  1186                           fsr2h	equ	0xFDA
  1187                           fsr2l	equ	0xFD9
  1188                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        106
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      90
    BANK0           160      0      30
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    strlen@a	PTR const unsigned char  size(1) Largest target is 30
		 -> Text1(COMRAM[20]), Text2(COMRAM[26]), Text3(COMRAM[30]), Text4(BANK0[30]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 30
		 -> Text1(COMRAM[20]), Text2(COMRAM[26]), Text3(COMRAM[30]), Text4(BANK0[30]), 


Critical Paths under _main in COMRAM

    _main->_Test
    _Test->_Send_Instruction_Data
    _Init_LCD->_Send_Instruction_Data
    _Send_Instruction_Data->_LCD_Instruction

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3186
                     _Configurations
                           _Init_LCD
                               _Test
 ---------------------------------------------------------------------------------
 (1) _Test                                                10    10      0    1882
                                              4 COMRAM    10    10      0
              _Send_Instruction_Data
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               3     1      2     394
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init_LCD                                             1     1      0    1304
                                              4 COMRAM     1     1      0
              _Send_Instruction_Data
 ---------------------------------------------------------------------------------
 (2) _Send_Instruction_Data                                2     1      1    1304
                                              2 COMRAM     2     1      1
                    _LCD_Instruction
 ---------------------------------------------------------------------------------
 (3) _LCD_Instruction                                      2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Configurations                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Configurations
   _Init_LCD
     _Send_Instruction_Data
       _LCD_Instruction
   _Test
     _Send_Instruction_Data
     _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      42        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      1E       5       18.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      E      5A       1       94.7%
BITBIGSFRlhll       4F      0       0      40        0.0%
BITBIGSFRlhh        3D      0       0      38        0.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITBIGSFRh          2C      0       0      37        0.0%
BITBIGSFRlhlh        7      0       0      39        0.0%
BITBIGSFRll          2      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      78      28        0.0%
DATA                 0      0      78       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Thu Feb 01 01:25:38 2024

                              l43 1338                                l52 11D4                                l44 1338  
                              l55 132A                                l49 12F0                                l73 1142  
                              l58 12A2                                u80 12C4                                u81 12C0  
                              u90 104C                                u75 131A                                u91 1048  
                              u76 131C                               l901 1192                               l911 11C4  
                             l903 119C                               l905 11A6                               l753 12D0  
                             l921 102E                               l913 1002                               l907 11B0  
                             l931 1078                               l923 104C                               l915 100C  
                             l909 11BA                               l941 10C2                               l933 1096  
                             l925 1056                               l917 1018                               l791 12E6  
                             l783 12D2                               l871 1290                               l863 126A  
                             l951 1120                               l943 10E0                               l935 10A0  
                             l927 1062                               l919 102A                               l785 12DC  
                             l873 1292                               l865 126C                               l881 12A4  
                             l953 1124                               l945 10F8                               l937 10AC  
                             l929 1074                               l787 12DE                               l867 127C  
                             l875 1312                               l891 1144                               l883 12AC  
                             l947 1102                               l939 10BE                               l955 132C  
                             l789 12E4                               l869 1280                               l877 131C  
                             l893 1154                               l885 12AE                               l949 110E  
                             l957 1330                               l879 1324                               l895 115E  
                             l887 12C4                               l959 1334                               l897 1178  
                             l899 1188                               u100 1096                               u101 1092  
                             u110 10E0                               u111 10DC                               u120 1142  
                             u121 113E                               u207 1298                               u137 10EA  
                             u147 114A                               u157 1164                               u167 117E  
                             u177 11CA                               u187 1272                               u197 1286  
                             wreg 0FE8                              _LATC 0F8B                              _LATD 0F8C  
                            _Test 1002                              _main 132C                              fsr2h 0FDA  
                            indf2 0FDF                              fsr1l 0FE1                              fsr2l 0FD9  
                            start 0000                      ___param_bank 0000                   _LCD_Instruction 1268  
Send_Instruction_Data@Instruction 0050                             ?_Test 004D                             ?_main 004D  
                           _TRISD 0F95                             Test@i 0053                             Test@j 0059  
                           _Text1 0039                             _Text2 001F                             _Text3 0001  
                           _Text4 0060                             tablat 0FF5                             status 0FD8  
                 __initialization 1222                      __end_of_Test 1144                      __end_of_main 1340  
                __end_of_Init_LCD 11D6             _Send_Instruction_Data 1310                            ??_Test 0051  
                          ??_main 005B                     __activetblptr 0000                            _ANSELD 0F3B  
      LCD_Instruction@Instruction 004E                            _OSCCON 0FD3           __end_of_LCD_Instruction 12A4  
                          isa$std 0001                            _strlen 12A4                      __pdataCOMRAM 0001  
                    __mediumconst 0000                            tblptrh 0FF7                            tblptrl 0FF6  
                          tblptru 0FF8                        __accesstop 0060           __end_of__initialization 1262  
                   ___rparam_used 0001                    __pcstackCOMRAM 004D                      __pidataBANK0 12F2  
          ?_Send_Instruction_Data 004F                         ?_Init_LCD 004D                  ?_LCD_Instruction 004D  
                         ?_strlen 004D                        ??_Init_LCD 0051                           __Hparam 0000  
                         __Lparam 0000                      __psmallconst 1000                           __pcinit 1222  
                         __ramtop 1000                           __ptext0 132C                           __ptext1 1002  
                         __ptext2 12A4                           __ptext3 1144                           __ptext4 1310  
                         __ptext5 1268                           __ptext6 12D2              end_of_initialization 1262  
                         postdec1 0FE5                           postinc0 0FEE                           strlen@a 004F  
                         strlen@s 004D                         _TRISCbits 0F94           ??_Send_Instruction_Data 0050  
                   __pidataCOMRAM 11D6                    __end_of_strlen 12D2               start_initialization 1222  
       Send_Instruction_Data@Data 004F                    _Configurations 12D2                         Test@i_203 0055  
                       Test@i_204 0057                       __pdataBANK0 0060                          ??_strlen 004F  
          __end_of_Configurations 12F2                       __smallconst 1000                   ?_Configurations 004D  
                        _LATCbits 0F8B                         copy_data0 1236                         copy_data1 1256  
                        _Init_LCD 1144                          __Hrparam 0000                          __Lrparam 0000  
   __end_of_Send_Instruction_Data 132C                        _ANSELCbits 0F3A                 ??_LCD_Instruction 004D  
                        isa$xinst 0000                  ??_Configurations 004D  
