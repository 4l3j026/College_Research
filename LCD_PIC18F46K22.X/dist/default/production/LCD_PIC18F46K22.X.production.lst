

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sat Jan 13 23:08:49 2024

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21   000000                     
    22                           ; Generated 09/02/2023 GMT
    23                           ; 
    24                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F46K22 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56   000000                     
    57                           	psect	idataCOMRAM
    58   00FDC0                     __pidataCOMRAM:
    59                           	callstack 0
    60                           
    61                           ;initializer for _Text3
    62   00FDC0  57                 	db	87
    63   00FDC1  65                 	db	101
    64   00FDC2  6C                 	db	108
    65   00FDC3  63                 	db	99
    66   00FDC4  6F                 	db	111
    67   00FDC5  6D                 	db	109
    68   00FDC6  65                 	db	101
    69   00FDC7  20                 	db	32
    70   00FDC8  74                 	db	116
    71   00FDC9  6F                 	db	111
    72   00FDCA  20                 	db	32
    73   00FDCB  74                 	db	116
    74   00FDCC  68                 	db	104
    75   00FDCD  69                 	db	105
    76   00FDCE  73                 	db	115
    77   00FDCF  00                 	db	0
    78   00FDD0  00                 	db	0
    79   00FDD1  00                 	db	0
    80   00FDD2  00                 	db	0
    81   00FDD3  00                 	db	0
    82   00FDD4  00                 	db	0
    83   00FDD5  00                 	db	0
    84   00FDD6  00                 	db	0
    85   00FDD7  00                 	db	0
    86   00FDD8  00                 	db	0
    87   00FDD9  00                 	db	0
    88   00FDDA  00                 	db	0
    89   00FDDB  00                 	db	0
    90   00FDDC  00                 	db	0
    91   00FDDD  00                 	db	0
    92                           
    93                           ;initializer for _Text2
    94   00FDDE  45                 	db	69
    95   00FDDF  76                 	db	118
    96   00FDE0  65                 	db	101
    97   00FDE1  72                 	db	114
    98   00FDE2  79                 	db	121
    99   00FDE3  6F                 	db	111
   100   00FDE4  6E                 	db	110
   101   00FDE5  65                 	db	101
   102   00FDE6  21                 	db	33
   103   00FDE7  00                 	db	0
   104   00FDE8  00                 	db	0
   105   00FDE9  00                 	db	0
   106   00FDEA  00                 	db	0
   107   00FDEB  00                 	db	0
   108   00FDEC  00                 	db	0
   109   00FDED  00                 	db	0
   110   00FDEE  00                 	db	0
   111   00FDEF  00                 	db	0
   112   00FDF0  00                 	db	0
   113   00FDF1  00                 	db	0
   114   00FDF2  00                 	db	0
   115   00FDF3  00                 	db	0
   116   00FDF4  00                 	db	0
   117   00FDF5  00                 	db	0
   118   00FDF6  00                 	db	0
   119   00FDF7  00                 	db	0
   120                           
   121                           ;initializer for _Text1
   122   00FDF8  48                 	db	72
   123   00FDF9  65                 	db	101
   124   00FDFA  6C                 	db	108
   125   00FDFB  6C                 	db	108
   126   00FDFC  6F                 	db	111
   127   00FDFD  21                 	db	33
   128   00FDFE  00                 	db	0
   129   00FDFF  00                 	db	0
   130   00FE00  00                 	db	0
   131   00FE01  00                 	db	0
   132   00FE02  00                 	db	0
   133   00FE03  00                 	db	0
   134   00FE04  00                 	db	0
   135   00FE05  00                 	db	0
   136   00FE06  00                 	db	0
   137   00FE07  00                 	db	0
   138   00FE08  00                 	db	0
   139   00FE09  00                 	db	0
   140   00FE0A  00                 	db	0
   141   00FE0B  00                 	db	0
   142                           
   143                           	psect	idataBANK0
   144   00FCCA                     __pidataBANK0:
   145                           	callstack 0
   146                           
   147                           ;initializer for _Text4
   148   00FCCA  4D                 	db	77
   149   00FCCB  69                 	db	105
   150   00FCCC  63                 	db	99
   151   00FCCD  72                 	db	114
   152   00FCCE  6F                 	db	111
   153   00FCCF  63                 	db	99
   154   00FCD0  6F                 	db	111
   155   00FCD1  6E                 	db	110
   156   00FCD2  74                 	db	116
   157   00FCD3  72                 	db	114
   158   00FCD4  6F                 	db	111
   159   00FCD5  6C                 	db	108
   160   00FCD6  6C                 	db	108
   161   00FCD7  65                 	db	101
   162   00FCD8  72                 	db	114
   163   00FCD9  21                 	db	33
   164   00FCDA  00                 	db	0
   165   00FCDB  00                 	db	0
   166   00FCDC  00                 	db	0
   167   00FCDD  00                 	db	0
   168   00FCDE  00                 	db	0
   169   00FCDF  00                 	db	0
   170   00FCE0  00                 	db	0
   171   00FCE1  00                 	db	0
   172   00FCE2  00                 	db	0
   173   00FCE3  00                 	db	0
   174   00FCE4  00                 	db	0
   175   00FCE5  00                 	db	0
   176   00FCE6  00                 	db	0
   177   00FCE7  00                 	db	0
   178   000000                     _LATCbits	set	3979
   179   000000                     _ANSELCbits	set	3898
   180   000000                     _ANSELD	set	3899
   181   000000                     _OSCCON	set	4051
   182   000000                     _LATC	set	3979
   183   000000                     _TRISCbits	set	3988
   184   000000                     _TRISD	set	3989
   185   000000                     _LATD	set	3980
   186                           
   187                           ; #config settings
   188                           
   189                           	psect	cinit
   190   00FD7A                     __pcinit:
   191                           	callstack 0
   192   00FD7A                     start_initialization:
   193                           	callstack 0
   194   00FD7A                     __initialization:
   195                           	callstack 0
   196                           
   197                           ; Initialize objects allocated to BANK0 (30 bytes)
   198                           ; load TBLPTR registers with __pidataBANK0
   199   00FD7A  0ECA               	movlw	low __pidataBANK0
   200   00FD7C  6EF6               	movwf	tblptrl,c
   201   00FD7E  0EFC               	movlw	high __pidataBANK0
   202   00FD80  6EF7               	movwf	tblptrh,c
   203   00FD82  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   204   00FD84  6EF8               	movwf	tblptru,c
   205   00FD86  EE00  F060         	lfsr	0,__pdataBANK0
   206   00FD8A  EE10 F01E          	lfsr	1,30
   207   00FD8E                     copy_data0:
   208   00FD8E  0009               	tblrd		*+
   209   00FD90  CFF5 FFEE          	movff	tablat,postinc0
   210   00FD94  50E5               	movf	postdec1,w,c
   211   00FD96  50E1               	movf	fsr1l,w,c
   212   00FD98  E1FA               	bnz	copy_data0
   213                           
   214                           ; Initialize objects allocated to COMRAM (76 bytes)
   215                           ; load TBLPTR registers with __pidataCOMRAM
   216   00FD9A  0EC0               	movlw	low __pidataCOMRAM
   217   00FD9C  6EF6               	movwf	tblptrl,c
   218   00FD9E  0EFD               	movlw	high __pidataCOMRAM
   219   00FDA0  6EF7               	movwf	tblptrh,c
   220   00FDA2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   221   00FDA4  6EF8               	movwf	tblptru,c
   222   00FDA6  EE00  F001         	lfsr	0,__pdataCOMRAM
   223   00FDAA  EE10 F04C          	lfsr	1,76
   224   00FDAE                     copy_data1:
   225   00FDAE  0009               	tblrd		*+
   226   00FDB0  CFF5 FFEE          	movff	tablat,postinc0
   227   00FDB4  50E5               	movf	postdec1,w,c
   228   00FDB6  50E1               	movf	fsr1l,w,c
   229   00FDB8  E1FA               	bnz	copy_data1
   230   00FDBA                     end_of_initialization:
   231                           	callstack 0
   232   00FDBA                     __end_of__initialization:
   233                           	callstack 0
   234   00FDBA  0100               	movlb	0
   235   00FDBC  EF4D  F07E         	goto	_main	;jump to C main() function
   236                           
   237                           	psect	dataCOMRAM
   238   000001                     __pdataCOMRAM:
   239                           	callstack 0
   240   000001                     _Text3:
   241                           	callstack 0
   242   000001                     	ds	30
   243   00001F                     _Text2:
   244                           	callstack 0
   245   00001F                     	ds	26
   246   000039                     _Text1:
   247                           	callstack 0
   248   000039                     	ds	20
   249                           
   250                           	psect	dataBANK0
   251   000060                     __pdataBANK0:
   252                           	callstack 0
   253   000060                     _Text4:
   254                           	callstack 0
   255   000060                     	ds	30
   256                           
   257                           	psect	cstackCOMRAM
   258   00004D                     __pcstackCOMRAM:
   259                           	callstack 0
   260   00004D                     ??_LCD_Instruction:
   261   00004D                     ?_strlen:
   262                           	callstack 0
   263   00004D                     strlen@s:
   264                           	callstack 0
   265                           
   266                           ; 2 bytes @ 0x0
   267   00004D                     	ds	1
   268   00004E                     LCD_Instruction@Instruction:
   269                           	callstack 0
   270                           
   271                           ; 1 bytes @ 0x1
   272   00004E                     	ds	1
   273   00004F                     Send_Instruction_Data@Data:
   274                           	callstack 0
   275   00004F                     strlen@a:
   276                           	callstack 0
   277                           
   278                           ; 2 bytes @ 0x2
   279   00004F                     	ds	1
   280   000050                     Send_Instruction_Data@Instruction:
   281                           	callstack 0
   282                           
   283                           ; 1 bytes @ 0x3
   284   000050                     	ds	1
   285   000051                     ??_Init_LCD:
   286   000051                     ??_Test:
   287                           
   288                           ; 1 bytes @ 0x4
   289   000051                     	ds	2
   290   000053                     Test@i:
   291                           	callstack 0
   292                           
   293                           ; 2 bytes @ 0x6
   294   000053                     	ds	2
   295   000055                     Test@i_203:
   296                           	callstack 0
   297                           
   298                           ; 2 bytes @ 0x8
   299   000055                     	ds	2
   300   000057                     Test@i_204:
   301                           	callstack 0
   302                           
   303                           ; 2 bytes @ 0xA
   304   000057                     	ds	2
   305   000059                     Test@j:
   306                           	callstack 0
   307                           
   308                           ; 2 bytes @ 0xC
   309   000059                     	ds	2
   310   00005B                     
   311                           ; 1 bytes @ 0xE
   312 ;;
   313 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   314 ;;
   315 ;; *************** function _main *****************
   316 ;; Defined at:
   317 ;;		line 46 in file "main.c"
   318 ;; Parameters:    Size  Location     Type
   319 ;;		None
   320 ;; Auto vars:     Size  Location     Type
   321 ;;		None
   322 ;; Return value:  Size  Location     Type
   323 ;;                  1    wreg      void 
   324 ;; Registers used:
   325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   326 ;; Tracked objects:
   327 ;;		On entry : 0/0
   328 ;;		On exit  : 0/0
   329 ;;		Unchanged: 0/0
   330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   335 ;;Total ram usage:        0 bytes
   336 ;; Hardware stack levels required when called: 3
   337 ;; This function calls:
   338 ;;		_Configurations
   339 ;;		_Init_LCD
   340 ;;		_Test
   341 ;; This function is called by:
   342 ;;		Startup code after reset
   343 ;; This function uses a non-reentrant model
   344 ;;
   345                           
   346                           	psect	text0
   347   00FC9A                     __ptext0:
   348                           	callstack 0
   349   00FC9A                     _main:
   350                           	callstack 28
   351   00FC9A                     
   352                           ;main.c: 49:     Configurations();
   353   00FC9A  EC74  F07E         	call	_Configurations	;wreg free
   354   00FC9E                     
   355                           ;main.c: 50:     Init_LCD();
   356   00FC9E  EC06  F07F         	call	_Init_LCD	;wreg free
   357   00FCA2                     
   358                           ;main.c: 51:     Test();
   359   00FCA2  EC4F  F07F         	call	_Test	;wreg free
   360   00FCA6                     l43:
   361   00FCA6  EF53  F07E         	goto	l43
   362   00FCAA  EF00  F000         	goto	start
   363   00FCAE                     __end_of_main:
   364                           	callstack 0
   365                           
   366 ;; *************** function _Test *****************
   367 ;; Defined at:
   368 ;;		line 126 in file "main.c"
   369 ;; Parameters:    Size  Location     Type
   370 ;;		None
   371 ;; Auto vars:     Size  Location     Type
   372 ;;  j               2   12[COMRAM] int 
   373 ;;  i               2   10[COMRAM] int 
   374 ;;  i               2    8[COMRAM] int 
   375 ;;  i               2    6[COMRAM] int 
   376 ;; Return value:  Size  Location     Type
   377 ;;                  1    wreg      void 
   378 ;; Registers used:
   379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   380 ;; Tracked objects:
   381 ;;		On entry : 0/0
   382 ;;		On exit  : 0/0
   383 ;;		Unchanged: 0/0
   384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   386 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   387 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   388 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   389 ;;Total ram usage:       10 bytes
   390 ;; Hardware stack levels used: 1
   391 ;; Hardware stack levels required when called: 2
   392 ;; This function calls:
   393 ;;		_Send_Instruction_Data
   394 ;;		_strlen
   395 ;; This function is called by:
   396 ;;		_main
   397 ;; This function uses a non-reentrant model
   398 ;;
   399                           
   400                           	psect	text1
   401   00FE9E                     __ptext1:
   402                           	callstack 0
   403   00FE9E                     _Test:
   404                           	callstack 28
   405   00FE9E                     
   406                           ;main.c: 128:     Send_Instruction_Data(0, 0X94);
   407   00FE9E  0E94               	movlw	148
   408   00FEA0  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   409   00FEA2  0E00               	movlw	0
   410   00FEA4  EC57  F07E         	call	_Send_Instruction_Data
   411   00FEA8                     
   412                           ;main.c: 130:     for (int i = 0; i < strlen(Text3); i++) {
   413   00FEA8  0E00               	movlw	0
   414   00FEAA  6E54               	movwf	(Test@i+1)^0,c
   415   00FEAC  0E00               	movlw	0
   416   00FEAE  6E53               	movwf	Test@i^0,c
   417   00FEB0  EF67  F07F         	goto	l921
   418   00FEB4                     l917:
   419                           
   420                           ;main.c: 132:         Send_Instruction_Data(1, Text3[i]);
   421   00FEB4  0E01               	movlw	low _Text3
   422   00FEB6  2453               	addwf	Test@i^0,w,c
   423   00FEB8  6ED9               	movwf	fsr2l,c
   424   00FEBA  0E00               	movlw	high _Text3
   425   00FEBC  2054               	addwfc	(Test@i+1)^0,w,c
   426   00FEBE  6EDA               	movwf	fsr2h,c
   427   00FEC0  50DF               	movf	indf2,w,c
   428   00FEC2  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   429   00FEC4  0E01               	movlw	1
   430   00FEC6  EC57  F07E         	call	_Send_Instruction_Data
   431   00FECA                     
   432                           ;main.c: 134:     }
   433   00FECA  4A53               	infsnz	Test@i^0,f,c
   434   00FECC  2A54               	incf	(Test@i+1)^0,f,c
   435   00FECE                     l921:
   436   00FECE  0E01               	movlw	low _Text3
   437   00FED0  6E4D               	movwf	strlen@s^0,c
   438   00FED2  0E00               	movlw	high _Text3
   439   00FED4  6E4E               	movwf	(strlen@s+1)^0,c
   440   00FED6  EC84  F07E         	call	_strlen	;wreg free
   441   00FEDA  504D               	movf	?_strlen^0,w,c
   442   00FEDC  5C53               	subwf	Test@i^0,w,c
   443   00FEDE  504E               	movf	(?_strlen+1)^0,w,c
   444   00FEE0  5854               	subwfb	(Test@i+1)^0,w,c
   445   00FEE2  A0D8               	btfss	status,0,c
   446   00FEE4  EF76  F07F         	goto	u91
   447   00FEE8  EF78  F07F         	goto	u90
   448   00FEEC                     u91:
   449   00FEEC  EF5A  F07F         	goto	l917
   450   00FEF0                     u90:
   451   00FEF0                     
   452                           ;main.c: 136:     Send_Instruction_Data(0, 0XD4);
   453   00FEF0  0ED4               	movlw	212
   454   00FEF2  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   455   00FEF4  0E00               	movlw	0
   456   00FEF6  EC57  F07E         	call	_Send_Instruction_Data
   457   00FEFA                     
   458                           ;main.c: 138:     for (int i = 0; i < strlen(Text4); i++) {
   459   00FEFA  0E00               	movlw	0
   460   00FEFC  6E56               	movwf	(Test@i_203+1)^0,c
   461   00FEFE  0E00               	movlw	0
   462   00FF00  6E55               	movwf	Test@i_203^0,c
   463   00FF02  EF90  F07F         	goto	l931
   464   00FF06                     l927:
   465                           
   466                           ;main.c: 140:         Send_Instruction_Data(1, Text4[i]);
   467   00FF06  0E60               	movlw	low _Text4
   468   00FF08  2455               	addwf	Test@i_203^0,w,c
   469   00FF0A  6ED9               	movwf	fsr2l,c
   470   00FF0C  0E00               	movlw	high _Text4
   471   00FF0E  2056               	addwfc	(Test@i_203+1)^0,w,c
   472   00FF10  6EDA               	movwf	fsr2h,c
   473   00FF12  50DF               	movf	indf2,w,c
   474   00FF14  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   475   00FF16  0E01               	movlw	1
   476   00FF18  EC57  F07E         	call	_Send_Instruction_Data
   477   00FF1C                     
   478                           ;main.c: 142:     }
   479   00FF1C  4A55               	infsnz	Test@i_203^0,f,c
   480   00FF1E  2A56               	incf	(Test@i_203+1)^0,f,c
   481   00FF20                     l931:
   482   00FF20  0E60               	movlw	low _Text4
   483   00FF22  6E4D               	movwf	strlen@s^0,c
   484   00FF24  0E00               	movlw	high _Text4
   485   00FF26  6E4E               	movwf	(strlen@s+1)^0,c
   486   00FF28  EC84  F07E         	call	_strlen	;wreg free
   487   00FF2C  504D               	movf	?_strlen^0,w,c
   488   00FF2E  5C55               	subwf	Test@i_203^0,w,c
   489   00FF30  504E               	movf	(?_strlen+1)^0,w,c
   490   00FF32  5856               	subwfb	(Test@i_203+1)^0,w,c
   491   00FF34  A0D8               	btfss	status,0,c
   492   00FF36  EF9F  F07F         	goto	u101
   493   00FF3A  EFA1  F07F         	goto	u100
   494   00FF3E                     u101:
   495   00FF3E  EF83  F07F         	goto	l927
   496   00FF42                     u100:
   497   00FF42                     
   498                           ;main.c: 144:     Send_Instruction_Data(0, 0X80);
   499   00FF42  0E80               	movlw	128
   500   00FF44  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   501   00FF46  0E00               	movlw	0
   502   00FF48  EC57  F07E         	call	_Send_Instruction_Data
   503   00FF4C                     
   504                           ;main.c: 146:     for (int i = 0; i < strlen(Text1); i++) {
   505   00FF4C  0E00               	movlw	0
   506   00FF4E  6E58               	movwf	(Test@i_204+1)^0,c
   507   00FF50  0E00               	movlw	0
   508   00FF52  6E57               	movwf	Test@i_204^0,c
   509   00FF54  EFB9  F07F         	goto	l941
   510   00FF58                     l937:
   511                           
   512                           ;main.c: 148:         Send_Instruction_Data(1, Text1[i]);
   513   00FF58  0E39               	movlw	low _Text1
   514   00FF5A  2457               	addwf	Test@i_204^0,w,c
   515   00FF5C  6ED9               	movwf	fsr2l,c
   516   00FF5E  0E00               	movlw	high _Text1
   517   00FF60  2058               	addwfc	(Test@i_204+1)^0,w,c
   518   00FF62  6EDA               	movwf	fsr2h,c
   519   00FF64  50DF               	movf	indf2,w,c
   520   00FF66  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   521   00FF68  0E01               	movlw	1
   522   00FF6A  EC57  F07E         	call	_Send_Instruction_Data
   523   00FF6E                     
   524                           ;main.c: 150:     }
   525   00FF6E  4A57               	infsnz	Test@i_204^0,f,c
   526   00FF70  2A58               	incf	(Test@i_204+1)^0,f,c
   527   00FF72                     l941:
   528   00FF72  0E39               	movlw	low _Text1
   529   00FF74  6E4D               	movwf	strlen@s^0,c
   530   00FF76  0E00               	movlw	high _Text1
   531   00FF78  6E4E               	movwf	(strlen@s+1)^0,c
   532   00FF7A  EC84  F07E         	call	_strlen	;wreg free
   533   00FF7E  504D               	movf	?_strlen^0,w,c
   534   00FF80  5C57               	subwf	Test@i_204^0,w,c
   535   00FF82  504E               	movf	(?_strlen+1)^0,w,c
   536   00FF84  5858               	subwfb	(Test@i_204+1)^0,w,c
   537   00FF86  A0D8               	btfss	status,0,c
   538   00FF88  EFC8  F07F         	goto	u111
   539   00FF8C  EFCA  F07F         	goto	u110
   540   00FF90                     u111:
   541   00FF90  EFAC  F07F         	goto	l937
   542   00FF94                     u110:
   543   00FF94                     
   544                           ;main.c: 152:     _delay((unsigned long)((100)*(16000000/4000.0)));
   545   00FF94  0E03               	movlw	3
   546   00FF96  6E52               	movwf	(??_Test+1)^0,c
   547   00FF98  0E08               	movlw	8
   548   00FF9A  6E51               	movwf	??_Test^0,c
   549   00FF9C  0E77               	movlw	119
   550   00FF9E                     u137:
   551   00FF9E  2EE8               	decfsz	wreg,f,c
   552   00FFA0  D7FE               	bra	u137
   553   00FFA2  2E51               	decfsz	??_Test^0,f,c
   554   00FFA4  D7FC               	bra	u137
   555   00FFA6  2E52               	decfsz	(??_Test+1)^0,f,c
   556   00FFA8  D7FA               	bra	u137
   557   00FFAA  F000               	nop	
   558   00FFAC                     
   559                           ;main.c: 154:     Send_Instruction_Data(0, 0xC0);
   560   00FFAC  0EC0               	movlw	192
   561   00FFAE  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   562   00FFB0  0E00               	movlw	0
   563   00FFB2  EC57  F07E         	call	_Send_Instruction_Data
   564   00FFB6                     
   565                           ;main.c: 156:     for (int j = 0; j < strlen(Text2); j++) {
   566   00FFB6  0E00               	movlw	0
   567   00FFB8  6E5A               	movwf	(Test@j+1)^0,c
   568   00FFBA  0E00               	movlw	0
   569   00FFBC  6E59               	movwf	Test@j^0,c
   570   00FFBE  EFEE  F07F         	goto	l953
   571   00FFC2                     l949:
   572                           
   573                           ;main.c: 158:         Send_Instruction_Data(1, Text2[j]);
   574   00FFC2  0E1F               	movlw	low _Text2
   575   00FFC4  2459               	addwf	Test@j^0,w,c
   576   00FFC6  6ED9               	movwf	fsr2l,c
   577   00FFC8  0E00               	movlw	high _Text2
   578   00FFCA  205A               	addwfc	(Test@j+1)^0,w,c
   579   00FFCC  6EDA               	movwf	fsr2h,c
   580   00FFCE  50DF               	movf	indf2,w,c
   581   00FFD0  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   582   00FFD2  0E01               	movlw	1
   583   00FFD4  EC57  F07E         	call	_Send_Instruction_Data
   584   00FFD8                     
   585                           ;main.c: 160:     }
   586   00FFD8  4A59               	infsnz	Test@j^0,f,c
   587   00FFDA  2A5A               	incf	(Test@j+1)^0,f,c
   588   00FFDC                     l953:
   589   00FFDC  0E1F               	movlw	low _Text2
   590   00FFDE  6E4D               	movwf	strlen@s^0,c
   591   00FFE0  0E00               	movlw	high _Text2
   592   00FFE2  6E4E               	movwf	(strlen@s+1)^0,c
   593   00FFE4  EC84  F07E         	call	_strlen	;wreg free
   594   00FFE8  504D               	movf	?_strlen^0,w,c
   595   00FFEA  5C59               	subwf	Test@j^0,w,c
   596   00FFEC  504E               	movf	(?_strlen+1)^0,w,c
   597   00FFEE  585A               	subwfb	(Test@j+1)^0,w,c
   598   00FFF0  A0D8               	btfss	status,0,c
   599   00FFF2  EFFD  F07F         	goto	u121
   600   00FFF6  EFFF  F07F         	goto	u120
   601   00FFFA                     u121:
   602   00FFFA  EFE1  F07F         	goto	l949
   603   00FFFE                     u120:
   604   00FFFE  0012               	return		;funcret
   605   010000                     __end_of_Test:
   606                           	callstack 0
   607                           
   608 ;; *************** function _strlen *****************
   609 ;; Defined at:
   610 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\strlen.c"
   611 ;; Parameters:    Size  Location     Type
   612 ;;  s               2    0[COMRAM] PTR const unsigned char 
   613 ;;		 -> Text2(26), Text1(20), Text4(30), Text3(30), 
   614 ;; Auto vars:     Size  Location     Type
   615 ;;  a               2    2[COMRAM] PTR const unsigned char 
   616 ;;		 -> Text2(26), Text1(20), Text4(30), Text3(30), 
   617 ;; Return value:  Size  Location     Type
   618 ;;                  2    0[COMRAM] unsigned int 
   619 ;; Registers used:
   620 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   621 ;; Tracked objects:
   622 ;;		On entry : 0/0
   623 ;;		On exit  : 0/0
   624 ;;		Unchanged: 0/0
   625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   626 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   627 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   629 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   630 ;;Total ram usage:        4 bytes
   631 ;; Hardware stack levels used: 1
   632 ;; This function calls:
   633 ;;		Nothing
   634 ;; This function is called by:
   635 ;;		_Test
   636 ;; This function uses a non-reentrant model
   637 ;;
   638                           
   639                           	psect	text2
   640   00FD08                     __ptext2:
   641                           	callstack 0
   642   00FD08                     _strlen:
   643                           	callstack 29
   644   00FD08  C04D  F04F         	movff	strlen@s,strlen@a
   645   00FD0C  C04E  F050         	movff	strlen@s+1,strlen@a+1
   646   00FD10  EF8C  F07E         	goto	l885
   647   00FD14                     l883:
   648   00FD14  4A4D               	infsnz	strlen@s^0,f,c
   649   00FD16  2A4E               	incf	(strlen@s+1)^0,f,c
   650   00FD18                     l885:
   651   00FD18  C04D  FFD9         	movff	strlen@s,fsr2l
   652   00FD1C  C04E  FFDA         	movff	strlen@s+1,fsr2h
   653   00FD20  50DF               	movf	indf2,w,c
   654   00FD22  A4D8               	btfss	status,2,c
   655   00FD24  EF96  F07E         	goto	u81
   656   00FD28  EF98  F07E         	goto	u80
   657   00FD2C                     u81:
   658   00FD2C  EF8A  F07E         	goto	l883
   659   00FD30                     u80:
   660   00FD30  504F               	movf	strlen@a^0,w,c
   661   00FD32  5C4D               	subwf	strlen@s^0,w,c
   662   00FD34  6E4D               	movwf	?_strlen^0,c
   663   00FD36  5050               	movf	(strlen@a+1)^0,w,c
   664   00FD38  584E               	subwfb	(strlen@s+1)^0,w,c
   665   00FD3A  6E4E               	movwf	(?_strlen+1)^0,c
   666   00FD3C  0012               	return		;funcret
   667   00FD3E                     __end_of_strlen:
   668                           	callstack 0
   669                           
   670 ;; *************** function _Init_LCD *****************
   671 ;; Defined at:
   672 ;;		line 84 in file "main.c"
   673 ;; Parameters:    Size  Location     Type
   674 ;;		None
   675 ;; Auto vars:     Size  Location     Type
   676 ;;		None
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, status,2, status,0, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   688 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   689 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   690 ;;Total ram usage:        1 bytes
   691 ;; Hardware stack levels used: 1
   692 ;; Hardware stack levels required when called: 2
   693 ;; This function calls:
   694 ;;		_Send_Instruction_Data
   695 ;; This function is called by:
   696 ;;		_main
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           	psect	text3
   701   00FE0C                     __ptext3:
   702                           	callstack 0
   703   00FE0C                     _Init_LCD:
   704                           	callstack 28
   705   00FE0C                     
   706                           ;main.c: 86:     _delay((unsigned long)((20)*(16000000/4000.0)));
   707   00FE0C  0E68               	movlw	104
   708   00FE0E  6E51               	movwf	??_Init_LCD^0,c
   709   00FE10  0EE4               	movlw	228
   710   00FE12                     u147:
   711   00FE12  2EE8               	decfsz	wreg,f,c
   712   00FE14  D7FE               	bra	u147
   713   00FE16  2E51               	decfsz	??_Init_LCD^0,f,c
   714   00FE18  D7FC               	bra	u147
   715   00FE1A  D000               	nop2	
   716   00FE1C                     
   717                           ;main.c: 87:     Send_Instruction_Data(0, 0x30);
   718   00FE1C  0E30               	movlw	48
   719   00FE1E  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   720   00FE20  0E00               	movlw	0
   721   00FE22  EC57  F07E         	call	_Send_Instruction_Data
   722   00FE26                     
   723                           ;main.c: 88:     _delay((unsigned long)((5)*(16000000/4000.0)));
   724   00FE26  0E1A               	movlw	26
   725   00FE28  6E51               	movwf	??_Init_LCD^0,c
   726   00FE2A  0EF8               	movlw	248
   727   00FE2C                     u157:
   728   00FE2C  2EE8               	decfsz	wreg,f,c
   729   00FE2E  D7FE               	bra	u157
   730   00FE30  2E51               	decfsz	??_Init_LCD^0,f,c
   731   00FE32  D7FC               	bra	u157
   732   00FE34  D000               	nop2	
   733                           
   734                           ;main.c: 89:     Send_Instruction_Data(0, 0x30);
   735   00FE36  0E30               	movlw	48
   736   00FE38  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   737   00FE3A  0E00               	movlw	0
   738   00FE3C  EC57  F07E         	call	_Send_Instruction_Data
   739   00FE40                     
   740                           ;main.c: 90:     _delay((unsigned long)((5)*(16000000/4000.0)));
   741   00FE40  0E1A               	movlw	26
   742   00FE42  6E51               	movwf	??_Init_LCD^0,c
   743   00FE44  0EF8               	movlw	248
   744   00FE46                     u167:
   745   00FE46  2EE8               	decfsz	wreg,f,c
   746   00FE48  D7FE               	bra	u167
   747   00FE4A  2E51               	decfsz	??_Init_LCD^0,f,c
   748   00FE4C  D7FC               	bra	u167
   749   00FE4E  D000               	nop2	
   750   00FE50                     
   751                           ;main.c: 91:     Send_Instruction_Data(0, 0x30);
   752   00FE50  0E30               	movlw	48
   753   00FE52  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   754   00FE54  0E00               	movlw	0
   755   00FE56  EC57  F07E         	call	_Send_Instruction_Data
   756   00FE5A                     
   757                           ;main.c: 92:     Send_Instruction_Data(0, 0x02);
   758   00FE5A  0E02               	movlw	2
   759   00FE5C  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   760   00FE5E  0E00               	movlw	0
   761   00FE60  EC57  F07E         	call	_Send_Instruction_Data
   762   00FE64                     
   763                           ;main.c: 93:     Send_Instruction_Data(0, 0x06);
   764   00FE64  0E06               	movlw	6
   765   00FE66  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   766   00FE68  0E00               	movlw	0
   767   00FE6A  EC57  F07E         	call	_Send_Instruction_Data
   768   00FE6E                     
   769                           ;main.c: 94:     Send_Instruction_Data(0, 0x0F);
   770   00FE6E  0E0F               	movlw	15
   771   00FE70  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   772   00FE72  0E00               	movlw	0
   773   00FE74  EC57  F07E         	call	_Send_Instruction_Data
   774   00FE78                     
   775                           ;main.c: 95:     Send_Instruction_Data(0, 0x28);
   776   00FE78  0E28               	movlw	40
   777   00FE7A  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   778   00FE7C  0E00               	movlw	0
   779   00FE7E  EC57  F07E         	call	_Send_Instruction_Data
   780   00FE82                     
   781                           ;main.c: 96:     Send_Instruction_Data(0, 0x01);
   782   00FE82  0E01               	movlw	1
   783   00FE84  6E4F               	movwf	Send_Instruction_Data@Data^0,c
   784   00FE86  0E00               	movlw	0
   785   00FE88  EC57  F07E         	call	_Send_Instruction_Data
   786   00FE8C                     
   787                           ;main.c: 97:     _delay((unsigned long)((5)*(16000000/4000.0)));
   788   00FE8C  0E1A               	movlw	26
   789   00FE8E  6E51               	movwf	??_Init_LCD^0,c
   790   00FE90  0EF8               	movlw	248
   791   00FE92                     u177:
   792   00FE92  2EE8               	decfsz	wreg,f,c
   793   00FE94  D7FE               	bra	u177
   794   00FE96  2E51               	decfsz	??_Init_LCD^0,f,c
   795   00FE98  D7FC               	bra	u177
   796   00FE9A  D000               	nop2	
   797   00FE9C  0012               	return		;funcret
   798   00FE9E                     __end_of_Init_LCD:
   799                           	callstack 0
   800                           
   801 ;; *************** function _Send_Instruction_Data *****************
   802 ;; Defined at:
   803 ;;		line 103 in file "main.c"
   804 ;; Parameters:    Size  Location     Type
   805 ;;  Instruction     1    wreg     unsigned char 
   806 ;;  Data            1    2[COMRAM] unsigned char 
   807 ;; Auto vars:     Size  Location     Type
   808 ;;  Instruction     1    3[COMRAM] unsigned char 
   809 ;; Return value:  Size  Location     Type
   810 ;;                  1    wreg      void 
   811 ;; Registers used:
   812 ;;		wreg, status,2, status,0, cstack
   813 ;; Tracked objects:
   814 ;;		On entry : 0/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   818 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   819 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   821 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   822 ;;Total ram usage:        2 bytes
   823 ;; Hardware stack levels used: 1
   824 ;; Hardware stack levels required when called: 1
   825 ;; This function calls:
   826 ;;		_LCD_Instruction
   827 ;; This function is called by:
   828 ;;		_Init_LCD
   829 ;;		_Test
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           	psect	text4
   834   00FCAE                     __ptext4:
   835                           	callstack 0
   836   00FCAE                     _Send_Instruction_Data:
   837                           	callstack 28
   838                           
   839                           ;incstack = 0
   840                           ;Send_Instruction_Data@Instruction stored from wreg
   841   00FCAE  6E50               	movwf	Send_Instruction_Data@Instruction^0,c
   842   00FCB0                     
   843                           ;main.c: 105:     LATCbits.LATC4 = Instruction;
   844   00FCB0  B050               	btfsc	Send_Instruction_Data@Instruction^0,0,c
   845   00FCB2  D002               	bra	u75
   846   00FCB4  988B               	bcf	139,4,c	;volatile
   847   00FCB6  D001               	bra	u76
   848   00FCB8                     u75:
   849   00FCB8  888B               	bsf	139,4,c	;volatile
   850   00FCBA                     u76:
   851   00FCBA                     
   852                           ;main.c: 106:     LCD_Instruction(Data >> 4);
   853   00FCBA  384F               	swapf	Send_Instruction_Data@Data^0,w,c
   854   00FCBC  0B0F               	andlw	15
   855   00FCBE  EC9F  F07E         	call	_LCD_Instruction
   856   00FCC2                     
   857                           ;main.c: 107:     LCD_Instruction(Data);
   858   00FCC2  504F               	movf	Send_Instruction_Data@Data^0,w,c
   859   00FCC4  EC9F  F07E         	call	_LCD_Instruction
   860   00FCC8  0012               	return		;funcret
   861   00FCCA                     __end_of_Send_Instruction_Data:
   862                           	callstack 0
   863                           
   864 ;; *************** function _LCD_Instruction *****************
   865 ;; Defined at:
   866 ;;		line 113 in file "main.c"
   867 ;; Parameters:    Size  Location     Type
   868 ;;  Instruction     1    wreg     unsigned char 
   869 ;; Auto vars:     Size  Location     Type
   870 ;;  Instruction     1    1[COMRAM] unsigned char 
   871 ;; Return value:  Size  Location     Type
   872 ;;                  1    wreg      void 
   873 ;; Registers used:
   874 ;;		wreg, status,2, cstack
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   881 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   882 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   883 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   884 ;;Total ram usage:        2 bytes
   885 ;; Hardware stack levels used: 1
   886 ;; This function calls:
   887 ;;		Nothing
   888 ;; This function is called by:
   889 ;;		_Send_Instruction_Data
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893                           	psect	text5
   894   00FD3E                     __ptext5:
   895                           	callstack 0
   896   00FD3E                     _LCD_Instruction:
   897                           	callstack 28
   898                           
   899                           ;incstack = 0
   900                           ;LCD_Instruction@Instruction stored from wreg
   901   00FD3E  6E4E               	movwf	LCD_Instruction@Instruction^0,c
   902   00FD40                     
   903                           ;main.c: 115:     LATCbits.LATC5 = 1;
   904   00FD40  8A8B               	bsf	139,5,c	;volatile
   905   00FD42                     
   906                           ;main.c: 116:     _delay((unsigned long)((15)*(16000000/4000.0)));
   907   00FD42  0E4E               	movlw	78
   908   00FD44  6E4D               	movwf	??_LCD_Instruction^0,c
   909   00FD46  0EEB               	movlw	235
   910   00FD48                     u187:
   911   00FD48  2EE8               	decfsz	wreg,f,c
   912   00FD4A  D7FE               	bra	u187
   913   00FD4C  2E4D               	decfsz	??_LCD_Instruction^0,f,c
   914   00FD4E  D7FC               	bra	u187
   915   00FD50  F000               	nop	
   916   00FD52                     
   917                           ;main.c: 117:     LATD = Instruction;
   918   00FD52  C04E  FF8C         	movff	LCD_Instruction@Instruction,3980	;volatile
   919   00FD56                     
   920                           ;main.c: 118:     _delay((unsigned long)((15)*(16000000/4000.0)));
   921   00FD56  0E4E               	movlw	78
   922   00FD58  6E4D               	movwf	??_LCD_Instruction^0,c
   923   00FD5A  0EEB               	movlw	235
   924   00FD5C                     u197:
   925   00FD5C  2EE8               	decfsz	wreg,f,c
   926   00FD5E  D7FE               	bra	u197
   927   00FD60  2E4D               	decfsz	??_LCD_Instruction^0,f,c
   928   00FD62  D7FC               	bra	u197
   929   00FD64  F000               	nop	
   930   00FD66                     
   931                           ;main.c: 119:     LATCbits.LATC5 = 0;
   932   00FD66  9A8B               	bcf	139,5,c	;volatile
   933   00FD68                     
   934                           ;main.c: 120:     _delay((unsigned long)((15)*(16000000/4000.0)));
   935   00FD68  0E4E               	movlw	78
   936   00FD6A  6E4D               	movwf	??_LCD_Instruction^0,c
   937   00FD6C  0EEB               	movlw	235
   938   00FD6E                     u207:
   939   00FD6E  2EE8               	decfsz	wreg,f,c
   940   00FD70  D7FE               	bra	u207
   941   00FD72  2E4D               	decfsz	??_LCD_Instruction^0,f,c
   942   00FD74  D7FC               	bra	u207
   943   00FD76  F000               	nop	
   944   00FD78  0012               	return		;funcret
   945   00FD7A                     __end_of_LCD_Instruction:
   946                           	callstack 0
   947                           
   948 ;; *************** function _Configurations *****************
   949 ;; Defined at:
   950 ;;		line 62 in file "main.c"
   951 ;; Parameters:    Size  Location     Type
   952 ;;		None
   953 ;; Auto vars:     Size  Location     Type
   954 ;;		None
   955 ;; Return value:  Size  Location     Type
   956 ;;                  1    wreg      void 
   957 ;; Registers used:
   958 ;;		wreg, status,2
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   968 ;;Total ram usage:        0 bytes
   969 ;; Hardware stack levels used: 1
   970 ;; This function calls:
   971 ;;		Nothing
   972 ;; This function is called by:
   973 ;;		_main
   974 ;; This function uses a non-reentrant model
   975 ;;
   976                           
   977                           	psect	text6
   978   00FCE8                     __ptext6:
   979                           	callstack 0
   980   00FCE8                     _Configurations:
   981                           	callstack 30
   982   00FCE8                     
   983                           ;main.c: 64:     OSCCON = 0x72;
   984   00FCE8  0E72               	movlw	114
   985   00FCEA  6ED3               	movwf	211,c	;volatile
   986                           
   987                           ;main.c: 67:     ANSELD = 0x00;
   988   00FCEC  0E00               	movlw	0
   989   00FCEE  010F               	movlb	15	; () banked
   990   00FCF0  6F3B               	movwf	59,b	;volatile
   991   00FCF2                     
   992                           ; BSR set to: 15
   993                           ;main.c: 68:     ANSELCbits.ANSC4 = 0;
   994   00FCF2  993A               	bcf	58,4,b	;volatile
   995   00FCF4                     
   996                           ; BSR set to: 15
   997                           ;main.c: 69:     ANSELCbits.ANSC5 = 0;
   998   00FCF4  9B3A               	bcf	58,5,b	;volatile
   999                           
  1000                           ;main.c: 72:     TRISD = 0x00;
  1001   00FCF6  0E00               	movlw	0
  1002   00FCF8  6E95               	movwf	149,c	;volatile
  1003   00FCFA                     
  1004                           ; BSR set to: 15
  1005                           ;main.c: 73:     TRISCbits.RC4 = 0;
  1006   00FCFA  9894               	bcf	148,4,c	;volatile
  1007   00FCFC                     
  1008                           ; BSR set to: 15
  1009                           ;main.c: 74:     TRISCbits.RC5 = 0;
  1010   00FCFC  9A94               	bcf	148,5,c	;volatile
  1011                           
  1012                           ;main.c: 77:     LATC = 0;
  1013   00FCFE  0E00               	movlw	0
  1014   00FD00  6E8B               	movwf	139,c	;volatile
  1015                           
  1016                           ;main.c: 78:     LATD = 0;
  1017   00FD02  0E00               	movlw	0
  1018   00FD04  6E8C               	movwf	140,c	;volatile
  1019   00FD06                     
  1020                           ; BSR set to: 15
  1021   00FD06  0012               	return		;funcret
  1022   00FD08                     __end_of_Configurations:
  1023                           	callstack 0
  1024   000000                     
  1025                           	psect	rparam
  1026   000000                     
  1027                           	psect	config
  1028                           
  1029                           ; Padding undefined space
  1030   300000                     	org	3145728
  1031   300000  FF                 	db	255
  1032                           
  1033                           ;Config register CONFIG1H @ 0x300001
  1034                           ;	Oscillator Selection bits
  1035                           ;	FOSC = INTIO67, Internal oscillator block
  1036                           ;	4X PLL Enable
  1037                           ;	PLLCFG = OFF, Oscillator used directly
  1038                           ;	Primary clock enable bit
  1039                           ;	PRICLKEN = ON, Primary clock is always enabled
  1040                           ;	Fail-Safe Clock Monitor Enable bit
  1041                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1042                           ;	Internal/External Oscillator Switchover bit
  1043                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1044   300001                     	org	3145729
  1045   300001  28                 	db	40
  1046                           
  1047                           ;Config register CONFIG2L @ 0x300002
  1048                           ;	Power-up Timer Enable bit
  1049                           ;	PWRTEN = OFF, Power up timer disabled
  1050                           ;	Brown-out Reset Enable bits
  1051                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1052                           ;	Brown Out Reset Voltage bits
  1053                           ;	BORV = 190, VBOR set to 1.90 V nominal
  1054   300002                     	org	3145730
  1055   300002  1F                 	db	31
  1056                           
  1057                           ;Config register CONFIG2H @ 0x300003
  1058                           ;	Watchdog Timer Enable bits
  1059                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  1060                           ;	Watchdog Timer Postscale Select bits
  1061                           ;	WDTPS = 32768, 1:32768
  1062   300003                     	org	3145731
  1063   300003  3C                 	db	60
  1064                           
  1065                           ; Padding undefined space
  1066   300004                     	org	3145732
  1067   300004  FF                 	db	255
  1068                           
  1069                           ;Config register CONFIG3H @ 0x300005
  1070                           ;	CCP2 MUX bit
  1071                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  1072                           ;	PORTB A/D Enable bit
  1073                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  1074                           ;	P3A/CCP3 Mux bit
  1075                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
  1076                           ;	HFINTOSC Fast Start-up
  1077                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
  1078                           ;	Timer3 Clock input mux bit
  1079                           ;	T3CMX = PORTC0, T3CKI is on RC0
  1080                           ;	ECCP2 B output mux bit
  1081                           ;	P2BMX = PORTD2, P2B is on RD2
  1082                           ;	MCLR Pin Enable bit
  1083                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
  1084   300005                     	org	3145733
  1085   300005  BD                 	db	189
  1086                           
  1087                           ;Config register CONFIG4L @ 0x300006
  1088                           ;	Stack Full/Underflow Reset Enable bit
  1089                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1090                           ;	Single-Supply ICSP Enable bit
  1091                           ;	LVP = OFF, Single-Supply ICSP disabled
  1092                           ;	Extended Instruction Set Enable bit
  1093                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1094                           ;	Background Debug
  1095                           ;	DEBUG = 0x1, unprogrammed default
  1096   300006                     	org	3145734
  1097   300006  81                 	db	129
  1098                           
  1099                           ; Padding undefined space
  1100   300007                     	org	3145735
  1101   300007  FF                 	db	255
  1102                           
  1103                           ;Config register CONFIG5L @ 0x300008
  1104                           ;	Code Protection Block 0
  1105                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  1106                           ;	Code Protection Block 1
  1107                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  1108                           ;	Code Protection Block 2
  1109                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  1110                           ;	Code Protection Block 3
  1111                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  1112   300008                     	org	3145736
  1113   300008  0F                 	db	15
  1114                           
  1115                           ;Config register CONFIG5H @ 0x300009
  1116                           ;	Boot Block Code Protection bit
  1117                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1118                           ;	Data EEPROM Code Protection bit
  1119                           ;	CPD = OFF, Data EEPROM not code-protected
  1120   300009                     	org	3145737
  1121   300009  C0                 	db	192
  1122                           
  1123                           ;Config register CONFIG6L @ 0x30000A
  1124                           ;	Write Protection Block 0
  1125                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  1126                           ;	Write Protection Block 1
  1127                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  1128                           ;	Write Protection Block 2
  1129                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  1130                           ;	Write Protection Block 3
  1131                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  1132   30000A                     	org	3145738
  1133   30000A  0F                 	db	15
  1134                           
  1135                           ;Config register CONFIG6H @ 0x30000B
  1136                           ;	Configuration Register Write Protection bit
  1137                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1138                           ;	Boot Block Write Protection bit
  1139                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  1140                           ;	Data EEPROM Write Protection bit
  1141                           ;	WRTD = OFF, Data EEPROM not write-protected
  1142   30000B                     	org	3145739
  1143   30000B  E0                 	db	224
  1144                           
  1145                           ;Config register CONFIG7L @ 0x30000C
  1146                           ;	Table Read Protection Block 0
  1147                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  1148                           ;	Table Read Protection Block 1
  1149                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1150                           ;	Table Read Protection Block 2
  1151                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  1152                           ;	Table Read Protection Block 3
  1153                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  1154   30000C                     	org	3145740
  1155   30000C  0F                 	db	15
  1156                           
  1157                           ;Config register CONFIG7H @ 0x30000D
  1158                           ;	Boot Block Table Read Protection bit
  1159                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1160   30000D                     	org	3145741
  1161   30000D  40                 	db	64
  1162                           tosu	equ	0xFFF
  1163                           tosh	equ	0xFFE
  1164                           tosl	equ	0xFFD
  1165                           stkptr	equ	0xFFC
  1166                           pclatu	equ	0xFFB
  1167                           pclath	equ	0xFFA
  1168                           pcl	equ	0xFF9
  1169                           tblptru	equ	0xFF8
  1170                           tblptrh	equ	0xFF7
  1171                           tblptrl	equ	0xFF6
  1172                           tablat	equ	0xFF5
  1173                           prodh	equ	0xFF4
  1174                           prodl	equ	0xFF3
  1175                           indf0	equ	0xFEF
  1176                           postinc0	equ	0xFEE
  1177                           postdec0	equ	0xFED
  1178                           preinc0	equ	0xFEC
  1179                           plusw0	equ	0xFEB
  1180                           fsr0h	equ	0xFEA
  1181                           fsr0l	equ	0xFE9
  1182                           wreg	equ	0xFE8
  1183                           indf1	equ	0xFE7
  1184                           postinc1	equ	0xFE6
  1185                           postdec1	equ	0xFE5
  1186                           preinc1	equ	0xFE4
  1187                           plusw1	equ	0xFE3
  1188                           fsr1h	equ	0xFE2
  1189                           fsr1l	equ	0xFE1
  1190                           bsr	equ	0xFE0
  1191                           indf2	equ	0xFDF
  1192                           postinc2	equ	0xFDE
  1193                           postdec2	equ	0xFDD
  1194                           preinc2	equ	0xFDC
  1195                           plusw2	equ	0xFDB
  1196                           fsr2h	equ	0xFDA
  1197                           fsr2l	equ	0xFD9
  1198                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        106
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      90
    BANK0           160      0      30
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 30
		 -> Text2(COMRAM[26]), Text1(COMRAM[20]), Text4(BANK0[30]), Text3(COMRAM[30]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 30
		 -> Text2(COMRAM[26]), Text1(COMRAM[20]), Text4(BANK0[30]), Text3(COMRAM[30]), 


Critical Paths under _main in COMRAM

    _main->_Test
    _Test->_Send_Instruction_Data
    _Test->_strlen
    _Init_LCD->_Send_Instruction_Data
    _Send_Instruction_Data->_LCD_Instruction

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3186
                     _Configurations
                           _Init_LCD
                               _Test
 ---------------------------------------------------------------------------------
 (1) _Test                                                10    10      0    1882
                                              4 COMRAM    10    10      0
              _Send_Instruction_Data
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     394
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Init_LCD                                             1     1      0    1304
                                              4 COMRAM     1     1      0
              _Send_Instruction_Data
 ---------------------------------------------------------------------------------
 (2) _Send_Instruction_Data                                2     1      1    1304
                                              2 COMRAM     2     1      1
                    _LCD_Instruction
 ---------------------------------------------------------------------------------
 (3) _LCD_Instruction                                      2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Configurations                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Configurations
   _Init_LCD
     _Send_Instruction_Data
       _LCD_Instruction
   _Test
     _Send_Instruction_Data
     _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      42        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      1E       5       18.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      E      5A       1       94.7%
BITBIGSFRlhll       4F      0       0      40        0.0%
BITBIGSFRlhh        3D      0       0      38        0.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITBIGSFRh          2C      0       0      37        0.0%
BITBIGSFRlhlh        7      0       0      39        0.0%
BITBIGSFRll          2      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      78      28        0.0%
DATA                 0      0      78       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sat Jan 13 23:08:49 2024

                              l43 FCA6                                l52 FE9C                                l44 FCA6  
                              l55 FCC8                                l49 FD06                                l73 FFFE  
                              l58 FD78                                u80 FD30                                u81 FD2C  
                              u90 FEF0                                u75 FCB8                                u91 FEEC  
                              u76 FCBA                               l901 FE5A                               l911 FE8C  
                             l903 FE64                               l905 FE6E                               l753 FD3C  
                             l921 FECE                               l913 FE9E                               l907 FE78  
                             l931 FF20                               l923 FEF0                               l915 FEA8  
                             l909 FE82                               l941 FF72                               l933 FF42  
                             l925 FEFA                               l917 FEB4                               l791 FCFC  
                             l783 FCE8                               l871 FD66                               l863 FD40  
                             l951 FFD8                               l943 FF94                               l935 FF4C  
                             l927 FF06                               l919 FECA                               l785 FCF2  
                             l873 FD68                               l865 FD42                               l881 FD08  
                             l953 FFDC                               l945 FFAC                               l937 FF58  
                             l929 FF1C                               l787 FCF4                               l867 FD52  
                             l875 FCB0                               l891 FE0C                               l883 FD14  
                             l947 FFB6                               l939 FF6E                               l955 FC9A  
                             l789 FCFA                               l869 FD56                               l877 FCBA  
                             l893 FE1C                               l885 FD18                               l949 FFC2  
                             l957 FC9E                               l879 FCC2                               l895 FE26  
                             l887 FD30                               l959 FCA2                               l897 FE40  
                             l899 FE50                               u100 FF42                               u101 FF3E  
                             u110 FF94                               u111 FF90                               u120 FFFE  
                             u121 FFFA                               u207 FD6E                               u137 FF9E  
                             u147 FE12                               u157 FE2C                               u167 FE46  
                             u177 FE92                               u187 FD48                               u197 FD5C  
                             wreg 0FE8                              _LATC 0F8B                              _LATD 0F8C  
                            _Test FE9E                              _main FC9A                              fsr2h 0FDA  
                            indf2 0FDF                              fsr1l 0FE1                              fsr2l 0FD9  
                            start 0000                      ___param_bank 0000                   _LCD_Instruction FD3E  
Send_Instruction_Data@Instruction 0050                             ?_Test 004D                             ?_main 004D  
                           _TRISD 0F95                             Test@i 0053                             Test@j 0059  
                           _Text1 0039                             _Text2 001F                             _Text3 0001  
                           _Text4 0060                             tablat 0FF5                             status 0FD8  
                 __initialization FD7A                      __end_of_Test 0000                      __end_of_main FCAE  
                __end_of_Init_LCD FE9E             _Send_Instruction_Data FCAE                            ??_Test 0051  
                          ??_main 005B                     __activetblptr 0000                            _ANSELD 0F3B  
      LCD_Instruction@Instruction 004E                            _OSCCON 0FD3           __end_of_LCD_Instruction FD7A  
                          isa$std 0001                            _strlen FD08                      __pdataCOMRAM 0001  
                          tblptrh 0FF7                            tblptrl 0FF6                            tblptru 0FF8  
                      __accesstop 0060           __end_of__initialization FDBA                     ___rparam_used 0001  
                  __pcstackCOMRAM 004D                      __pidataBANK0 FCCA            ?_Send_Instruction_Data 004F  
                       ?_Init_LCD 004D                  ?_LCD_Instruction 004D                           ?_strlen 004D  
                      ??_Init_LCD 0051                           __Hparam 0000                           __Lparam 0000  
                         __pcinit FD7A                           __ramtop 1000                           __ptext0 FC9A  
                         __ptext1 FE9E                           __ptext2 FD08                           __ptext3 FE0C  
                         __ptext4 FCAE                           __ptext5 FD3E                           __ptext6 FCE8  
            end_of_initialization FDBA                           postdec1 0FE5                           postinc0 0FEE  
                         strlen@a 004F                           strlen@s 004D                         _TRISCbits 0F94  
         ??_Send_Instruction_Data 0050                     __pidataCOMRAM FDC0                    __end_of_strlen FD3E  
             start_initialization FD7A         Send_Instruction_Data@Data 004F                    _Configurations FCE8  
                       Test@i_203 0055                         Test@i_204 0057                       __pdataBANK0 0060  
                        ??_strlen 004F            __end_of_Configurations FD08                   ?_Configurations 004D  
                        _LATCbits 0F8B                         copy_data0 FD8E                         copy_data1 FDAE  
                        _Init_LCD FE0C                          __Hrparam 0000                          __Lrparam 0000  
   __end_of_Send_Instruction_Data FCCA                        _ANSELCbits 0F3A                 ??_LCD_Instruction 004D  
                        isa$xinst 0000                  ??_Configurations 004D  
