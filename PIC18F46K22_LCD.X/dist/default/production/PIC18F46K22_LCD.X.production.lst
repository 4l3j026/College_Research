

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Thu Feb 15 22:40:13 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22   000000                     
    23                           ; Generated 12/10/2023 GMT
    24                           ; 
    25                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F46K22 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57   000000                     
    58                           	psect	idataCOMRAM
    59   00128C                     __pidataCOMRAM:
    60                           	callstack 0
    61                           
    62                           ;initializer for _Text3
    63   00128C  57                 	db	87
    64   00128D  65                 	db	101
    65   00128E  6C                 	db	108
    66   00128F  63                 	db	99
    67   001290  6F                 	db	111
    68   001291  6D                 	db	109
    69   001292  65                 	db	101
    70   001293  20                 	db	32
    71   001294  74                 	db	116
    72   001295  6F                 	db	111
    73   001296  20                 	db	32
    74   001297  74                 	db	116
    75   001298  68                 	db	104
    76   001299  69                 	db	105
    77   00129A  73                 	db	115
    78   00129B  00                 	db	0
    79   00129C  00                 	db	0
    80   00129D  00                 	db	0
    81   00129E  00                 	db	0
    82   00129F  00                 	db	0
    83   0012A0  00                 	db	0
    84   0012A1  00                 	db	0
    85   0012A2  00                 	db	0
    86   0012A3  00                 	db	0
    87   0012A4  00                 	db	0
    88   0012A5  00                 	db	0
    89   0012A6  00                 	db	0
    90   0012A7  00                 	db	0
    91   0012A8  00                 	db	0
    92   0012A9  00                 	db	0
    93                           
    94                           ;initializer for _Text2
    95   0012AA  45                 	db	69
    96   0012AB  76                 	db	118
    97   0012AC  65                 	db	101
    98   0012AD  72                 	db	114
    99   0012AE  79                 	db	121
   100   0012AF  6F                 	db	111
   101   0012B0  6E                 	db	110
   102   0012B1  65                 	db	101
   103   0012B2  21                 	db	33
   104   0012B3  00                 	db	0
   105   0012B4  00                 	db	0
   106   0012B5  00                 	db	0
   107   0012B6  00                 	db	0
   108   0012B7  00                 	db	0
   109   0012B8  00                 	db	0
   110   0012B9  00                 	db	0
   111   0012BA  00                 	db	0
   112   0012BB  00                 	db	0
   113   0012BC  00                 	db	0
   114   0012BD  00                 	db	0
   115   0012BE  00                 	db	0
   116   0012BF  00                 	db	0
   117   0012C0  00                 	db	0
   118   0012C1  00                 	db	0
   119   0012C2  00                 	db	0
   120   0012C3  00                 	db	0
   121                           
   122                           	psect	idataBANK0
   123   0012E4                     __pidataBANK0:
   124                           	callstack 0
   125                           
   126                           ;initializer for _Text4
   127   0012E4  4D                 	db	77
   128   0012E5  69                 	db	105
   129   0012E6  63                 	db	99
   130   0012E7  72                 	db	114
   131   0012E8  6F                 	db	111
   132   0012E9  63                 	db	99
   133   0012EA  6F                 	db	111
   134   0012EB  6E                 	db	110
   135   0012EC  74                 	db	116
   136   0012ED  72                 	db	114
   137   0012EE  6F                 	db	111
   138   0012EF  6C                 	db	108
   139   0012F0  6C                 	db	108
   140   0012F1  65                 	db	101
   141   0012F2  72                 	db	114
   142   0012F3  21                 	db	33
   143   0012F4  00                 	db	0
   144   0012F5  00                 	db	0
   145   0012F6  00                 	db	0
   146   0012F7  00                 	db	0
   147   0012F8  00                 	db	0
   148   0012F9  00                 	db	0
   149   0012FA  00                 	db	0
   150   0012FB  00                 	db	0
   151   0012FC  00                 	db	0
   152   0012FD  00                 	db	0
   153   0012FE  00                 	db	0
   154   0012FF  00                 	db	0
   155   001300  00                 	db	0
   156   001301  00                 	db	0
   157   000000                     _ANSELC	set	3898
   158   000000                     _OSCCON	set	4051
   159   000000                     _LATCbits	set	3979
   160   000000                     _TRISCbits	set	3988
   161   000000                     _ANSELD	set	3899
   162   000000                     _TRISD	set	3989
   163   000000                     _LATD	set	3980
   164                           
   165                           	psect	smallconst
   166   001000                     __psmallconst:
   167                           	callstack 0
   168   001000  00                 	db	0
   169   001001                     STR_1:
   170                           
   171                           ; BSR set to: 15
   172   001001  48                 	db	72	;'H'
   173   001002  65                 	db	101	;'e'
   174   001003  6C                 	db	108	;'l'
   175   001004  6C                 	db	108	;'l'
   176   001005  6F                 	db	111	;'o'
   177   001006  20                 	db	32
   178   001007  57                 	db	87	;'W'
   179   001008  6F                 	db	111	;'o'
   180   001009  72                 	db	114	;'r'
   181   00100A  6C                 	db	108	;'l'
   182   00100B  64                 	db	100	;'d'
   183   00100C  21                 	db	33
   184   00100D  00                 	db	0
   185   00100E  00                 	db	0	; dummy byte at the end
   186   000000                     
   187                           ; #config settings
   188                           
   189                           	psect	cinit
   190   0011C2                     __pcinit:
   191                           	callstack 0
   192   0011C2                     start_initialization:
   193                           	callstack 0
   194   0011C2                     __initialization:
   195                           	callstack 0
   196                           
   197                           ; Initialize objects allocated to BANK0 (30 bytes)
   198                           ; load TBLPTR registers with __pidataBANK0
   199   0011C2  0EE4               	movlw	low __pidataBANK0
   200   0011C4  6EF6               	movwf	tblptrl,c
   201   0011C6  0E12               	movlw	high __pidataBANK0
   202   0011C8  6EF7               	movwf	tblptrh,c
   203   0011CA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   204   0011CC  6EF8               	movwf	tblptru,c
   205   0011CE  EE00  F060         	lfsr	0,__pdataBANK0
   206   0011D2  EE10 F01E          	lfsr	1,30
   207   0011D6                     copy_data0:
   208   0011D6  0009               	tblrd		*+
   209   0011D8  CFF5 FFEE          	movff	tablat,postinc0
   210   0011DC  50E5               	movf	postdec1,w,c
   211   0011DE  50E1               	movf	fsr1l,w,c
   212   0011E0  E1FA               	bnz	copy_data0
   213                           
   214                           ; Initialize objects allocated to COMRAM (56 bytes)
   215                           ; load TBLPTR registers with __pidataCOMRAM
   216   0011E2  0E8C               	movlw	low __pidataCOMRAM
   217   0011E4  6EF6               	movwf	tblptrl,c
   218   0011E6  0E12               	movlw	high __pidataCOMRAM
   219   0011E8  6EF7               	movwf	tblptrh,c
   220   0011EA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   221   0011EC  6EF8               	movwf	tblptru,c
   222   0011EE  EE00  F001         	lfsr	0,__pdataCOMRAM
   223   0011F2  EE10 F038          	lfsr	1,56
   224   0011F6                     copy_data1:
   225   0011F6  0009               	tblrd		*+
   226   0011F8  CFF5 FFEE          	movff	tablat,postinc0
   227   0011FC  50E5               	movf	postdec1,w,c
   228   0011FE  50E1               	movf	fsr1l,w,c
   229   001200  E1FA               	bnz	copy_data1
   230   001202                     end_of_initialization:
   231                           	callstack 0
   232   001202                     __end_of__initialization:
   233                           	callstack 0
   234   001202  0E00               	movlw	low (__Lsmallconst shr (0+16))
   235   001204  6EF8               	movwf	tblptru,c
   236   001206  0E10               	movlw	high __Lsmallconst
   237   001208  6EF7               	movwf	tblptrh,c
   238   00120A  0100               	movlb	0
   239   00120C  EF8F  F009         	goto	_main	;jump to C main() function
   240                           
   241                           	psect	dataCOMRAM
   242   000001                     __pdataCOMRAM:
   243                           	callstack 0
   244   000001                     _Text3:
   245                           	callstack 0
   246   000001                     	ds	30
   247   00001F                     _Text2:
   248                           	callstack 0
   249   00001F                     	ds	26
   250                           
   251                           	psect	dataBANK0
   252   000060                     __pdataBANK0:
   253                           	callstack 0
   254   000060                     _Text4:
   255                           	callstack 0
   256   000060                     	ds	30
   257                           
   258                           	psect	cstackCOMRAM
   259   000039                     __pcstackCOMRAM:
   260                           	callstack 0
   261   000039                     ??_LCD_Instruction:
   262   000039                     
   263                           ; 1 bytes @ 0x0
   264   000039                     	ds	1
   265   00003A                     LCD_Instruction@Instruction:
   266                           	callstack 0
   267                           
   268                           ; 1 bytes @ 0x1
   269   00003A                     	ds	1
   270   00003B                     Send_Instruction_Data@Data:
   271                           	callstack 0
   272                           
   273                           ; 1 bytes @ 0x2
   274   00003B                     	ds	1
   275   00003C                     Send_Instruction_Data@Instruction:
   276                           	callstack 0
   277                           
   278                           ; 1 bytes @ 0x3
   279   00003C                     	ds	1
   280   00003D                     ??_Init_LCD:
   281   00003D                     Send_String@String:
   282                           	callstack 0
   283                           
   284                           ; 1 bytes @ 0x4
   285   00003D                     	ds	1
   286   00003E                     ??_Send_String:
   287                           
   288                           ; 1 bytes @ 0x5
   289   00003E                     	ds	1
   290   00003F                     Send_String@i:
   291                           	callstack 0
   292                           
   293                           ; 1 bytes @ 0x6
   294   00003F                     	ds	1
   295   000040                     ??_Test:
   296                           
   297                           ; 1 bytes @ 0x7
   298   000040                     	ds	2
   299   000042                     Test@i:
   300                           	callstack 0
   301                           
   302                           ; 2 bytes @ 0x9
   303   000042                     	ds	2
   304   000044                     Test@i_184:
   305                           	callstack 0
   306                           
   307                           ; 2 bytes @ 0xB
   308   000044                     	ds	2
   309   000046                     Test@j:
   310                           	callstack 0
   311                           
   312                           ; 2 bytes @ 0xD
   313   000046                     	ds	2
   314   000048                     
   315                           ; 1 bytes @ 0xF
   316 ;;
   317 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   318 ;;
   319 ;; *************** function _main *****************
   320 ;; Defined at:
   321 ;;		line 46 in file "main.c"
   322 ;; Parameters:    Size  Location     Type
   323 ;;		None
   324 ;; Auto vars:     Size  Location     Type
   325 ;;		None
   326 ;; Return value:  Size  Location     Type
   327 ;;                  1    wreg      void 
   328 ;; Registers used:
   329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   330 ;; Tracked objects:
   331 ;;		On entry : 0/0
   332 ;;		On exit  : 0/0
   333 ;;		Unchanged: 0/0
   334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   339 ;;Total ram usage:        0 bytes
   340 ;; Hardware stack levels required when called: 4
   341 ;; This function calls:
   342 ;;		_Configurations
   343 ;;		_Init_LCD
   344 ;;		_Test
   345 ;; This function is called by:
   346 ;;		Startup code after reset
   347 ;; This function uses a non-reentrant model
   348 ;;
   349                           
   350                           	psect	text0
   351   00131E                     __ptext0:
   352                           	callstack 0
   353   00131E                     _main:
   354                           	callstack 27
   355   00131E                     
   356                           ;main.c: 49:     Configurations();
   357   00131E  EC62  F009         	call	_Configurations	;wreg free
   358   001322                     
   359                           ;main.c: 50:     Init_LCD();
   360   001322  EC90  F008         	call	_Init_LCD	;wreg free
   361   001326                     
   362                           ;main.c: 51:     Test();
   363   001326  EC08  F008         	call	_Test	;wreg free
   364   00132A                     l37:
   365   00132A  EF95  F009         	goto	l37
   366   00132E  EF00  F000         	goto	start
   367   001332                     __end_of_main:
   368                           	callstack 0
   369                           
   370 ;; *************** function _Test *****************
   371 ;; Defined at:
   372 ;;		line 139 in file "main.c"
   373 ;; Parameters:    Size  Location     Type
   374 ;;		None
   375 ;; Auto vars:     Size  Location     Type
   376 ;;  j               2   13[COMRAM] int 
   377 ;;  i               2   11[COMRAM] int 
   378 ;;  i               2    9[COMRAM] int 
   379 ;; Return value:  Size  Location     Type
   380 ;;                  1    wreg      void 
   381 ;; Registers used:
   382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   383 ;; Tracked objects:
   384 ;;		On entry : 0/0
   385 ;;		On exit  : 0/0
   386 ;;		Unchanged: 0/0
   387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   389 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   390 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   391 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   392 ;;Total ram usage:        8 bytes
   393 ;; Hardware stack levels used: 1
   394 ;; Hardware stack levels required when called: 3
   395 ;; This function calls:
   396 ;;		_Send_Instruction_Data
   397 ;;		_Send_String
   398 ;; This function is called by:
   399 ;;		_main
   400 ;; This function uses a non-reentrant model
   401 ;;
   402                           
   403                           	psect	text1
   404   001010                     __ptext1:
   405                           	callstack 0
   406   001010                     _Test:
   407                           	callstack 27
   408   001010                     
   409                           ;main.c: 141:     Send_Instruction_Data(0, 0X80);
   410   001010  0E80               	movlw	128
   411   001012  6E3B               	movwf	Send_Instruction_Data@Data^0,c
   412   001014  0E00               	movlw	0
   413   001016  EC81  F009         	call	_Send_Instruction_Data
   414   00101A                     
   415                           ;main.c: 142:     Send_String("Hello World!");
   416   00101A  0E01               	movlw	low STR_1
   417   00101C  6E3D               	movwf	Send_String@String^0,c
   418   00101E  EC08  F009         	call	_Send_String	;wreg free
   419   001022                     
   420                           ;main.c: 144:     _delay((unsigned long)((1000)*(16000000/4000.0)));
   421   001022  0E15               	movlw	21
   422   001024  6E41               	movwf	(??_Test+1)^0,c
   423   001026  0E4B               	movlw	75
   424   001028  6E40               	movwf	??_Test^0,c
   425   00102A  0EBE               	movlw	190
   426   00102C                     u117:
   427   00102C  2EE8               	decfsz	wreg,f,c
   428   00102E  D7FE               	bra	u117
   429   001030  2E40               	decfsz	??_Test^0,f,c
   430   001032  D7FC               	bra	u117
   431   001034  2E41               	decfsz	(??_Test+1)^0,f,c
   432   001036  D7FA               	bra	u117
   433   001038  D000               	nop2	
   434   00103A                     
   435                           ;main.c: 146:     Send_Instruction_Data(0, 0xC0);
   436   00103A  0EC0               	movlw	192
   437   00103C  6E3B               	movwf	Send_Instruction_Data@Data^0,c
   438   00103E  0E00               	movlw	0
   439   001040  EC81  F009         	call	_Send_Instruction_Data
   440   001044                     
   441                           ;main.c: 147:     for (int i = 0; Text3[i] != '\0'; i++) {
   442   001044  0E00               	movlw	0
   443   001046  6E43               	movwf	(Test@i+1)^0,c
   444   001048  0E00               	movlw	0
   445   00104A  6E42               	movwf	Test@i^0,c
   446   00104C  EF33  F008         	goto	l910
   447   001050                     l906:
   448                           
   449                           ;main.c: 149:         Send_Instruction_Data(1, Text3[i]);
   450   001050  5042               	movf	Test@i^0,w,c
   451   001052  0F01               	addlw	low _Text3
   452   001054  6ED9               	movwf	fsr2l,c
   453   001056  6ADA               	clrf	fsr2h,c
   454   001058  50DF               	movf	indf2,w,c
   455   00105A  6E3B               	movwf	Send_Instruction_Data@Data^0,c
   456   00105C  0E01               	movlw	1
   457   00105E  EC81  F009         	call	_Send_Instruction_Data
   458   001062                     
   459                           ;main.c: 151:     }
   460   001062  4A42               	infsnz	Test@i^0,f,c
   461   001064  2A43               	incf	(Test@i+1)^0,f,c
   462   001066                     l910:
   463   001066  5042               	movf	Test@i^0,w,c
   464   001068  0F01               	addlw	low _Text3
   465   00106A  6ED9               	movwf	fsr2l,c
   466   00106C  6ADA               	clrf	fsr2h,c
   467   00106E  50DF               	movf	indf2,w,c
   468   001070  A4D8               	btfss	status,2,c
   469   001072  EF3D  F008         	goto	u81
   470   001076  EF3F  F008         	goto	u80
   471   00107A                     u81:
   472   00107A  EF28  F008         	goto	l906
   473   00107E                     u80:
   474   00107E                     
   475                           ;main.c: 153:     Send_Instruction_Data(0, 0X94);
   476   00107E  0E94               	movlw	148
   477   001080  6E3B               	movwf	Send_Instruction_Data@Data^0,c
   478   001082  0E00               	movlw	0
   479   001084  EC81  F009         	call	_Send_Instruction_Data
   480   001088                     
   481                           ;main.c: 155:     for (int i = 0; Text4[i] != '\0'; i++) {
   482   001088  0E00               	movlw	0
   483   00108A  6E45               	movwf	(Test@i_184+1)^0,c
   484   00108C  0E00               	movlw	0
   485   00108E  6E44               	movwf	Test@i_184^0,c
   486   001090  EF55  F008         	goto	l920
   487   001094                     l916:
   488                           
   489                           ;main.c: 157:         Send_Instruction_Data(1, Text4[i]);
   490   001094  5044               	movf	Test@i_184^0,w,c
   491   001096  0F60               	addlw	low _Text4
   492   001098  6ED9               	movwf	fsr2l,c
   493   00109A  6ADA               	clrf	fsr2h,c
   494   00109C  50DF               	movf	indf2,w,c
   495   00109E  6E3B               	movwf	Send_Instruction_Data@Data^0,c
   496   0010A0  0E01               	movlw	1
   497   0010A2  EC81  F009         	call	_Send_Instruction_Data
   498   0010A6                     
   499                           ;main.c: 159:     }
   500   0010A6  4A44               	infsnz	Test@i_184^0,f,c
   501   0010A8  2A45               	incf	(Test@i_184+1)^0,f,c
   502   0010AA                     l920:
   503   0010AA  5044               	movf	Test@i_184^0,w,c
   504   0010AC  0F60               	addlw	low _Text4
   505   0010AE  6ED9               	movwf	fsr2l,c
   506   0010B0  6ADA               	clrf	fsr2h,c
   507   0010B2  50DF               	movf	indf2,w,c
   508   0010B4  A4D8               	btfss	status,2,c
   509   0010B6  EF5F  F008         	goto	u91
   510   0010BA  EF61  F008         	goto	u90
   511   0010BE                     u91:
   512   0010BE  EF4A  F008         	goto	l916
   513   0010C2                     u90:
   514   0010C2                     
   515                           ;main.c: 161:     _delay((unsigned long)((100)*(16000000/4000.0)));
   516   0010C2  0E03               	movlw	3
   517   0010C4  6E41               	movwf	(??_Test+1)^0,c
   518   0010C6  0E08               	movlw	8
   519   0010C8  6E40               	movwf	??_Test^0,c
   520   0010CA  0E77               	movlw	119
   521   0010CC                     u127:
   522   0010CC  2EE8               	decfsz	wreg,f,c
   523   0010CE  D7FE               	bra	u127
   524   0010D0  2E40               	decfsz	??_Test^0,f,c
   525   0010D2  D7FC               	bra	u127
   526   0010D4  2E41               	decfsz	(??_Test+1)^0,f,c
   527   0010D6  D7FA               	bra	u127
   528   0010D8  0000               	nop	
   529   0010DA                     
   530                           ;main.c: 163:     Send_Instruction_Data(0, 0XD4);
   531   0010DA  0ED4               	movlw	212
   532   0010DC  6E3B               	movwf	Send_Instruction_Data@Data^0,c
   533   0010DE  0E00               	movlw	0
   534   0010E0  EC81  F009         	call	_Send_Instruction_Data
   535   0010E4                     
   536                           ;main.c: 165:     for (int j = 0; Text2[j] != '\0'; j++) {
   537   0010E4  0E00               	movlw	0
   538   0010E6  6E47               	movwf	(Test@j+1)^0,c
   539   0010E8  0E00               	movlw	0
   540   0010EA  6E46               	movwf	Test@j^0,c
   541   0010EC  EF83  F008         	goto	l932
   542   0010F0                     l928:
   543                           
   544                           ;main.c: 167:         Send_Instruction_Data(1, Text2[j]);
   545   0010F0  5046               	movf	Test@j^0,w,c
   546   0010F2  0F1F               	addlw	low _Text2
   547   0010F4  6ED9               	movwf	fsr2l,c
   548   0010F6  6ADA               	clrf	fsr2h,c
   549   0010F8  50DF               	movf	indf2,w,c
   550   0010FA  6E3B               	movwf	Send_Instruction_Data@Data^0,c
   551   0010FC  0E01               	movlw	1
   552   0010FE  EC81  F009         	call	_Send_Instruction_Data
   553   001102                     
   554                           ;main.c: 169:     }
   555   001102  4A46               	infsnz	Test@j^0,f,c
   556   001104  2A47               	incf	(Test@j+1)^0,f,c
   557   001106                     l932:
   558   001106  5046               	movf	Test@j^0,w,c
   559   001108  0F1F               	addlw	low _Text2
   560   00110A  6ED9               	movwf	fsr2l,c
   561   00110C  6ADA               	clrf	fsr2h,c
   562   00110E  50DF               	movf	indf2,w,c
   563   001110  A4D8               	btfss	status,2,c
   564   001112  EF8D  F008         	goto	u101
   565   001116  EF8F  F008         	goto	u100
   566   00111A                     u101:
   567   00111A  EF78  F008         	goto	l928
   568   00111E                     u100:
   569   00111E  0012               	return		;funcret
   570   001120                     __end_of_Test:
   571                           	callstack 0
   572                           
   573 ;; *************** function _Send_String *****************
   574 ;; Defined at:
   575 ;;		line 127 in file "main.c"
   576 ;; Parameters:    Size  Location     Type
   577 ;;  String          1    4[COMRAM] PTR unsigned char 
   578 ;;		 -> STR_1(13), 
   579 ;; Auto vars:     Size  Location     Type
   580 ;;  i               1    6[COMRAM] unsigned char 
   581 ;; Return value:  Size  Location     Type
   582 ;;                  1    wreg      void 
   583 ;; Registers used:
   584 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   585 ;; Tracked objects:
   586 ;;		On entry : 0/0
   587 ;;		On exit  : 0/0
   588 ;;		Unchanged: 0/0
   589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   590 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   591 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   592 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   593 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   594 ;;Total ram usage:        3 bytes
   595 ;; Hardware stack levels used: 1
   596 ;; Hardware stack levels required when called: 2
   597 ;; This function calls:
   598 ;;		_Send_Instruction_Data
   599 ;; This function is called by:
   600 ;;		_Test
   601 ;; This function uses a non-reentrant model
   602 ;;
   603                           
   604                           	psect	text2
   605   001210                     __ptext2:
   606                           	callstack 0
   607   001210                     _Send_String:
   608                           	callstack 27
   609   001210                     
   610                           ;main.c: 129:     for (uint8_t i = 0; String[i] != '\0'; i++) {
   611   001210  0E00               	movlw	0
   612   001212  6E3F               	movwf	Send_String@i^0,c
   613   001214  EF18  F009         	goto	l872
   614   001218                     l868:
   615                           
   616                           ;main.c: 131:         Send_Instruction_Data(1, String[i]);
   617   001218  503D               	movf	Send_String@String^0,w,c
   618   00121A  243F               	addwf	Send_String@i^0,w,c
   619   00121C  6E3E               	movwf	??_Send_String^0,c
   620   00121E  C03E  FFF6         	movff	??_Send_String,tblptrl
   621   001222                     	if	0	;There is only one active tblptr byte
   622   001222                     	endif
   623   001222                     	if	0	;tblptru may be non-zero
   624   001222                     	endif
   625   001222                     	if	0	;tblptru may be non-zero
   626   001222                     	endif
   627   001222  0008               	tblrd		*
   628   001224  CFF5 F03B          	movff	tablat,Send_Instruction_Data@Data
   629   001228  0E01               	movlw	1
   630   00122A  EC81  F009         	call	_Send_Instruction_Data
   631   00122E                     
   632                           ;main.c: 133:     }
   633   00122E  2A3F               	incf	Send_String@i^0,f,c
   634   001230                     l872:
   635   001230  503D               	movf	Send_String@String^0,w,c
   636   001232  243F               	addwf	Send_String@i^0,w,c
   637   001234  6E3E               	movwf	??_Send_String^0,c
   638   001236  C03E  FFF6         	movff	??_Send_String,tblptrl
   639   00123A                     	if	0	;There is only one active tblptr byte
   640   00123A                     	endif
   641   00123A                     	if	0	;tblptru may be non-zero
   642   00123A                     	endif
   643   00123A                     	if	0	;tblptru may be non-zero
   644   00123A                     	endif
   645   00123A  0008               	tblrd		*
   646   00123C  50F5               	movf	tablat,w,c
   647   00123E  0900               	iorlw	0
   648   001240  A4D8               	btfss	status,2,c
   649   001242  EF25  F009         	goto	u71
   650   001246  EF27  F009         	goto	u70
   651   00124A                     u71:
   652   00124A  EF0C  F009         	goto	l868
   653   00124E                     u70:
   654   00124E  0012               	return		;funcret
   655   001250                     __end_of_Send_String:
   656                           	callstack 0
   657                           
   658 ;; *************** function _Init_LCD *****************
   659 ;; Defined at:
   660 ;;		line 86 in file "main.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;		None
   663 ;; Auto vars:     Size  Location     Type
   664 ;;		None
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      void 
   667 ;; Registers used:
   668 ;;		wreg, status,2, status,0, cstack
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   676 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   677 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   678 ;;Total ram usage:        2 bytes
   679 ;; Hardware stack levels used: 1
   680 ;; Hardware stack levels required when called: 2
   681 ;; This function calls:
   682 ;;		_Send_Instruction_Data
   683 ;; This function is called by:
   684 ;;		_main
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688                           	psect	text3
   689   001120                     __ptext3:
   690                           	callstack 0
   691   001120                     _Init_LCD:
   692                           	callstack 28
   693   001120                     
   694                           ;main.c: 88:     _delay((unsigned long)((60)*(16000000/4000.0)));
   695   001120  0E02               	movlw	2
   696   001122  6E3E               	movwf	(??_Init_LCD+1)^0,c
   697   001124  0E38               	movlw	56
   698   001126  6E3D               	movwf	??_Init_LCD^0,c
   699   001128  0EAD               	movlw	173
   700   00112A                     u137:
   701   00112A  2EE8               	decfsz	wreg,f,c
   702   00112C  D7FE               	bra	u137
   703   00112E  2E3D               	decfsz	??_Init_LCD^0,f,c
   704   001130  D7FC               	bra	u137
   705   001132  2E3E               	decfsz	(??_Init_LCD+1)^0,f,c
   706   001134  D7FA               	bra	u137
   707   001136  0000               	nop	
   708   001138                     
   709                           ;main.c: 89:     Send_Instruction_Data(0, 0x30);
   710   001138  0E30               	movlw	48
   711   00113A  6E3B               	movwf	Send_Instruction_Data@Data^0,c
   712   00113C  0E00               	movlw	0
   713   00113E  EC81  F009         	call	_Send_Instruction_Data
   714   001142                     
   715                           ;main.c: 90:     _delay((unsigned long)((5)*(16000000/4000.0)));
   716   001142  0E1A               	movlw	26
   717   001144  6E3D               	movwf	??_Init_LCD^0,c
   718   001146  0EF8               	movlw	248
   719   001148                     u147:
   720   001148  2EE8               	decfsz	wreg,f,c
   721   00114A  D7FE               	bra	u147
   722   00114C  2E3D               	decfsz	??_Init_LCD^0,f,c
   723   00114E  D7FC               	bra	u147
   724   001150  D000               	nop2	
   725                           
   726                           ;main.c: 91:     Send_Instruction_Data(0, 0x30);
   727   001152  0E30               	movlw	48
   728   001154  6E3B               	movwf	Send_Instruction_Data@Data^0,c
   729   001156  0E00               	movlw	0
   730   001158  EC81  F009         	call	_Send_Instruction_Data
   731   00115C                     
   732                           ;main.c: 92:     _delay((unsigned long)((5)*(16000000/4000.0)));
   733   00115C  0E1A               	movlw	26
   734   00115E  6E3D               	movwf	??_Init_LCD^0,c
   735   001160  0EF8               	movlw	248
   736   001162                     u157:
   737   001162  2EE8               	decfsz	wreg,f,c
   738   001164  D7FE               	bra	u157
   739   001166  2E3D               	decfsz	??_Init_LCD^0,f,c
   740   001168  D7FC               	bra	u157
   741   00116A  D000               	nop2	
   742   00116C                     
   743                           ;main.c: 93:     Send_Instruction_Data(0, 0x30);
   744   00116C  0E30               	movlw	48
   745   00116E  6E3B               	movwf	Send_Instruction_Data@Data^0,c
   746   001170  0E00               	movlw	0
   747   001172  EC81  F009         	call	_Send_Instruction_Data
   748   001176                     
   749                           ;main.c: 94:     Send_Instruction_Data(0, 0x02);
   750   001176  0E02               	movlw	2
   751   001178  6E3B               	movwf	Send_Instruction_Data@Data^0,c
   752   00117A  0E00               	movlw	0
   753   00117C  EC81  F009         	call	_Send_Instruction_Data
   754   001180                     
   755                           ;main.c: 95:     Send_Instruction_Data(0, 0x06);
   756   001180  0E06               	movlw	6
   757   001182  6E3B               	movwf	Send_Instruction_Data@Data^0,c
   758   001184  0E00               	movlw	0
   759   001186  EC81  F009         	call	_Send_Instruction_Data
   760   00118A                     
   761                           ;main.c: 96:     Send_Instruction_Data(0, 0x0F);
   762   00118A  0E0F               	movlw	15
   763   00118C  6E3B               	movwf	Send_Instruction_Data@Data^0,c
   764   00118E  0E00               	movlw	0
   765   001190  EC81  F009         	call	_Send_Instruction_Data
   766   001194                     
   767                           ;main.c: 97:     Send_Instruction_Data(0, 0x28);
   768   001194  0E28               	movlw	40
   769   001196  6E3B               	movwf	Send_Instruction_Data@Data^0,c
   770   001198  0E00               	movlw	0
   771   00119A  EC81  F009         	call	_Send_Instruction_Data
   772   00119E                     
   773                           ;main.c: 98:     Send_Instruction_Data(0, 0x01);
   774   00119E  0E01               	movlw	1
   775   0011A0  6E3B               	movwf	Send_Instruction_Data@Data^0,c
   776   0011A2  0E00               	movlw	0
   777   0011A4  EC81  F009         	call	_Send_Instruction_Data
   778   0011A8                     
   779                           ;main.c: 99:     _delay((unsigned long)((100)*(16000000/4000.0)));
   780   0011A8  0E03               	movlw	3
   781   0011AA  6E3E               	movwf	(??_Init_LCD+1)^0,c
   782   0011AC  0E08               	movlw	8
   783   0011AE  6E3D               	movwf	??_Init_LCD^0,c
   784   0011B0  0E77               	movlw	119
   785   0011B2                     u167:
   786   0011B2  2EE8               	decfsz	wreg,f,c
   787   0011B4  D7FE               	bra	u167
   788   0011B6  2E3D               	decfsz	??_Init_LCD^0,f,c
   789   0011B8  D7FC               	bra	u167
   790   0011BA  2E3E               	decfsz	(??_Init_LCD+1)^0,f,c
   791   0011BC  D7FA               	bra	u167
   792   0011BE  0000               	nop	
   793   0011C0  0012               	return		;funcret
   794   0011C2                     __end_of_Init_LCD:
   795                           	callstack 0
   796                           
   797 ;; *************** function _Send_Instruction_Data *****************
   798 ;; Defined at:
   799 ;;		line 105 in file "main.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;  Instruction     1    wreg     unsigned char 
   802 ;;  Data            1    2[COMRAM] unsigned char 
   803 ;; Auto vars:     Size  Location     Type
   804 ;;  Instruction     1    3[COMRAM] unsigned char 
   805 ;; Return value:  Size  Location     Type
   806 ;;                  1    wreg      void 
   807 ;; Registers used:
   808 ;;		wreg, status,2, status,0, cstack
   809 ;; Tracked objects:
   810 ;;		On entry : 0/0
   811 ;;		On exit  : 0/0
   812 ;;		Unchanged: 0/0
   813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   814 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   815 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   817 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   818 ;;Total ram usage:        2 bytes
   819 ;; Hardware stack levels used: 1
   820 ;; Hardware stack levels required when called: 1
   821 ;; This function calls:
   822 ;;		_LCD_Instruction
   823 ;; This function is called by:
   824 ;;		_Init_LCD
   825 ;;		_Send_String
   826 ;;		_Test
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           	psect	text4
   831   001302                     __ptext4:
   832                           	callstack 0
   833   001302                     _Send_Instruction_Data:
   834                           	callstack 27
   835                           
   836                           ;incstack = 0
   837                           ;Send_Instruction_Data@Instruction stored from wreg
   838   001302  6E3C               	movwf	Send_Instruction_Data@Instruction^0,c
   839   001304                     
   840                           ;main.c: 107:     LATCbits.LATC4 = Instruction;
   841   001304  B03C               	btfsc	Send_Instruction_Data@Instruction^0,0,c
   842   001306  D002               	bra	u65
   843   001308  988B               	bcf	139,4,c	;volatile
   844   00130A  D001               	bra	u66
   845   00130C                     u65:
   846   00130C  888B               	bsf	139,4,c	;volatile
   847   00130E                     u66:
   848   00130E                     
   849                           ;main.c: 108:     LCD_Instruction(Data >> 4);
   850   00130E  383B               	swapf	Send_Instruction_Data@Data^0,w,c
   851   001310  0B0F               	andlw	15
   852   001312  EC28  F009         	call	_LCD_Instruction
   853   001316                     
   854                           ;main.c: 109:     LCD_Instruction(Data);
   855   001316  503B               	movf	Send_Instruction_Data@Data^0,w,c
   856   001318  EC28  F009         	call	_LCD_Instruction
   857   00131C  0012               	return		;funcret
   858   00131E                     __end_of_Send_Instruction_Data:
   859                           	callstack 0
   860                           
   861 ;; *************** function _LCD_Instruction *****************
   862 ;; Defined at:
   863 ;;		line 114 in file "main.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;  Instruction     1    wreg     unsigned char 
   866 ;; Auto vars:     Size  Location     Type
   867 ;;  Instruction     1    1[COMRAM] unsigned char 
   868 ;; Return value:  Size  Location     Type
   869 ;;                  1    wreg      void 
   870 ;; Registers used:
   871 ;;		wreg, status,2, cstack
   872 ;; Tracked objects:
   873 ;;		On entry : 0/0
   874 ;;		On exit  : 0/0
   875 ;;		Unchanged: 0/0
   876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   878 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   879 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   880 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   881 ;;Total ram usage:        2 bytes
   882 ;; Hardware stack levels used: 1
   883 ;; This function calls:
   884 ;;		Nothing
   885 ;; This function is called by:
   886 ;;		_Send_Instruction_Data
   887 ;; This function uses a non-reentrant model
   888 ;;
   889                           
   890                           	psect	text5
   891   001250                     __ptext5:
   892                           	callstack 0
   893   001250                     _LCD_Instruction:
   894                           	callstack 27
   895                           
   896                           ;incstack = 0
   897                           ;LCD_Instruction@Instruction stored from wreg
   898   001250  6E3A               	movwf	LCD_Instruction@Instruction^0,c
   899   001252                     
   900                           ;main.c: 116:     LATCbits.LATC5 = 1;
   901   001252  8A8B               	bsf	139,5,c	;volatile
   902   001254                     
   903                           ;main.c: 117:     _delay((unsigned long)((15)*(16000000/4000.0)));
   904   001254  0E4E               	movlw	78
   905   001256  6E39               	movwf	??_LCD_Instruction^0,c
   906   001258  0EEB               	movlw	235
   907   00125A                     u177:
   908   00125A  2EE8               	decfsz	wreg,f,c
   909   00125C  D7FE               	bra	u177
   910   00125E  2E39               	decfsz	??_LCD_Instruction^0,f,c
   911   001260  D7FC               	bra	u177
   912   001262  0000               	nop	
   913   001264                     
   914                           ;main.c: 118:     LATD = Instruction;
   915   001264  C03A  FF8C         	movff	LCD_Instruction@Instruction,3980	;volatile
   916   001268                     
   917                           ;main.c: 119:     _delay((unsigned long)((15)*(16000000/4000.0)));
   918   001268  0E4E               	movlw	78
   919   00126A  6E39               	movwf	??_LCD_Instruction^0,c
   920   00126C  0EEB               	movlw	235
   921   00126E                     u187:
   922   00126E  2EE8               	decfsz	wreg,f,c
   923   001270  D7FE               	bra	u187
   924   001272  2E39               	decfsz	??_LCD_Instruction^0,f,c
   925   001274  D7FC               	bra	u187
   926   001276  0000               	nop	
   927   001278                     
   928                           ;main.c: 120:     LATCbits.LATC5 = 0;
   929   001278  9A8B               	bcf	139,5,c	;volatile
   930   00127A                     
   931                           ;main.c: 121:     _delay((unsigned long)((15)*(16000000/4000.0)));
   932   00127A  0E4E               	movlw	78
   933   00127C  6E39               	movwf	??_LCD_Instruction^0,c
   934   00127E  0EEB               	movlw	235
   935   001280                     u197:
   936   001280  2EE8               	decfsz	wreg,f,c
   937   001282  D7FE               	bra	u197
   938   001284  2E39               	decfsz	??_LCD_Instruction^0,f,c
   939   001286  D7FC               	bra	u197
   940   001288  0000               	nop	
   941   00128A  0012               	return		;funcret
   942   00128C                     __end_of_LCD_Instruction:
   943                           	callstack 0
   944                           
   945 ;; *************** function _Configurations *****************
   946 ;; Defined at:
   947 ;;		line 65 in file "main.c"
   948 ;; Parameters:    Size  Location     Type
   949 ;;		None
   950 ;; Auto vars:     Size  Location     Type
   951 ;;		None
   952 ;; Return value:  Size  Location     Type
   953 ;;                  1    wreg      void 
   954 ;; Registers used:
   955 ;;		wreg, status,2
   956 ;; Tracked objects:
   957 ;;		On entry : 0/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   965 ;;Total ram usage:        0 bytes
   966 ;; Hardware stack levels used: 1
   967 ;; This function calls:
   968 ;;		Nothing
   969 ;; This function is called by:
   970 ;;		_main
   971 ;; This function uses a non-reentrant model
   972 ;;
   973                           
   974                           	psect	text6
   975   0012C4                     __ptext6:
   976                           	callstack 0
   977   0012C4                     _Configurations:
   978                           	callstack 30
   979   0012C4                     
   980                           ;main.c: 67:     OSCCON = 0x72;
   981   0012C4  0E72               	movlw	114
   982   0012C6  6ED3               	movwf	211,c	;volatile
   983                           
   984                           ;main.c: 69:     ANSELC = 0;
   985   0012C8  0E00               	movlw	0
   986   0012CA  010F               	movlb	15	; () banked
   987   0012CC  6F3A               	movwf	58,b	;volatile
   988                           
   989                           ;main.c: 70:     ANSELD = 0;
   990   0012CE  0E00               	movlw	0
   991   0012D0  6F3B               	movwf	59,b	;volatile
   992   0012D2                     
   993                           ; BSR set to: 15
   994                           ;main.c: 72:     TRISCbits.RC4 = 0;
   995   0012D2  9894               	bcf	148,4,c	;volatile
   996   0012D4                     
   997                           ; BSR set to: 15
   998                           ;main.c: 73:     TRISCbits.RC5 = 0;
   999   0012D4  9A94               	bcf	148,5,c	;volatile
  1000                           
  1001                           ;main.c: 75:     TRISD = 0;
  1002   0012D6  0E00               	movlw	0
  1003   0012D8  6E95               	movwf	149,c	;volatile
  1004   0012DA                     
  1005                           ; BSR set to: 15
  1006                           ;main.c: 77:     LATCbits.LC4 = 0;
  1007   0012DA  988B               	bcf	139,4,c	;volatile
  1008   0012DC                     
  1009                           ; BSR set to: 15
  1010                           ;main.c: 78:     LATCbits.LC5 = 0;
  1011   0012DC  9A8B               	bcf	139,5,c	;volatile
  1012                           
  1013                           ;main.c: 80:     LATD = 0;
  1014   0012DE  0E00               	movlw	0
  1015   0012E0  6E8C               	movwf	140,c	;volatile
  1016   0012E2                     
  1017                           ; BSR set to: 15
  1018   0012E2  0012               	return		;funcret
  1019   0012E4                     __end_of_Configurations:
  1020                           	callstack 0
  1021                           
  1022                           	psect	rparam
  1023   000000                     
  1024                           	psect	config
  1025                           
  1026                           ; Padding undefined space
  1027   300000                     	org	3145728
  1028   300000  FF                 	db	255
  1029                           
  1030                           ;Config register CONFIG1H @ 0x300001
  1031                           ;	Oscillator Selection bits
  1032                           ;	FOSC = INTIO67, Internal oscillator block
  1033                           ;	4X PLL Enable
  1034                           ;	PLLCFG = OFF, Oscillator used directly
  1035                           ;	Primary clock enable bit
  1036                           ;	PRICLKEN = ON, Primary clock is always enabled
  1037                           ;	Fail-Safe Clock Monitor Enable bit
  1038                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1039                           ;	Internal/External Oscillator Switchover bit
  1040                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1041   300001                     	org	3145729
  1042   300001  28                 	db	40
  1043                           
  1044                           ;Config register CONFIG2L @ 0x300002
  1045                           ;	Power-up Timer Enable bit
  1046                           ;	PWRTEN = OFF, Power up timer disabled
  1047                           ;	Brown-out Reset Enable bits
  1048                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1049                           ;	Brown Out Reset Voltage bits
  1050                           ;	BORV = 190, VBOR set to 1.90 V nominal
  1051   300002                     	org	3145730
  1052   300002  1F                 	db	31
  1053                           
  1054                           ;Config register CONFIG2H @ 0x300003
  1055                           ;	Watchdog Timer Enable bits
  1056                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  1057                           ;	Watchdog Timer Postscale Select bits
  1058                           ;	WDTPS = 32768, 1:32768
  1059   300003                     	org	3145731
  1060   300003  3C                 	db	60
  1061                           
  1062                           ; Padding undefined space
  1063   300004                     	org	3145732
  1064   300004  FF                 	db	255
  1065                           
  1066                           ;Config register CONFIG3H @ 0x300005
  1067                           ;	CCP2 MUX bit
  1068                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  1069                           ;	PORTB A/D Enable bit
  1070                           ;	PBADEN = ON, PORTB<5:0> pins are configured as analog input channels on Reset
  1071                           ;	P3A/CCP3 Mux bit
  1072                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
  1073                           ;	HFINTOSC Fast Start-up
  1074                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
  1075                           ;	Timer3 Clock input mux bit
  1076                           ;	T3CMX = PORTC0, T3CKI is on RC0
  1077                           ;	ECCP2 B output mux bit
  1078                           ;	P2BMX = PORTD2, P2B is on RD2
  1079                           ;	MCLR Pin Enable bit
  1080                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
  1081   300005                     	org	3145733
  1082   300005  BF                 	db	191
  1083                           
  1084                           ;Config register CONFIG4L @ 0x300006
  1085                           ;	Stack Full/Underflow Reset Enable bit
  1086                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1087                           ;	Single-Supply ICSP Enable bit
  1088                           ;	LVP = OFF, Single-Supply ICSP disabled
  1089                           ;	Extended Instruction Set Enable bit
  1090                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1091                           ;	Background Debug
  1092                           ;	DEBUG = 0x1, unprogrammed default
  1093   300006                     	org	3145734
  1094   300006  81                 	db	129
  1095                           
  1096                           ; Padding undefined space
  1097   300007                     	org	3145735
  1098   300007  FF                 	db	255
  1099                           
  1100                           ;Config register CONFIG5L @ 0x300008
  1101                           ;	Code Protection Block 0
  1102                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  1103                           ;	Code Protection Block 1
  1104                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  1105                           ;	Code Protection Block 2
  1106                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  1107                           ;	Code Protection Block 3
  1108                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  1109   300008                     	org	3145736
  1110   300008  0F                 	db	15
  1111                           
  1112                           ;Config register CONFIG5H @ 0x300009
  1113                           ;	Boot Block Code Protection bit
  1114                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1115                           ;	Data EEPROM Code Protection bit
  1116                           ;	CPD = OFF, Data EEPROM not code-protected
  1117   300009                     	org	3145737
  1118   300009  C0                 	db	192
  1119                           
  1120                           ;Config register CONFIG6L @ 0x30000A
  1121                           ;	Write Protection Block 0
  1122                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  1123                           ;	Write Protection Block 1
  1124                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  1125                           ;	Write Protection Block 2
  1126                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  1127                           ;	Write Protection Block 3
  1128                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  1129   30000A                     	org	3145738
  1130   30000A  0F                 	db	15
  1131                           
  1132                           ;Config register CONFIG6H @ 0x30000B
  1133                           ;	Configuration Register Write Protection bit
  1134                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1135                           ;	Boot Block Write Protection bit
  1136                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  1137                           ;	Data EEPROM Write Protection bit
  1138                           ;	WRTD = OFF, Data EEPROM not write-protected
  1139   30000B                     	org	3145739
  1140   30000B  E0                 	db	224
  1141                           
  1142                           ;Config register CONFIG7L @ 0x30000C
  1143                           ;	Table Read Protection Block 0
  1144                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  1145                           ;	Table Read Protection Block 1
  1146                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1147                           ;	Table Read Protection Block 2
  1148                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  1149                           ;	Table Read Protection Block 3
  1150                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  1151   30000C                     	org	3145740
  1152   30000C  0F                 	db	15
  1153                           
  1154                           ;Config register CONFIG7H @ 0x30000D
  1155                           ;	Boot Block Table Read Protection bit
  1156                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1157   30000D                     	org	3145741
  1158   30000D  40                 	db	64
  1159                           tosu	equ	0xFFF
  1160                           tosh	equ	0xFFE
  1161                           tosl	equ	0xFFD
  1162                           stkptr	equ	0xFFC
  1163                           pclatu	equ	0xFFB
  1164                           pclath	equ	0xFFA
  1165                           pcl	equ	0xFF9
  1166                           tblptru	equ	0xFF8
  1167                           tblptrh	equ	0xFF7
  1168                           tblptrl	equ	0xFF6
  1169                           tablat	equ	0xFF5
  1170                           prodh	equ	0xFF4
  1171                           prodl	equ	0xFF3
  1172                           indf0	equ	0xFEF
  1173                           postinc0	equ	0xFEE
  1174                           postdec0	equ	0xFED
  1175                           preinc0	equ	0xFEC
  1176                           plusw0	equ	0xFEB
  1177                           fsr0h	equ	0xFEA
  1178                           fsr0l	equ	0xFE9
  1179                           wreg	equ	0xFE8
  1180                           indf1	equ	0xFE7
  1181                           postinc1	equ	0xFE6
  1182                           postdec1	equ	0xFE5
  1183                           preinc1	equ	0xFE4
  1184                           plusw1	equ	0xFE3
  1185                           fsr1h	equ	0xFE2
  1186                           fsr1l	equ	0xFE1
  1187                           bsr	equ	0xFE0
  1188                           indf2	equ	0xFDF
  1189                           postinc2	equ	0xFDE
  1190                           postdec2	equ	0xFDD
  1191                           preinc2	equ	0xFDC
  1192                           plusw2	equ	0xFDB
  1193                           fsr2h	equ	0xFDA
  1194                           fsr2l	equ	0xFD9
  1195                           status	equ	0xFD8

Data Sizes:
    Strings     13
    Constant    0
    Data        86
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     15      71
    BANK0           160      0      30
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    Send_String@String	PTR unsigned char  size(1) Largest target is 13
		 -> STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_Test
    _Test->_Send_String
    _Send_String->_Send_Instruction_Data
    _Init_LCD->_Send_Instruction_Data
    _Send_Instruction_Data->_LCD_Instruction

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4216
                     _Configurations
                           _Init_LCD
                               _Test
 ---------------------------------------------------------------------------------
 (1) _Test                                                 8     8      0    2912
                                              7 COMRAM     8     8      0
              _Send_Instruction_Data
                        _Send_String
 ---------------------------------------------------------------------------------
 (2) _Send_String                                          3     2      1    1470
                                              4 COMRAM     3     2      1
              _Send_Instruction_Data
 ---------------------------------------------------------------------------------
 (1) _Init_LCD                                             2     2      0    1304
                                              4 COMRAM     2     2      0
              _Send_Instruction_Data
 ---------------------------------------------------------------------------------
 (3) _Send_Instruction_Data                                2     1      1    1304
                                              2 COMRAM     2     1      1
                    _LCD_Instruction
 ---------------------------------------------------------------------------------
 (4) _LCD_Instruction                                      2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Configurations                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Configurations
   _Init_LCD
     _Send_Instruction_Data
       _LCD_Instruction
   _Test
     _Send_Instruction_Data
     _Send_String
       _Send_Instruction_Data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      42        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      1E       5       18.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      F      47       1       74.7%
BITBIGSFRlhll       4F      0       0      40        0.0%
BITBIGSFRlhh        3D      0       0      38        0.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITBIGSFRh          2C      0       0      37        0.0%
BITBIGSFRlhlh        7      0       0      39        0.0%
BITBIGSFRll          2      0       0      41        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      65      28        0.0%
DATA                 0      0      65       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Thu Feb 15 22:40:13 2024

                              l43 12E2                                l52 128A                                l37 132A  
                              l46 11C0                                l70 111E                                l38 132A  
                              l49 131C                                l58 124E                                u70 124E  
                              u71 124A                                u80 107E                                u65 130C  
                              u81 107A                                u66 130E                                u90 10C2  
                              u91 10BE                 Send_String@String 003D                               l900 1022  
                             l910 1066                               l902 103A                               l920 10AA  
                             l912 107E                               l904 1044                               l850 1254  
                             l930 1102                               l922 10C2                               l914 1088  
                             l906 1050                               l780 12DC                               l772 12C4  
                             l852 1264                               l860 1304                               l932 1106  
                             l924 10DA                               l916 1094                               l908 1062  
                             l774 12D2                               l854 1268                               l862 130E  
                             l870 122E                               l926 10E4                               l918 10A6  
                             l934 131E                               l776 12D4                               l856 1278  
                             l848 1252                               l864 1316                               l880 115C  
                             l872 1230                               l928 10F0                               l936 1322  
                             l778 12DA                               l858 127A                               l890 1194  
                             l882 116C                               l874 1120                               l866 1210  
                             l938 1326                               l892 119E                               l884 1176  
                             l876 1138                               l868 1218                               l894 11A8  
                             l886 1180                               l878 1142                               l888 118A  
                             l896 1010                               l898 101A                               u100 111E  
                             u101 111A                               u117 102C                               u127 10CC  
                             u137 112A                               u147 1148                               u157 1162  
                             u167 11B2                               u177 125A                               u187 126E  
                             u197 1280                               wreg 0FE8                              STR_1 1001  
                            _LATD 0F8C                              _Test 1010                              _main 131E  
                            fsr2h 0FDA                              indf2 0FDF                              fsr1l 0FE1  
                            fsr2l 0FD9                              start 0000                      ___param_bank 0000  
                 _LCD_Instruction 1250  Send_Instruction_Data@Instruction 003C                             ?_Test 0039  
                           ?_main 0039                             _TRISD 0F95                             Test@i 0042  
                           Test@j 0046                             _Text2 001F                             _Text3 0001  
                           _Text4 0060                             tablat 0FF5                             status 0FD8  
                 __initialization 11C2                      __end_of_Test 1120                      __end_of_main 1332  
                __end_of_Init_LCD 11C2             _Send_Instruction_Data 1302                            ??_Test 0040  
                          ??_main 0048                     ??_Send_String 003E                     __activetblptr 0001  
                          _ANSELC 0F3A                            _ANSELD 0F3B        LCD_Instruction@Instruction 003A  
                          _OSCCON 0FD3           __end_of_LCD_Instruction 128C                            isa$std 0001  
                    __pdataCOMRAM 0001                      __mediumconst 0000                            tblptrh 0FF7  
                          tblptrl 0FF6                            tblptru 0FF8               __end_of_Send_String 1250  
                      __accesstop 0060           __end_of__initialization 1202                     ___rparam_used 0001  
                  __pcstackCOMRAM 0039                      __pidataBANK0 12E4            ?_Send_Instruction_Data 003B  
                       ?_Init_LCD 0039                  ?_LCD_Instruction 0039                       _Send_String 1210  
                      ??_Init_LCD 003D                           __Hparam 0000                           __Lparam 0000  
                    __psmallconst 1000                           __pcinit 11C2                           __ramtop 1000  
                         __ptext0 131E                           __ptext1 1010                           __ptext2 1210  
                         __ptext3 1120                           __ptext4 1302                           __ptext5 1250  
                         __ptext6 12C4              end_of_initialization 1202                           postdec1 0FE5  
                         postinc0 0FEE                         _TRISCbits 0F94           ??_Send_Instruction_Data 003C  
                   __pidataCOMRAM 128C               start_initialization 11C2                      Send_String@i 003F  
       Send_Instruction_Data@Data 003B                    _Configurations 12C4                         Test@i_184 0044  
                     __pdataBANK0 0060                      ?_Send_String 003D            __end_of_Configurations 12E4  
                     __smallconst 1000                   ?_Configurations 0039                          _LATCbits 0F8B  
                       copy_data0 11D6                         copy_data1 11F6                          _Init_LCD 1120  
                        __Hrparam 0000                          __Lrparam 0000                      __Lsmallconst 1000  
   __end_of_Send_Instruction_Data 131E                 ??_LCD_Instruction 0039                          isa$xinst 0000  
                ??_Configurations 0039  
